<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骑士安全</title>
  <subtitle>Standing on the shoulders of giants.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://harmansecurity.cn/"/>
  <updated>2017-03-19T15:16:09.170Z</updated>
  <id>http://harmansecurity.cn/</id>
  
  <author>
    <name>如梦星影坠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础学习笔记(六)</title>
    <link href="http://harmansecurity.cn/2017/03/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%AD)/"/>
    <id>http://harmansecurity.cn/2017/03/19/Java基础学习笔记(六)/</id>
    <published>2017-03-19T14:40:21.000Z</published>
    <updated>2017-03-19T15:16:09.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="06-01-面向对象-面向对象思想概述-了解"><a href="#06-01-面向对象-面向对象思想概述-了解" class="headerlink" title="06.01_面向对象(面向对象思想概述)(了解)"></a>06.01_面向对象(面向对象思想概述)(了解)</h3><ul>
<li>A:面向过程思想概述<ul>
<li>第一步</li>
<li>第二步 </li>
</ul>
</li>
<li>B:面向对象思想概述<ul>
<li>找对象(第一步,第二步) </li>
</ul>
</li>
<li>C:举例<ul>
<li>买煎饼果子</li>
<li>洗衣服 </li>
</ul>
</li>
<li>D:面向对象思想特点<ul>
<li>a:是一种更符合我们思想习惯的思想</li>
<li>b:可以将复杂的事情简单化</li>
<li>c:将我们从执行者变成了指挥者<ul>
<li>角色发生了转换</li>
</ul>
</li>
</ul>
</li>
<li>E:面向对象开发<ul>
<li>就是不断的创建对象，使用对象，指挥对象做事情。</li>
</ul>
</li>
<li>F:面向对象设计<ul>
<li>其实就是在管理和维护对象之间的关系。</li>
</ul>
</li>
<li>G:面向对象特征<ul>
<li>封装(encapsulation)</li>
<li>继承(inheritance)</li>
<li>多态(polymorphism)</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="06-02-面向对象-类与对象概述-掌握"><a href="#06-02-面向对象-类与对象概述-掌握" class="headerlink" title="06.02_面向对象(类与对象概述)(掌握)"></a>06.02_面向对象(类与对象概述)(掌握)</h3><ul>
<li>A:我们学习编程是为了什么<ul>
<li>为了把我们日常生活中实物用学习语言描述出来</li>
</ul>
</li>
<li>B:我们如何描述现实世界事物<ul>
<li>属性    就是该事物的描述信息(事物身上的名词)</li>
<li>行为    就是该事物能够做什么(事物身上的动词)</li>
</ul>
</li>
<li>C:Java中最基本的单位是类,Java中用class描述事物也是如此<ul>
<li>成员变量    就是事物的属性</li>
<li>成员方法    就是事物的行为</li>
</ul>
</li>
<li>D:定义类其实就是定义类的成员(成员变量和成员方法)<ul>
<li>a:成员变量    和以前定义变量是一样的，只不过位置发生了改变。在类中，方法外。</li>
<li>b:成员方法    和以前定义方法是一样的，只不过把static去掉，后面在详细讲解static的作用。</li>
</ul>
</li>
<li>E:类和对象的概念<ul>
<li>a:类：是一组相关的属性和行为的集合</li>
<li>b:对象：是该类事物的具体体现</li>
<li>c:举例：<ul>
<li>类     学生</li>
<li>对象    具体的某个学生就是一个对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="06-03-面向对象-学生类的定义-掌握"><a href="#06-03-面向对象-学生类的定义-掌握" class="headerlink" title="06.03_面向对象(学生类的定义)(掌握)"></a>06.03_面向对象(学生类的定义)(掌握)</h3><ul>
<li>A:学生事物</li>
<li>B:学生类</li>
<li>C:案例演示<ul>
<li>属性:姓名,年龄,性别</li>
<li>行为:学习,睡觉</li>
</ul>
</li>
</ul>
<h3 id="06-04-面向对象-手机类的定义-掌握"><a href="#06-04-面向对象-手机类的定义-掌握" class="headerlink" title="06.04_面向对象(手机类的定义)(掌握)"></a>06.04_面向对象(手机类的定义)(掌握)</h3><ul>
<li>模仿学生类，让学生自己完成<ul>
<li>属性:品牌(brand)价格(price)</li>
<li>行为:打电话(call),发信息(sendMessage)玩游戏(playGame)</li>
</ul>
</li>
</ul>
<h3 id="06-05-面向对象-学生类的使用-掌握"><a href="#06-05-面向对象-学生类的使用-掌握" class="headerlink" title="06.05_面向对象(学生类的使用)(掌握)"></a>06.05_面向对象(学生类的使用)(掌握)</h3><ul>
<li>A:文件名问题<ul>
<li>在一个java文件中写两个类：一个基本的类，一个测试类。</li>
<li>建议：文件名称和测试类名称一致。</li>
</ul>
</li>
<li>B:如何使用对象?<ul>
<li>创建对象并使用</li>
<li>格式：类名 对象名 = new 类名();</li>
</ul>
</li>
<li>D:如何使用成员变量呢?<ul>
<li>对象名.变量名</li>
</ul>
</li>
<li>E:如何使用成员方法呢?<ul>
<li>对象名.方法名(…)</li>
</ul>
</li>
</ul>
<h3 id="06-06-面向对象-手机类的使用-掌握"><a href="#06-06-面向对象-手机类的使用-掌握" class="headerlink" title="06.06_面向对象(手机类的使用)(掌握)"></a>06.06_面向对象(手机类的使用)(掌握)</h3><ul>
<li>A:学生自己完成<ul>
<li>模仿学生类，让学生自己完成</li>
</ul>
</li>
</ul>
<h3 id="06-07-面向对象-一个对象的内存图-掌握"><a href="#06-07-面向对象-一个对象的内存图-掌握" class="headerlink" title="06.07_面向对象(一个对象的内存图)(掌握)"></a>06.07_面向对象(一个对象的内存图)(掌握)</h3><ul>
<li>A:画图演示<ul>
<li>一个对象</li>
</ul>
</li>
</ul>
<h3 id="06-08-面向对象-二个对象的内存图-了解"><a href="#06-08-面向对象-二个对象的内存图-了解" class="headerlink" title="06.08_面向对象(二个对象的内存图)(了解)"></a>06.08_面向对象(二个对象的内存图)(了解)</h3><ul>
<li>A:画图演示<ul>
<li>二个不同的对象</li>
</ul>
</li>
</ul>
<h3 id="06-09-面向对象-三个引用两个对象的内存图-了解"><a href="#06-09-面向对象-三个引用两个对象的内存图-了解" class="headerlink" title="06.09_面向对象(三个引用两个对象的内存图)(了解)"></a>06.09_面向对象(三个引用两个对象的内存图)(了解)</h3><ul>
<li>A:画图演示<ul>
<li>三个引用，有两个对象的引用指向同一个地址</li>
</ul>
</li>
</ul>
<h3 id="06-10-面向对象-成员变量和局部变量的区别-掌握"><a href="#06-10-面向对象-成员变量和局部变量的区别-掌握" class="headerlink" title="06.10_面向对象(成员变量和局部变量的区别)(掌握)"></a>06.10_面向对象(成员变量和局部变量的区别)(掌握)</h3><ul>
<li>A:在类中的位置不同<ul>
<li>成员变量：在类中方法外</li>
<li>局部变量：在方法定义中或者方法声明上</li>
</ul>
</li>
<li>B:在内存中的位置不同<ul>
<li>成员变量：在堆内存(成员变量属于对象,对象进堆内存)</li>
<li>局部变量：在栈内存(局部变量属于方法,方法进栈内存)</li>
</ul>
</li>
<li>C:生命周期不同<ul>
<li>成员变量：随着对象的创建而存在，随着对象的消失而消失</li>
<li>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</li>
</ul>
</li>
<li><p>D:初始化值不同</p>
<ul>
<li>成员变量：有默认初始化值</li>
<li>局部变量：没有默认初始化值，必须定义，赋值，然后才能使用。</li>
</ul>
</li>
<li><p>注意事项：</p>
<ul>
<li>局部变量名称可以和成员变量名称一样，在方法中使用的时候，采用的是就近原则。</li>
<li>基本数据类型变量包括哪些:byte,short,int,long,float,double,boolean,char</li>
<li>引用数据类型变量包括哪些:数组,类,接口,枚举</li>
</ul>
</li>
</ul>
<h3 id="06-11-面向对象-方法的形式参数是类名的时候如何调用-掌握"><a href="#06-11-面向对象-方法的形式参数是类名的时候如何调用-掌握" class="headerlink" title="06.11_面向对象(方法的形式参数是类名的时候如何调用)(掌握)"></a>06.11_面向对象(方法的形式参数是类名的时候如何调用)(掌握)</h3><ul>
<li>A:方法的参数是类名public void print(Student s){}//print(new Student());<ul>
<li>如果你看到了一个方法的形式参数是一个类类型(引用类型)，这里其实需要的是该类的对象。</li>
</ul>
</li>
</ul>
<h3 id="06-12-面向对象-匿名对象的概述和应用-掌握"><a href="#06-12-面向对象-匿名对象的概述和应用-掌握" class="headerlink" title="06.12_面向对象(匿名对象的概述和应用)(掌握)"></a>06.12_面向对象(匿名对象的概述和应用)(掌握)</h3><ul>
<li>A:什么是匿名对象<ul>
<li>没有名字的对象 </li>
</ul>
</li>
<li>B:匿名对象应用场景<ul>
<li>a:调用方法，仅仅只调用一次的时候。<ul>
<li>那么，这种匿名调用有什么好处吗?<ul>
<li>节省代码 </li>
</ul>
</li>
<li>注意：调用多次的时候，不适合。匿名对象调用完毕就是垃圾。可以被垃圾回收器回收。</li>
</ul>
</li>
<li>b:匿名对象可以作为实际参数传递</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>匿名对象应用场景</li>
</ul>
</li>
</ul>
<h3 id="06-13-面向对象-封装的概述-掌握"><a href="#06-13-面向对象-封装的概述-掌握" class="headerlink" title="06.13_面向对象(封装的概述)(掌握)"></a>06.13_面向对象(封装的概述)(掌握)</h3><ul>
<li><p>A:封装概述</p>
<ul>
<li>是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。</li>
</ul>
</li>
<li><p>B:封装好处</p>
<ul>
<li>隐藏实现细节，提供公共的访问方式</li>
<li>提高了代码的复用性</li>
<li>提高安全性。</li>
</ul>
</li>
<li>C:封装原则<ul>
<li>将不需要对外提供的内容都隐藏起来。</li>
<li>把属性隐藏，提供公共方法对其访问。</li>
</ul>
</li>
</ul>
<h3 id="06-14-面向对象-private关键字的概述和特点-掌握"><a href="#06-14-面向对象-private关键字的概述和特点-掌握" class="headerlink" title="06.14_面向对象(private关键字的概述和特点)(掌握)"></a>06.14_面向对象(private关键字的概述和特点)(掌握)</h3><ul>
<li>A:人类赋值年龄的问题</li>
<li>B:private关键字特点<ul>
<li>a:是一个权限修饰符</li>
<li>b:可以修饰成员变量和成员方法</li>
<li>c:被其修饰的成员只能在本类中被访问</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>封装和private的应用：</li>
<li>A:把成员变量用private修饰</li>
<li>B:提供对应的getXxx()和setXxx()方法</li>
<li>private仅仅是封装的一种体现形式,不能说封装就是私有</li>
</ul>
</li>
</ul>
<h3 id="06-15-面向对象-this关键字的概述和应用-掌握"><a href="#06-15-面向对象-this关键字的概述和应用-掌握" class="headerlink" title="06.15_面向对象(this关键字的概述和应用)(掌握)"></a>06.15_面向对象(this关键字的概述和应用)(掌握)</h3><ul>
<li>A:this关键字特点<ul>
<li>代表当前对象的引用 </li>
</ul>
</li>
<li>B:案例演示<ul>
<li>this的应用场景</li>
<li>用来区分成员变量和局部变量重名</li>
</ul>
</li>
</ul>
<h3 id="06-16-面向对象-手机类代码及其测试-掌握"><a href="#06-16-面向对象-手机类代码及其测试-掌握" class="headerlink" title="06.16_面向对象(手机类代码及其测试)(掌握)"></a>06.16_面向对象(手机类代码及其测试)(掌握)</h3><ul>
<li>A:学生练习<ul>
<li>请把手机类写成一个标准类，然后创建对象测试功能。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo2_Phone</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Phone p1 = <span class="keyword">new</span> Phone();</div><div class="line">		p1.setBrand(<span class="string">"三星"</span>);</div><div class="line">		p1.setPrice(<span class="number">5288</span>);</div><div class="line"></div><div class="line">		System.out.println(p1.getBrand() + <span class="string">"..."</span> + p1.getPrice());</div><div class="line">		p1.call();</div><div class="line">		p1.sendMessage();</div><div class="line">		p1.playGame();</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">手机类</div><div class="line">	属性:品牌brand,价格price</div><div class="line">	行为:打电话call,发短信sendMessage,玩游戏,playGame</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;								<span class="comment">//java bean</span></div><div class="line">	<span class="keyword">private</span> String brand;					<span class="comment">//品牌</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> price;						<span class="comment">//价格</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrand</span><span class="params">(String brand)</span> </span>&#123;	<span class="comment">//设置品牌</span></div><div class="line">		<span class="keyword">this</span>.brand = brand;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBrand</span><span class="params">()</span> </span>&#123;				<span class="comment">//获取品牌</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.brand;					<span class="comment">//this.可以省略,你不加系统会默认给你加</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;		<span class="comment">//设置价格</span></div><div class="line">		<span class="keyword">this</span>.price = price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;					<span class="comment">//获取价格</span></div><div class="line">		<span class="keyword">return</span> price;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;					<span class="comment">//打电话</span></div><div class="line">		System.out.println(<span class="string">"打电话"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;				<span class="comment">//发短信</span></div><div class="line">		System.out.println(<span class="string">"发短信"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;				<span class="comment">//玩游戏</span></div><div class="line">		System.out.println(<span class="string">"玩游戏"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="06-17-day06总结"><a href="#06-17-day06总结" class="headerlink" title="06.17_day06总结"></a>06.17_day06总结</h3><ul>
<li>把今天的知识点总结一遍。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;06-01-面向对象-面向对象思想概述-了解&quot;&gt;&lt;a href=&quot;#06-01-面向对象-面向对象思想概述-了解&quot; class=&quot;headerlink&quot; title=&quot;06.01_面向对象(面向对象思想概述)(了解)&quot;&gt;&lt;/a&gt;06.01_面向对象(面向对象思想概述)(了解)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:面向过程思想概述&lt;ul&gt;
&lt;li&gt;第一步&lt;/li&gt;
&lt;li&gt;第二步 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:面向对象思想概述&lt;ul&gt;
&lt;li&gt;找对象(第一步,第二步) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C:举例&lt;ul&gt;
&lt;li&gt;买煎饼果子&lt;/li&gt;
&lt;li&gt;洗衣服 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D:面向对象思想特点&lt;ul&gt;
&lt;li&gt;a:是一种更符合我们思想习惯的思想&lt;/li&gt;
&lt;li&gt;b:可以将复杂的事情简单化&lt;/li&gt;
&lt;li&gt;c:将我们从执行者变成了指挥者&lt;ul&gt;
&lt;li&gt;角色发生了转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E:面向对象开发&lt;ul&gt;
&lt;li&gt;就是不断的创建对象，使用对象，指挥对象做事情。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;F:面向对象设计&lt;ul&gt;
&lt;li&gt;其实就是在管理和维护对象之间的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;G:面向对象特征&lt;ul&gt;
&lt;li&gt;封装(encapsulation)&lt;/li&gt;
&lt;li&gt;继承(inheritance)&lt;/li&gt;
&lt;li&gt;多态(polymorphism)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java语言基础" scheme="http://harmansecurity.cn/tags/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="面向对象" scheme="http://harmansecurity.cn/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习笔记(四)</title>
    <link href="http://harmansecurity.cn/2017/03/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)/"/>
    <id>http://harmansecurity.cn/2017/03/19/Java基础学习笔记(四)/</id>
    <published>2017-03-19T14:38:21.000Z</published>
    <updated>2017-03-19T15:12:13.869Z</updated>
    
    <content type="html"><![CDATA[<h3 id="04-01-Java语言基础-循环结构概述和for语句的格式及其使用"><a href="#04-01-Java语言基础-循环结构概述和for语句的格式及其使用" class="headerlink" title="04.01_Java语言基础(循环结构概述和for语句的格式及其使用)"></a>04.01_Java语言基础(循环结构概述和for语句的格式及其使用)</h3><ul>
<li>A:循环结构的分类<ul>
<li>for,while,do…while </li>
</ul>
</li>
<li>B:循环结构for语句的格式：</li>
<li><pre><code>for(初始化表达式;条件表达式;循环后的操作表达式) {
    循环体;
}
</code></pre></li>
<li>C执行流程：<ul>
<li>a:执行初始化语句</li>
<li>b:执行判断条件语句,看其返回值是true还是false<ul>
<li>如果是true，就继续执行</li>
<li>如果是false，就结束循环</li>
</ul>
</li>
<li>c:执行循环体语句;</li>
<li>d:执行循环后的操作表达式</li>
<li>e:回到B继续。</li>
</ul>
</li>
<li>D:案例演示<ul>
<li>在控制台输出10次”helloworld”</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="04-02-Java语言基础-循环结构for语句的练习之获取数据"><a href="#04-02-Java语言基础-循环结构for语句的练习之获取数据" class="headerlink" title="04.02_Java语言基础(循环结构for语句的练习之获取数据)"></a>04.02_Java语言基础(循环结构for语句的练习之获取数据)</h3><ul>
<li>A:案例演示<ul>
<li>需求：请在控制台输出数据1-10</li>
<li>需求：请在控制台输出数据10-1</li>
</ul>
</li>
<li>B:注意事项<ul>
<li>a:判断条件语句无论简单还是复杂结果是boolean类型。</li>
<li>b:循环体语句如果是一条语句，大括号可以省略；如果是多条语句，大括号不能省略。建议永远不要省略。</li>
<li>c:一般来说：有左大括号就没有分号，有分号就没有左大括号</li>
</ul>
</li>
</ul>
<h3 id="04-03-Java语言基础-循环结构for语句的练习之求和思想"><a href="#04-03-Java语言基础-循环结构for语句的练习之求和思想" class="headerlink" title="04.03_Java语言基础(循环结构for语句的练习之求和思想)"></a>04.03_Java语言基础(循环结构for语句的练习之求和思想)</h3><ul>
<li>A:案例演示<ul>
<li>需求：求出1-10之间数据之和</li>
</ul>
</li>
<li>B:学生练习<ul>
<li>需求：求出1-100之间偶数和</li>
<li>需求：求出1-100之间奇数和</li>
</ul>
</li>
</ul>
<h3 id="04-04-Java语言基础-循环结构for语句的练习之水仙花"><a href="#04-04-Java语言基础-循环结构for语句的练习之水仙花" class="headerlink" title="04.04_Java语言基础(循环结构for语句的练习之水仙花)"></a>04.04_Java语言基础(循环结构for语句的练习之水仙花)</h3><ul>
<li><p>A:案例演示</p>
<ul>
<li><p>需求：在控制台输出所有的”水仙花数”</p>
</li>
<li><p>所谓的水仙花数是指一个三位数，其各位数字的立方和等于该数本身。</p>
</li>
<li>举例：153就是一个水仙花数。</li>
<li>153 = 1<em>1</em>1 + 5<em>5</em>5 + 3<em>3</em>3 = 1 + 125 + 27 = 153</li>
</ul>
</li>
</ul>
<h3 id="04-05-Java语言基础-循环结构for语句的练习之统计思想"><a href="#04-05-Java语言基础-循环结构for语句的练习之统计思想" class="headerlink" title="04.05_Java语言基础(循环结构for语句的练习之统计思想)"></a>04.05_Java语言基础(循环结构for语句的练习之统计思想)</h3><ul>
<li>A:案例演示<ul>
<li>需求：统计”水仙花数”共有多少个</li>
</ul>
</li>
</ul>
<h3 id="04-06-Java语言基础-循环结构while语句的格式和基本使用"><a href="#04-06-Java语言基础-循环结构while语句的格式和基本使用" class="headerlink" title="04.06_Java语言基础(循环结构while语句的格式和基本使用)"></a>04.06_Java语言基础(循环结构while语句的格式和基本使用)</h3><ul>
<li>A:循环结构while语句的格式：</li>
<li><p>while循环的基本格式：<br>while(判断条件语句) {<br>  循环体语句;<br>}</p>
<p>完整格式：</p>
<p>初始化语句;<br>while(判断条件语句) {<br>   循环体语句;<br>   控制条件语句;<br>}</p>
</li>
<li>B:执行流程：<ul>
<li>a:执行初始化语句</li>
<li>b:执行判断条件语句,看其返回值是true还是false<ul>
<li>如果是true，就继续执行</li>
<li>如果是false，就结束循环</li>
</ul>
</li>
<li>c:执行循环体语句;</li>
<li>d:执行控制条件语句</li>
<li>e:回到B继续。</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>需求：请在控制台输出数据1-10</li>
</ul>
</li>
</ul>
<h3 id="04-07-Java语言基础-循环结构while语句的练习"><a href="#04-07-Java语言基础-循环结构while语句的练习" class="headerlink" title="04.07_Java语言基础(循环结构while语句的练习)"></a>04.07_Java语言基础(循环结构while语句的练习)</h3><ul>
<li>A:求和思想<ul>
<li>求1-100之和</li>
</ul>
</li>
<li>B:统计思想<ul>
<li>统计”水仙花数”共有多少个</li>
</ul>
</li>
</ul>
<h3 id="04-08-Java语言基础-循环结构do…while语句的格式和基本使用"><a href="#04-08-Java语言基础-循环结构do…while语句的格式和基本使用" class="headerlink" title="04.08_Java语言基础(循环结构do…while语句的格式和基本使用)"></a>04.08_Java语言基础(循环结构do…while语句的格式和基本使用)</h3><ul>
<li>A:循环结构do…while语句的格式：</li>
<li><pre><code>do {
    循环体语句;
}while(判断条件语句);

完整格式；
初始化语句;
do {
    循环体语句;
    控制条件语句;
}while(判断条件语句);
</code></pre></li>
<li>B:执行流程：<ul>
<li>a:执行初始化语句</li>
<li>b:执行循环体语句;</li>
<li>c:执行控制条件语句</li>
<li>d:执行判断条件语句,看其返回值是true还是false<ul>
<li>如果是true，就继续执行</li>
<li>如果是false，就结束循环</li>
</ul>
</li>
<li>e:回到b继续。</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>需求：请在控制台输出数据1-10</li>
</ul>
</li>
</ul>
<h3 id="04-09-Java语言基础-循环结构三种循环语句的区别"><a href="#04-09-Java语言基础-循环结构三种循环语句的区别" class="headerlink" title="04.09_Java语言基础(循环结构三种循环语句的区别)"></a>04.09_Java语言基础(循环结构三种循环语句的区别)</h3><ul>
<li>A:案例演示<ul>
<li>三种循环语句的区别:</li>
<li>do…while循环至少执行一次循环体。</li>
<li>而for,while循环必须先判断条件是否成立，然后决定是否执行循环体语句。</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>for循环和while循环的区别：<ul>
<li>A:如果你想在循环结束后，继续使用控制条件的那个变量，用while循环，否则用for循环。不知道用谁就用for循环。因为变量及早的从内存中消失，可以提高内存的使用效率。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="04-10-Java语言基础-循环结构注意事项之死循环"><a href="#04-10-Java语言基础-循环结构注意事项之死循环" class="headerlink" title="04.10_Java语言基础(循环结构注意事项之死循环)"></a>04.10_Java语言基础(循环结构注意事项之死循环)</h3><ul>
<li>A:一定要注意控制条件语句控制的那个变量的问题，不要弄丢了，否则就容易死循环。</li>
<li>B:两种最简单的死循环格式<ul>
<li>while(true){…}</li>
<li>for(;;){…}</li>
</ul>
</li>
</ul>
<h3 id="04-11-Java语言基础-循环结构循环嵌套输出4行5列的星星"><a href="#04-11-Java语言基础-循环结构循环嵌套输出4行5列的星星" class="headerlink" title="04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星)"></a>04.11_Java语言基础(循环结构循环嵌套输出4行5列的星星)</h3><ul>
<li>A:案例演示<ul>
<li>需求：请输出一个4行5列的星星(*)图案。</li>
<li><pre><code>如图：
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div><div class="line">*****</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
</li>
</ul>
<pre><code>注意：
    `System.out.println(&quot;*&quot;);和System.out.print(&quot;*&quot;);`的区别
</code></pre><ul>
<li>B:结论：<ul>
<li>外循环控制行数，内循环控制列数</li>
</ul>
</li>
</ul>
<h3 id="04-12-Java语言基础-循环结构循环嵌套输出正三角形"><a href="#04-12-Java语言基础-循环结构循环嵌套输出正三角形" class="headerlink" title="04.12_Java语言基础(循环结构循环嵌套输出正三角形)"></a>04.12_Java语言基础(循环结构循环嵌套输出正三角形)</h3><ul>
<li>A:案例演示</li>
<li><pre><code>需求：请输出下列的形状
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*</div><div class="line">**</div><div class="line">***</div><div class="line">****</div><div class="line">*****</div></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<h3 id="04-13-Java语言基础-循环结构九九乘法表"><a href="#04-13-Java语言基础-循环结构九九乘法表" class="headerlink" title="04.13_Java语言基础(循环结构九九乘法表)"></a>04.13_Java语言基础(循环结构九九乘法表)</h3><ul>
<li>A:案例演示<ul>
<li>需求：在控制台输出九九乘法表。</li>
</ul>
</li>
<li>B:代码优化</li>
<li><pre><code>注意：
&apos;\x&apos; x表示任意，\是转义符号,这种做法叫转移字符。

&apos;\t&apos;    tab键的位置
&apos;\r&apos;    回车
&apos;\n&apos;    换行
&apos;\&quot;&apos;
&apos;\&apos;&apos;
</code></pre></li>
</ul>
<h3 id="04-14-Java语言基础-控制跳转语句break语句"><a href="#04-14-Java语言基础-控制跳转语句break语句" class="headerlink" title="04.14_Java语言基础(控制跳转语句break语句)"></a>04.14_Java语言基础(控制跳转语句break语句)</h3><ul>
<li>A:break的使用场景<ul>
<li>只能在switch和循环中 </li>
</ul>
</li>
</ul>
<h3 id="04-15-Java语言基础-控制跳转语句continue语句"><a href="#04-15-Java语言基础-控制跳转语句continue语句" class="headerlink" title="04.15_Java语言基础(控制跳转语句continue语句)"></a>04.15_Java语言基础(控制跳转语句continue语句)</h3><ul>
<li>A:continue的使用场景<ul>
<li>只能在循环中 </li>
</ul>
</li>
</ul>
<h3 id="04-16-Java语言基础-控制跳转语句标号"><a href="#04-16-Java语言基础-控制跳转语句标号" class="headerlink" title="04.16_Java语言基础(控制跳转语句标号)"></a>04.16_Java语言基础(控制跳转语句标号)</h3><ul>
<li>标号:标记某个循环对其控制</li>
<li>标号组成规则:其实就是合法的标识符</li>
</ul>
<h3 id="04-17-Java语言基础-控制调整语句练习"><a href="#04-17-Java语言基础-控制调整语句练习" class="headerlink" title="04.17_Java语言基础(控制调整语句练习)"></a>04.17_Java语言基础(控制调整语句练习)</h3><ul>
<li>A:练习题</li>
<li><pre><code>for(int x=1; x&lt;=10; x++) {
    if(x%3==0) {
        //在此处填写代码
    }
    System.out.println(“Java基础班”);
}

我想在控制台输出2次:“Java基础班“
我想在控制台输出7次:“Java基础班“
我想在控制台输出13次:“Java基础班“    
</code></pre></li>
</ul>
<h3 id="04-18-Java语言基础-控制跳转语句return语句"><a href="#04-18-Java语言基础-控制跳转语句return语句" class="headerlink" title="04.18_Java语言基础(控制跳转语句return语句)"></a>04.18_Java语言基础(控制跳转语句return语句)</h3><ul>
<li>A:return的作用<ul>
<li>返回</li>
<li>其实它的作用不是结束循环的，而是结束方法的。</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>return和break以及continue的区别?</li>
<li>return是结束方法</li>
<li>break是跳出循环</li>
<li>continue是终止本次循环继续下次循环</li>
</ul>
</li>
</ul>
<h3 id="04-19-Java语言基础-方法概述和格式说明"><a href="#04-19-Java语言基础-方法概述和格式说明" class="headerlink" title="04.19_Java语言基础(方法概述和格式说明)"></a>04.19_Java语言基础(方法概述和格式说明)</h3><ul>
<li>A:为什么要有方法<ul>
<li>提高代码的复用性 </li>
</ul>
</li>
<li>B:什么是方法<ul>
<li>完成特定功能的代码块。 </li>
</ul>
</li>
<li>C:方法的格式</li>
<li><pre><code>修饰符 返回值类型 方法名(参数类型 参数名1,参数类型 参数名2...) {
    方法体语句;
    return 返回值; 
} 
</code></pre></li>
<li>D:方法的格式说明<ul>
<li>修饰符：目前就用 public static。后面我们再详细的讲解其他的修饰符。</li>
<li>返回值类型：就是功能结果的数据类型。</li>
<li>方法名：符合命名规则即可。方便我们的调用。</li>
<li>参数：<ul>
<li>实际参数：就是实际参与运算的。</li>
<li>形式参数；就是方法定义上的，用于接收实际参数的。</li>
</ul>
</li>
<li>参数类型：就是参数的数据类型</li>
<li>参数名：就是变量名</li>
<li>方法体语句：就是完成功能的代码。</li>
<li>return：结束方法的。</li>
<li>返回值：就是功能的结果，由return带给调用者。 </li>
</ul>
</li>
</ul>
<h3 id="04-20-Java语言基础-方法之求和案例及其调用"><a href="#04-20-Java语言基础-方法之求和案例及其调用" class="headerlink" title="04.20_Java语言基础(方法之求和案例及其调用)"></a>04.20_Java语言基础(方法之求和案例及其调用)</h3><ul>
<li>A:如何写一个方法<ul>
<li>1,明确返回值类型</li>
<li>2,明确参数列表 </li>
</ul>
</li>
<li>B:案例演示<ul>
<li>需求：求两个数据之和的案例</li>
</ul>
</li>
<li>C:方法调用图解</li>
</ul>
<h3 id="04-21-Java语言基础-方法的注意事项"><a href="#04-21-Java语言基础-方法的注意事项" class="headerlink" title="04.21_Java语言基础(方法的注意事项)"></a>04.21_Java语言基础(方法的注意事项)</h3><ul>
<li>A:方法调用(有具体返回值)<ul>
<li>a:单独调用,一般来说没有意义，所以不推荐。</li>
<li>b:输出调用,但是不够好。因为我们可能需要针对结果进行进一步的操作。</li>
<li>c:赋值调用,推荐方案。</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>a:方法不调用不执行</li>
<li>b:方法与方法是平级关系，不能嵌套定义</li>
<li>c:方法定义的时候参数之间用逗号隔开</li>
<li>d:方法调用的时候不用在传递数据类型</li>
<li>e:如果方法有明确的返回值，一定要有return带回一个值</li>
</ul>
</li>
</ul>
<h3 id="04-22-Java语言基础-方法的练习"><a href="#04-22-Java语言基础-方法的练习" class="headerlink" title="04.22_Java语言基础(方法的练习)"></a>04.22_Java语言基础(方法的练习)</h3><ul>
<li>A:案例演示<ul>
<li>需求：键盘录入两个数据，返回两个数中的较大值</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>需求：键盘录入两个数据，比较两个数是否相等     </li>
</ul>
</li>
</ul>
<h3 id="04-23-Java语言基础-方法之输出星形及其调用"><a href="#04-23-Java语言基础-方法之输出星形及其调用" class="headerlink" title="04.23_Java语言基础(方法之输出星形及其调用)"></a>04.23_Java语言基础(方法之输出星形及其调用)</h3><ul>
<li>A:案例演示<ul>
<li>需求：根据键盘录入的行数和列数，在控制台输出星形</li>
</ul>
</li>
<li>B:方法调用：(无返回值,void)<ul>
<li>单独调用</li>
<li>输出调用(错误)</li>
<li>赋值调用(错误)</li>
</ul>
</li>
</ul>
<h3 id="04-24-Java语言基础-方法的练习"><a href="#04-24-Java语言基础-方法的练习" class="headerlink" title="04.24_Java语言基础(方法的练习)"></a>04.24_Java语言基础(方法的练习)</h3><ul>
<li>A:案例演示<ul>
<li>需求：根据键盘录入的数据输出对应的乘法表</li>
</ul>
</li>
</ul>
<h3 id="04-25-Java语言基础-方法重载概述和基本使用"><a href="#04-25-Java语言基础-方法重载概述和基本使用" class="headerlink" title="04.25_Java语言基础(方法重载概述和基本使用)"></a>04.25_Java语言基础(方法重载概述和基本使用)</h3><ul>
<li>A:方法重载概述<ul>
<li>求和案例<ul>
<li>2个整数</li>
<li>3个整数</li>
<li>4个整数</li>
</ul>
</li>
</ul>
</li>
<li><p>B:方法重载：</p>
<ul>
<li><p>在同一个类中，方法名相同，参数列表不同。与返回值类型无关。</p>
</li>
<li><p>参数列表不同：</p>
<ul>
<li>A:参数个数不同</li>
<li>B:参数类型不同</li>
<li>C:参数的顺序不同(算重载,但是在开发中不用)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="04-26-Java语言基础-方法重载练习比较数据是否相等"><a href="#04-26-Java语言基础-方法重载练习比较数据是否相等" class="headerlink" title="04.26_Java语言基础(方法重载练习比较数据是否相等)"></a>04.26_Java语言基础(方法重载练习比较数据是否相等)</h3><ul>
<li>A:案例演示<ul>
<li>需求：比较两个数据是否相等。</li>
<li>参数类型分别为两个int类型，两个double类型，并在main方法中进行测试</li>
</ul>
</li>
</ul>
<h3 id="04-27-day04总结"><a href="#04-27-day04总结" class="headerlink" title="04.27_day04总结"></a>04.27_day04总结</h3><p>把今天的知识点总结一遍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;04-01-Java语言基础-循环结构概述和for语句的格式及其使用&quot;&gt;&lt;a href=&quot;#04-01-Java语言基础-循环结构概述和for语句的格式及其使用&quot; class=&quot;headerlink&quot; title=&quot;04.01_Java语言基础(循环结构概述和for语句的格式及其使用)&quot;&gt;&lt;/a&gt;04.01_Java语言基础(循环结构概述和for语句的格式及其使用)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:循环结构的分类&lt;ul&gt;
&lt;li&gt;for,while,do…while &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:循环结构for语句的格式：&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;for(初始化表达式;条件表达式;循环后的操作表达式) {
    循环体;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;C执行流程：&lt;ul&gt;
&lt;li&gt;a:执行初始化语句&lt;/li&gt;
&lt;li&gt;b:执行判断条件语句,看其返回值是true还是false&lt;ul&gt;
&lt;li&gt;如果是true，就继续执行&lt;/li&gt;
&lt;li&gt;如果是false，就结束循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;c:执行循环体语句;&lt;/li&gt;
&lt;li&gt;d:执行循环后的操作表达式&lt;/li&gt;
&lt;li&gt;e:回到B继续。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;D:案例演示&lt;ul&gt;
&lt;li&gt;在控制台输出10次”helloworld”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java语言基础" scheme="http://harmansecurity.cn/tags/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="循环结构" scheme="http://harmansecurity.cn/tags/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习笔记(三)</title>
    <link href="http://harmansecurity.cn/2017/03/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
    <id>http://harmansecurity.cn/2017/03/19/Java基础学习笔记(三)/</id>
    <published>2017-03-19T14:36:21.000Z</published>
    <updated>2017-03-19T15:09:43.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="03-01-Java语言基础-逻辑运算符的基本用法-掌握"><a href="#03-01-Java语言基础-逻辑运算符的基本用法-掌握" class="headerlink" title="03.01_Java语言基础(逻辑运算符的基本用法)(掌握)"></a>03.01_Java语言基础(逻辑运算符的基本用法)(掌握)</h3><ul>
<li>A:逻辑运算符有哪些<ul>
<li>&amp;,|,^,!</li>
<li>&amp;&amp;,|| </li>
</ul>
</li>
<li>B:案例演示</li>
<li><p>逻辑运算符的基本用法</p>
</li>
<li><p>注意事项：</p>
<ul>
<li>a:逻辑运算符一般用于连接boolean类型的表达式或者值。</li>
<li>b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。<ul>
<li>算术表达式：a + b</li>
<li>比较表达式：a == b(条件表达式)</li>
</ul>
</li>
</ul>
</li>
<li>C:结论：</li>
<li>&amp;逻辑与:有false则false。</li>
<li>|逻辑或:有true则true。</li>
<li>^逻辑异或:相同为false，不同为true。</li>
<li>!逻辑非:非false则true，非true则false。<ul>
<li>特点：偶数个不改变本身。</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="03-02-Java语言基础-逻辑运算符-amp-amp-和-amp-的区别-掌握"><a href="#03-02-Java语言基础-逻辑运算符-amp-amp-和-amp-的区别-掌握" class="headerlink" title="03.02_Java语言基础(逻辑运算符&amp;&amp;和&amp;的区别)(掌握)"></a>03.02_Java语言基础(逻辑运算符&amp;&amp;和&amp;的区别)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>&amp;&amp;和&amp;的区别?<ul>
<li>a:最终结果一样。</li>
<li>b:&amp;&amp;具有短路效果。左边是false，右边不执行。</li>
<li>&amp;是无论左边是false还是true,右边都会执行</li>
</ul>
</li>
</ul>
</li>
<li>B:同理||和|的区别?(学生自学)</li>
<li>C:开发中常用谁?<ul>
<li>&amp;&amp;,||,!</li>
</ul>
</li>
</ul>
<h3 id="03-03-Java语言基础-位运算符的基本用法1-了解"><a href="#03-03-Java语言基础-位运算符的基本用法1-了解" class="headerlink" title="03.03_Java语言基础(位运算符的基本用法1)(了解)"></a>03.03_Java语言基础(位运算符的基本用法1)(了解)</h3><ul>
<li>A:位运算符有哪些<ul>
<li>&amp;,|,^,~ ,&gt;&gt;,&gt;&gt;&gt;,&lt;&lt;</li>
</ul>
</li>
<li><p>B:案例演示</p>
<ul>
<li><p>位运算符的基本用法1</p>
</li>
<li><p>&amp;,|,^,~ 的用法</p>
</li>
<li>&amp;:有0则0</li>
<li>|:有1则1</li>
<li>^:相同则0，不同则1</li>
<li>~:按位取反</li>
</ul>
</li>
</ul>
<h3 id="03-04-Java语言基础-位异或运算符的特点及面试题-掌握"><a href="#03-04-Java语言基础-位异或运算符的特点及面试题-掌握" class="headerlink" title="03.04_Java语言基础(位异或运算符的特点及面试题)(掌握)"></a>03.04_Java语言基础(位异或运算符的特点及面试题)(掌握)</h3><ul>
<li><p>A:案例演示</p>
<ul>
<li><p>位异或运算符的特点</p>
</li>
<li><p>^的特点：一个数据对另一个数据位异或两次，该数本身不变。</p>
</li>
</ul>
</li>
<li><p>B:面试题：</p>
<ul>
<li>请自己实现两个整数变量的交换</li>
<li>注意：以后讲课的过程中，我没有明确指定数据的类型，默认int类型。</li>
</ul>
</li>
</ul>
<h3 id="03-05-Java语言基础-位运算符的基本用法2及面试题-了解"><a href="#03-05-Java语言基础-位运算符的基本用法2及面试题-了解" class="headerlink" title="03.05_Java语言基础(位运算符的基本用法2及面试题)(了解)"></a>03.05_Java语言基础(位运算符的基本用法2及面试题)(了解)</h3><ul>
<li>A:案例演示 &gt;&gt;,&gt;&gt;&gt;,&lt;&lt;的用法:<ul>
<li>&lt;&lt;:左移    左边最高位丢弃，右边补齐0</li>
<li><blockquote>
<blockquote>
<p>:右移    最高位是0，左边补齐0;最高为是1，左边补齐1</p>
</blockquote>
</blockquote>
</li>
<li><blockquote>
<blockquote>
<blockquote>
<p>:无符号右移 无论最高位是0还是1，左边补齐0</p>
</blockquote>
</blockquote>
</blockquote>
</li>
<li>最有效率的算出2 * 8的结果</li>
</ul>
</li>
</ul>
<h3 id="03-06-Java语言基础-三元运算符的基本用法-掌握"><a href="#03-06-Java语言基础-三元运算符的基本用法-掌握" class="headerlink" title="03.06_Java语言基础(三元运算符的基本用法)(掌握)"></a>03.06_Java语言基础(三元运算符的基本用法)(掌握)</h3><ul>
<li>A:三元运算符的格式</li>
<li>(关系表达式) ? 表达式1 : 表达式2;</li>
<li>B:三元运算符的执行流程 </li>
<li>C:案例演示<ul>
<li>获取两个数中的最大值</li>
</ul>
</li>
</ul>
<h3 id="03-07-Java语言基础-三元运算符的练习-掌握"><a href="#03-07-Java语言基础-三元运算符的练习-掌握" class="headerlink" title="03.07_Java语言基础(三元运算符的练习)(掌握)"></a>03.07_Java语言基础(三元运算符的练习)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>比较两个整数是否相同</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>获取三个整数中的最大值</li>
</ul>
</li>
</ul>
<h3 id="03-08-Java语言基础-键盘录入的基本格式讲解-掌握"><a href="#03-08-Java语言基础-键盘录入的基本格式讲解-掌握" class="headerlink" title="03.08_Java语言基础(键盘录入的基本格式讲解)(掌握)"></a>03.08_Java语言基础(键盘录入的基本格式讲解)(掌握)</h3><ul>
<li>A:为什么要使用键盘录入数据<ul>
<li>a:为了让程序的数据更符合开发的数据</li>
<li>b:让程序更灵活一下</li>
</ul>
</li>
<li>B:如何实现键盘录入呢?<ul>
<li>先照格式来。</li>
<li>a:导包<ul>
<li>格式：<ul>
<li>import java.util.Scanner; </li>
</ul>
</li>
<li>位置：<ul>
<li>在class上面。</li>
</ul>
</li>
</ul>
</li>
<li>b:创建键盘录入对象<ul>
<li>格式：<ul>
<li>Scanner sc = new Scanner(System.in);</li>
</ul>
</li>
</ul>
</li>
<li>c:通过对象获取数据    <ul>
<li>格式：<ul>
<li>int x = sc.nextInt();</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>键盘录入1个整数，并输出到控制台。</li>
<li>键盘录入2个整数，并输出到控制台。</li>
</ul>
</li>
</ul>
<h3 id="03-09-Java语言基础-键盘录入的练习1-掌握"><a href="#03-09-Java语言基础-键盘录入的练习1-掌握" class="headerlink" title="03.09_Java语言基础(键盘录入的练习1)(掌握)"></a>03.09_Java语言基础(键盘录入的练习1)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>键盘录入练习：键盘录入两个数据，并对这两个数据求和，输出其结果</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>键盘录入练习：键盘录入两个数据，获取这两个数据中的最大值</li>
</ul>
</li>
</ul>
<h3 id="03-10-Java语言基础-键盘录入的练习2-掌握"><a href="#03-10-Java语言基础-键盘录入的练习2-掌握" class="headerlink" title="03.10_Java语言基础(键盘录入的练习2)(掌握)"></a>03.10_Java语言基础(键盘录入的练习2)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>键盘录入练习：键盘录入两个数据，比较这两个数据是否相等</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>键盘录入练习：键盘录入三个数据，获取这三个数据中的最大值</li>
</ul>
</li>
</ul>
<h3 id="03-11-Java语言基础-顺序结构语句-了解"><a href="#03-11-Java语言基础-顺序结构语句-了解" class="headerlink" title="03.11_Java语言基础(顺序结构语句)(了解)"></a>03.11_Java语言基础(顺序结构语句)(了解)</h3><ul>
<li>A:什么是流程控制语句<ul>
<li>流程控制语句：可以控制程序的执行流程。</li>
</ul>
</li>
<li>B:流程控制语句的分类<ul>
<li>顺序结构</li>
<li>选择结构</li>
<li>循环结构</li>
</ul>
</li>
<li>C:执行流程：<ul>
<li>从上往下，依次执行。</li>
</ul>
</li>
<li>D:案例演示<ul>
<li>输出几句话看效果即可</li>
</ul>
</li>
</ul>
<h3 id="03-12-Java语言基础-选择结构if语句格式1及其使用-掌握"><a href="#03-12-Java语言基础-选择结构if语句格式1及其使用-掌握" class="headerlink" title="03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握)"></a>03.12_Java语言基础(选择结构if语句格式1及其使用)(掌握)</h3><ul>
<li>A:选择结构的分类<ul>
<li>if语句</li>
<li>switch语句</li>
</ul>
</li>
<li>B:if语句有几种格式<ul>
<li>格式1</li>
<li>格式2</li>
<li>格式3</li>
</ul>
</li>
<li>C:if语句的格式1</li>
<li><pre><code>if(比较表达式) {
    语句体;
}
</code></pre></li>
<li>D:执行流程：<ul>
<li>先计算比较表达式的值，看其返回值是true还是false。</li>
<li>如果是true，就执行语句体；</li>
<li>如果是false，就不执行语句体；</li>
</ul>
</li>
</ul>
<h3 id="03-13-Java语言基础-选择结构if语句注意事项-掌握"><a href="#03-13-Java语言基础-选择结构if语句注意事项-掌握" class="headerlink" title="03.13_Java语言基础(选择结构if语句注意事项)(掌握)"></a>03.13_Java语言基础(选择结构if语句注意事项)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>a:比较表达式无论简单还是复杂，结果必须是boolean类型</li>
<li>b:if语句控制的语句体如果是一条语句，大括号可以省略；<ul>
<li>如果是多条语句，就不能省略。建议永远不要省略。</li>
</ul>
</li>
<li>c:一般来说：有左大括号就没有分号，有分号就没有左大括号</li>
</ul>
</li>
</ul>
<h3 id="03-14-Java语言基础-选择结构if语句格式2及其使用-掌握"><a href="#03-14-Java语言基础-选择结构if语句格式2及其使用-掌握" class="headerlink" title="03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握)"></a>03.14_Java语言基础(选择结构if语句格式2及其使用)(掌握)</h3><ul>
<li>A:if语句的格式2</li>
<li><pre><code>if(比较表达式) {
    语句体1;
}else {
    语句体2;
}
</code></pre></li>
<li>B:执行流程：<ul>
<li>首先计算比较表达式的值，看其返回值是true还是false。</li>
<li>如果是true，就执行语句体1；</li>
<li>如果是false，就执行语句体2；</li>
</ul>
</li>
<li><p>C:案例演示</p>
<ul>
<li>a:获取两个数据中较大的值</li>
<li><p>b:判断一个数据是奇数还是偶数,并输出是奇数还是偶数</p>
</li>
<li><p>注意事项：else后面是没有比较表达式的，只有if后面有。</p>
</li>
</ul>
</li>
</ul>
<h3 id="03-15-Java语言基础-if语句的格式2和三元的相互转换问题-掌握"><a href="#03-15-Java语言基础-if语句的格式2和三元的相互转换问题-掌握" class="headerlink" title="03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握)"></a>03.15_Java语言基础(if语句的格式2和三元的相互转换问题)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>if语句和三元运算符完成同一个效果</li>
</ul>
</li>
<li><p>B:案例演示</p>
<ul>
<li><p>if语句和三元运算符的区别</p>
</li>
<li><p>三元运算符实现的，都可以采用if语句实现。反之不成立。</p>
</li>
<li><p>什么时候if语句实现不能用三元改进呢?</p>
<ul>
<li>当if语句控制的操作是一个输出语句的时候就不能。</li>
<li>为什么呢?因为三元运算符是一个运算符，运算符操作完毕就应该有一个结果，而不是一个输出。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="03-16-Java语言基础-选择结构if语句格式3及其使用-掌握"><a href="#03-16-Java语言基础-选择结构if语句格式3及其使用-掌握" class="headerlink" title="03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握)"></a>03.16_Java语言基础(选择结构if语句格式3及其使用)(掌握)</h3><ul>
<li>A:if语句的格式3：</li>
<li><pre><code>if(比较表达式1) {
    语句体1;
}else if(比较表达式2) {
    语句体2;
}else if(比较表达式3) {
    语句体3;
}
...
else {
    语句体n+1;
}
</code></pre></li>
<li><p>B:执行流程：</p>
<ul>
<li>首先计算比较表达式1看其返回值是true还是false，</li>
<li>如果是true，就执行语句体1，if语句结束。</li>
<li><p>如果是false，接着计算比较表达式2看其返回值是true还是false，</p>
</li>
<li><p>如果是true，就执行语句体2，if语句结束。</p>
</li>
<li><p>如果是false，接着计算比较表达式3看其返回值是true还是false，</p>
</li>
<li><p>如果都是false，就执行语句体n+1。</p>
</li>
</ul>
</li>
<li>C:注意事项:最后一个else可以省略,但是建议不要省略,可以对范围外的错误值提示 </li>
</ul>
<h3 id="03-17-Java语言基础-选择结构if语句格式3练习-掌握"><a href="#03-17-Java语言基础-选择结构if语句格式3练习-掌握" class="headerlink" title="03.17_Java语言基础(选择结构if语句格式3练习)(掌握)"></a>03.17_Java语言基础(选择结构if语句格式3练习)(掌握)</h3><ul>
<li>A:练习1</li>
<li><pre><code>需求：键盘录入一个成绩，判断并输出成绩的等级。
90-100 优
80-89  良
70-79  中
60-69  及
0-59   差
</code></pre></li>
<li><p>B:练习2</p>
<ul>
<li><p>需求：</p>
<ul>
<li><p>键盘录入x的值，计算出y的并输出。</p>
</li>
<li><p>x&gt;=3    y = 2 * x + 1;</p>
</li>
<li>-1&lt;x&lt;3    y = 2 * x;</li>
<li>x&lt;=-1    y = 2 * x - 1;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="03-18-Java语言基础-选择结构if语句的嵌套使用-掌握"><a href="#03-18-Java语言基础-选择结构if语句的嵌套使用-掌握" class="headerlink" title="03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握)"></a>03.18_Java语言基础(选择结构if语句的嵌套使用)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>需求：获取三个数据中的最大值</li>
<li>if语句的嵌套使用。</li>
</ul>
</li>
</ul>
<h3 id="03-19-Java语言基础-选择结构switch语句的格式及其解释-掌握"><a href="#03-19-Java语言基础-选择结构switch语句的格式及其解释-掌握" class="headerlink" title="03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握)"></a>03.19_Java语言基础(选择结构switch语句的格式及其解释)(掌握)</h3><ul>
<li>A:switch语句的格式</li>
<li><pre><code>switch(表达式) {
      case 值1：
        语句体1;
        break;
        case 值2：
        语句体2;
        break;
        …
        default：    
        语句体n+1;
        break;
}
</code></pre></li>
<li><p>B:switch语句的格式解释</p>
</li>
<li>C:面试题<ul>
<li>byte可以作为switch的表达式吗?</li>
<li>long可以作为switch的表达式吗?</li>
<li>String可以作为switch的表达式吗?</li>
</ul>
</li>
<li>C:执行流程<ul>
<li>先计算表达式的值</li>
<li>然后和case后面的匹配，如果有就执行对应的语句，否则执行default控制的语句</li>
</ul>
</li>
</ul>
<h3 id="03-20-Java语言基础-选择结构switch语句的练习-掌握"><a href="#03-20-Java语言基础-选择结构switch语句的练习-掌握" class="headerlink" title="03.20_Java语言基础(选择结构switch语句的练习)(掌握)"></a>03.20_Java语言基础(选择结构switch语句的练习)(掌握)</h3><ul>
<li>A:整数(给定一个值,输出对应星期几)</li>
</ul>
<h3 id="03-21-Java语言基础-选择结构switch语句的注意事项-掌握"><a href="#03-21-Java语言基础-选择结构switch语句的注意事项-掌握" class="headerlink" title="03.21_Java语言基础(选择结构switch语句的注意事项)(掌握)"></a>03.21_Java语言基础(选择结构switch语句的注意事项)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>a:case后面只能是常量，不能是变量，而且，多个case后面的值不能出现相同的</li>
<li>b:default可以省略吗?<ul>
<li>可以省略，但是不建议，因为它的作用是对不正确的情况给出提示。</li>
<li>特殊情况：<ul>
<li>case就可以把值固定。</li>
<li>A,B,C,D</li>
</ul>
</li>
</ul>
</li>
<li>c:break可以省略吗?<ul>
<li>最后一个可以省略,其他最好不要省略</li>
<li>会出现一个现象：case穿透。</li>
<li>最终我们建议不要省略</li>
</ul>
</li>
<li>d:default一定要在最后吗?<ul>
<li>不是，可以在任意位置。但是建议在最后。</li>
</ul>
</li>
<li>e:switch语句的结束条件<ul>
<li>a:遇到break就结束了</li>
<li>b:执行到switch的右大括号就结束了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="03-22-Java语言基础-选择结构switch语句练习-掌握"><a href="#03-22-Java语言基础-选择结构switch语句练习-掌握" class="headerlink" title="03.22_Java语言基础(选择结构switch语句练习)(掌握)"></a>03.22_Java语言基础(选择结构switch语句练习)(掌握)</h3><ul>
<li>A:看程序写结果：</li>
<li><pre><code>int x = 2;
int y = 3;
switch(x){
    default:
        y++;
        break;
    case 3:
        y++;
    case 4:
        y++;
}
System.out.println(&quot;y=&quot;+y);
</code></pre></li>
<li><p>B:看程序写结果：</p>
</li>
<li><pre><code>int x = 2;
int y = 3;
switch(x){
    default:
        y++;
    case 3:
        y++;
    case 4:
        y++;
}
System.out.println(&quot;y=&quot;+y);
</code></pre></li>
</ul>
<h3 id="03-23-Java语言基础-选择结构if语句和switch语句的区别-掌握"><a href="#03-23-Java语言基础-选择结构if语句和switch语句的区别-掌握" class="headerlink" title="03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握)"></a>03.23_Java语言基础(选择结构if语句和switch语句的区别)(掌握)</h3><ul>
<li>A:总结switch语句和if语句的各自使用场景</li>
<li>switch建议判断固定值的时候用</li>
<li>if建议判断区间或范围的时候用</li>
<li>B:案例演示<ul>
<li>分别用switch语句和if语句实现下列需求：<ul>
<li>键盘录入月份，输出对应的季节</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="03-24-day03总结"><a href="#03-24-day03总结" class="headerlink" title="03.24_day03总结"></a>03.24_day03总结</h3><p>把今天的知识点总结一遍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;03-01-Java语言基础-逻辑运算符的基本用法-掌握&quot;&gt;&lt;a href=&quot;#03-01-Java语言基础-逻辑运算符的基本用法-掌握&quot; class=&quot;headerlink&quot; title=&quot;03.01_Java语言基础(逻辑运算符的基本用法)(掌握)&quot;&gt;&lt;/a&gt;03.01_Java语言基础(逻辑运算符的基本用法)(掌握)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:逻辑运算符有哪些&lt;ul&gt;
&lt;li&gt;&amp;amp;,|,^,!&lt;/li&gt;
&lt;li&gt;&amp;amp;&amp;amp;,|| &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:案例演示&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逻辑运算符的基本用法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a:逻辑运算符一般用于连接boolean类型的表达式或者值。&lt;/li&gt;
&lt;li&gt;b:表达式：就是用运算符把常量或者变量连接起来的符合java语法的式子。&lt;ul&gt;
&lt;li&gt;算术表达式：a + b&lt;/li&gt;
&lt;li&gt;比较表达式：a == b(条件表达式)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;C:结论：&lt;/li&gt;
&lt;li&gt;&amp;amp;逻辑与:有false则false。&lt;/li&gt;
&lt;li&gt;|逻辑或:有true则true。&lt;/li&gt;
&lt;li&gt;^逻辑异或:相同为false，不同为true。&lt;/li&gt;
&lt;li&gt;!逻辑非:非false则true，非true则false。&lt;ul&gt;
&lt;li&gt;特点：偶数个不改变本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java语言基础" scheme="http://harmansecurity.cn/tags/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="流程控制语句" scheme="http://harmansecurity.cn/tags/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="逻辑运算符" scheme="http://harmansecurity.cn/tags/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习笔记(二)</title>
    <link href="http://harmansecurity.cn/2017/03/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
    <id>http://harmansecurity.cn/2017/03/19/Java基础学习笔记(二)/</id>
    <published>2017-03-19T14:35:21.000Z</published>
    <updated>2017-03-19T15:08:49.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="02-01-Java语言基础-常量的概述和使用-掌握"><a href="#02-01-Java语言基础-常量的概述和使用-掌握" class="headerlink" title="02.01_Java语言基础(常量的概述和使用)(掌握)"></a>02.01_Java语言基础(常量的概述和使用)(掌握)</h3><ul>
<li>A:什么是常量<ul>
<li>在程序执行的过程中其值不可以发生改变 </li>
</ul>
</li>
<li>B:Java中常量的分类<ul>
<li>字面值常量</li>
<li>自定义常量(面向对象部分讲) </li>
</ul>
</li>
<li><p>C:字面值常量的分类</p>
<ul>
<li>字符串常量    用双引号括起来的内容</li>
<li>整数常量        所有整数</li>
<li>小数常量        所有小数</li>
<li>字符常量        用单引号括起来的内容,里面只能放单个数字,单个字母或单个符号</li>
<li>布尔常量        较为特殊，只有true和false</li>
<li>空常量            null(数组部分讲解)</li>
</ul>
</li>
<li><p>D:案例演示</p>
<ul>
<li>用输出语句输出各种常量。null不演示</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="02-02-Java语言基础-进制概述和二-八-十六进制图解-了解"><a href="#02-02-Java语言基础-进制概述和二-八-十六进制图解-了解" class="headerlink" title="02.02_Java语言基础(进制概述和二,八,十六进制图解)(了解)"></a>02.02_Java语言基础(进制概述和二,八,十六进制图解)(了解)</h3><ul>
<li>A:什么是进制<ul>
<li>进制：就是进位制，是人们规定的一种进位方法。 对于任何一种进制–X进制，就表示某一位置上的数运算时是逢X进一位。二进制就是逢二进一，八进制是逢八进一，十进制是逢十进一，十六进制是逢十六进一。</li>
<li>例如一周有七天,七进制,一年有十二个月,十二进制</li>
</ul>
</li>
<li>B:十进制的由来 <ul>
<li>十进制的由来是因为人类有十个手指 </li>
</ul>
</li>
<li>C:二进制的由来<ul>
<li>其实二进制来源与中国,请看史料记载</li>
<li>18世纪德国数理哲学大师莱布尼兹从他的传教士朋友鲍威特寄给他的拉丁文译本《易经》中，读到了八卦的组成结构，惊奇地发现其基本素数（0）（1），即《易经》的阴爻yao- -和__阳爻，其进位制就是二进制，并认为这是世界上数学进制中最先进的。20世纪被称作第三次科技革命的重要标志之一的计算机的发明与应用，其运算模式正是二进制。它不但证明了莱布尼兹的原理是正确的，同时也证明了《易经》数理学是很了不起的。</li>
</ul>
</li>
<li>D:八进制的由来<ul>
<li>任何数据在计算机中都是以二进制的形式存在的。二进制早期由电信号开关演变而来。一个整数在内存中一样也是二进制的，但是使用一大串的1或者0组成的数值进行使用很麻烦。 </li>
<li>所以就想把一大串缩短点，将二进制中的三位用一位表示。这三位可以取到的最大值就是7.超过7就进位了，这就是八进制。 </li>
</ul>
</li>
<li>E:十六进制的由来<ul>
<li>但是对于过长的二进制变成八进制还是较长，所以出现的用4个二进制位表示一位的情况，四个二进制位最大是15，这就是十六进制。</li>
</ul>
</li>
<li>F:不同进制表现同一个数据的形式特点<ul>
<li>进制越大，表现形式越短</li>
</ul>
</li>
</ul>
<h3 id="02-03-Java语言基础-不同进制数据的表现形式-掌握"><a href="#02-03-Java语言基础-不同进制数据的表现形式-掌握" class="headerlink" title="02.03_Java语言基础(不同进制数据的表现形式)(掌握)"></a>02.03_Java语言基础(不同进制数据的表现形式)(掌握)</h3><ul>
<li>A:二进制的数据表现形式<ul>
<li>由0,1组成。以0b(b可以大写也可以小写)开头(JDK1.7版本可以表示二进制了)</li>
</ul>
</li>
<li>B:八进制的数据表现形式<ul>
<li>由0,1,…7组成。以0开头</li>
</ul>
</li>
<li>C:十进制的数据表现形式<ul>
<li>由0,1,…9组成。整数默认是十进制的 </li>
</ul>
</li>
<li>D:十六进制的数据表现形式<ul>
<li>由0,1,…9,a,b,c,d,e,f(大小写均可)。以0x开头 </li>
</ul>
</li>
<li>E:案例演示<ul>
<li>输出不同进制表现100的数据。</li>
<li>0b100</li>
<li>0100</li>
<li>100</li>
<li>0x100</li>
</ul>
</li>
</ul>
<h3 id="02-04-Java语言基础-任意进制到十进制的转换图解-了解"><a href="#02-04-Java语言基础-任意进制到十进制的转换图解-了解" class="headerlink" title="02.04_Java语言基础(任意进制到十进制的转换图解)(了解)"></a>02.04_Java语言基础(任意进制到十进制的转换图解)(了解)</h3><ul>
<li>A:任意进制到十进制的转换原理<ul>
<li>系数：就是每一位上的数据。</li>
<li>基数：X进制，基数就是X。</li>
<li>权：在右边，从0开始编号，对应位上的编号即为该位的权。</li>
<li>结果：把系数*基数的权次幂相加即可。 </li>
</ul>
</li>
<li>B:画图练习<ul>
<li>二进制–十进制</li>
<li>八进制–十进制</li>
<li>十六进制–十进制</li>
</ul>
</li>
</ul>
<h3 id="02-05-Java语言基础-十进制到任意进制的转换图解-了解"><a href="#02-05-Java语言基础-十进制到任意进制的转换图解-了解" class="headerlink" title="02.05_Java语言基础(十进制到任意进制的转换图解)(了解)"></a>02.05_Java语言基础(十进制到任意进制的转换图解)(了解)</h3><ul>
<li>A:十进制到任意进制的转换原理<ul>
<li>除积倒取余 </li>
</ul>
</li>
<li>B:画图练习<ul>
<li>十进制–二进制</li>
<li>十进制–八进制</li>
<li>十进制–十六进制</li>
</ul>
</li>
</ul>
<h3 id="02-06-Java语言基础-快速的进制转换法-了解"><a href="#02-06-Java语言基础-快速的进制转换法-了解" class="headerlink" title="02.06_Java语言基础(快速的进制转换法)(了解)"></a>02.06_Java语言基础(快速的进制转换法)(了解)</h3><ul>
<li>A:8421码及特点<ul>
<li>8421码是中国大陆的叫法，8421码是BCD代码中最常用的一种。在这种编码方式中每一位二值代码的1都是代表一个固定数值，把每一位的1代表的十进制数加起来，得到的结果就是它所代表的十进制数码。 </li>
</ul>
</li>
<li>B:通过8421码的方式进行二进制和十进制的相互转换</li>
<li>C:二进制到八进制的简易方式</li>
<li>D:二进制到十六进制的简易方式</li>
</ul>
<h3 id="02-07-Java语言基础-原码反码补码-了解"><a href="#02-07-Java语言基础-原码反码补码-了解" class="headerlink" title="02.07_Java语言基础(原码反码补码)(了解)"></a>02.07_Java语言基础(原码反码补码)(了解)</h3><ul>
<li>A:为什么要学习原码反码补码?<ul>
<li>后面要学习强制类型转换,如果不知道有原反补会看不懂结果 </li>
</ul>
</li>
<li>B:有符号数据表示法的几种方式<ul>
<li>原码<ul>
<li>就是二进制定点表示法，即最高位为符号位，“0”表示正，“1”表示负，其余位表示数值的大小。</li>
<li>通过一个字节,也就是8个二进制位表示+7和-7</li>
<li>0(符号位)    0000111</li>
<li>1(符号位)    0000111</li>
</ul>
</li>
<li>反码<ul>
<li>正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。</li>
</ul>
</li>
<li>补码<ul>
<li>正数的补码与其原码相同；负数的补码是在其反码的末位加1。 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-08-Java语言基础-原码反码补码的练习-了解"><a href="#02-08-Java语言基础-原码反码补码的练习-了解" class="headerlink" title="02.08_Java语言基础(原码反码补码的练习)(了解)"></a>02.08_Java语言基础(原码反码补码的练习)(了解)</h3><ul>
<li>A:已知原码求补码<ul>
<li>0b10110100 </li>
</ul>
</li>
<li>B:已知补码求原码<ul>
<li>0b11101110 </li>
</ul>
</li>
</ul>
<h3 id="02-09-Java语言基础-变量的概述及格式-掌握"><a href="#02-09-Java语言基础-变量的概述及格式-掌握" class="headerlink" title="02.09_Java语言基础(变量的概述及格式)(掌握)"></a>02.09_Java语言基础(变量的概述及格式)(掌握)</h3><ul>
<li>A:什么是变量<ul>
<li>在程序执行的过程中，在某个范围内其值可以发生改变的量</li>
</ul>
</li>
<li>B:变量的定义格式<ul>
<li>数据类型 变量名 = 变量值;</li>
</ul>
</li>
<li>C:为什么要定义变量<ul>
<li>用来不断的存放同一类型的常量，并可以重复使用 </li>
</ul>
</li>
</ul>
<h3 id="02-10-Java语言基础-数据类型的概述和分类-掌握"><a href="#02-10-Java语言基础-数据类型的概述和分类-掌握" class="headerlink" title="02.10_Java语言基础(数据类型的概述和分类)(掌握)"></a>02.10_Java语言基础(数据类型的概述和分类)(掌握)</h3><ul>
<li>A:为什么有数据类型<ul>
<li>Java语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存中分配了不同大小的内存空间</li>
</ul>
</li>
<li>B:Java中数据类型的分类<ul>
<li>基本数据类型</li>
<li>引用数据类型 <ul>
<li>面向对象部分讲解 </li>
</ul>
</li>
</ul>
</li>
<li>C:基本数据类型分类(4类8种) <ul>
<li>整数型<ul>
<li>byte 占一个字节  -128到127</li>
<li>short 占两个字  -2^15~2^15-1</li>
<li>int 占四个字节 -2^31~2^31-1</li>
<li>long 占八个字节 -2^63~2^63-1</li>
</ul>
</li>
<li>浮点型<ul>
<li>float 占四个字节 -3.403E38~3.403E38  单精度</li>
<li>double 占八个字节-1.798E308~1.798E308 双精度</li>
</ul>
</li>
<li>字符型<ul>
<li>char 占两个字节 0~65535</li>
</ul>
</li>
<li>布尔型<ul>
<li>boolean   <ul>
<li>boolean理论上是占八分之一个字节,因为一个开关就可以决定是true和false了,但是java中boolean类型没有明确指定他的大小      </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-11-Java语言基础-定义不同数据类型的变量-掌握"><a href="#02-11-Java语言基础-定义不同数据类型的变量-掌握" class="headerlink" title="02.11_Java语言基础(定义不同数据类型的变量)(掌握)"></a>02.11_Java语言基础(定义不同数据类型的变量)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>定义不同基本数据类型的变量，并输出</li>
<li>赋值时候注意float类型,long类型</li>
</ul>
</li>
</ul>
<h3 id="02-12-Java语言基础-使用变量的注意事项-掌握"><a href="#02-12-Java语言基础-使用变量的注意事项-掌握" class="headerlink" title="02.12_Java语言基础(使用变量的注意事项)(掌握)"></a>02.12_Java语言基础(使用变量的注意事项)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>a:作用域问题<ul>
<li>同一个区域不能使用相同的变量名 </li>
</ul>
</li>
<li>b:初始化值问题<ul>
<li>局部变量在使用之前必须赋值 </li>
</ul>
</li>
<li>c:一条语句可以定义几个变量<ul>
<li>int a,b,c…; </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-13-Java语言基础-数据类型转换之隐式转换-掌握"><a href="#02-13-Java语言基础-数据类型转换之隐式转换-掌握" class="headerlink" title="02.13_Java语言基础(数据类型转换之隐式转换)(掌握)"></a>02.13_Java语言基础(数据类型转换之隐式转换)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>a:int + int</li>
<li>b:byte + int </li>
</ul>
</li>
<li>B:Java中的默认转换规则<ul>
<li>取值范围小的数据类型与取值范围大的数据类型进行运算,会先将小的数据类型提升为大的,再运算 </li>
</ul>
</li>
<li>C:画图解释byte+int类型的问题</li>
</ul>
<h3 id="02-14-Java语言基础-数据类型转换之强制转换-掌握"><a href="#02-14-Java语言基础-数据类型转换之强制转换-掌握" class="headerlink" title="02.14_Java语言基础(数据类型转换之强制转换)(掌握)"></a>02.14_Java语言基础(数据类型转换之强制转换)(掌握)</h3><ul>
<li>A:强制转换问题<ul>
<li>int a = 10;</li>
<li>byte b = 20; </li>
<li>b = a + b;</li>
</ul>
</li>
<li>B:强制转换的格式<ul>
<li>b = (byte)(a + b); </li>
</ul>
</li>
<li>C:强制转换的注意事项<ul>
<li>如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同 </li>
</ul>
</li>
</ul>
<h3 id="02-15-Java语言基础-面试题之变量相加和常量相加的区别-掌握"><a href="#02-15-Java语言基础-面试题之变量相加和常量相加的区别-掌握" class="headerlink" title="02.15_Java语言基础(面试题之变量相加和常量相加的区别)(掌握)"></a>02.15_Java语言基础(面试题之变量相加和常量相加的区别)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。</li>
<li>byte b1 = 3;</li>
<li>byte b2 = 4;</li>
<li>byte b3 = b1 + b2;<ul>
<li>从两方面去回答这个题</li>
<li>b1和b2是两个变量,变量里面存储的值都是变化的,所以在程序运行中JVM是无法判断里面具体的值</li>
<li>byte类型的变量在进行运算的时候,会自动类型提升为int类型 </li>
</ul>
</li>
<li>byte b4 = 3 + 4;<ul>
<li>3和4都是常量,java有常量优化机制,就是在编译的的时候直接把3和4的结果赋值给b4了 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-16-Java语言基础-long与float的取值范围谁大谁小-了解"><a href="#02-16-Java语言基础-long与float的取值范围谁大谁小-了解" class="headerlink" title="02.16_Java语言基础(long与float的取值范围谁大谁小)(了解)"></a>02.16_Java语言基础(long与float的取值范围谁大谁小)(了解)</h3><ul>
<li><p>进行混合运算的时候,byte,short,char不会相互转换,都会自动类型提升为int类型,其他类型进行混合运算的是小的数据类型提升为大的</p>
<ul>
<li><p>byte,short,char – int – long – float – double</p>
</li>
<li><p>long: 8个字节</p>
</li>
<li>float：4个字节</li>
<li>IEEE754</li>
<li>4个字节是32个二进制位</li>
<li>1位是符号位</li>
<li>8位是指数位</li>
<li>00000000   11111111</li>
<li>0到255</li>
<li>1到254</li>
<li>-126到127</li>
<li>23位是尾数位</li>
<li><p>每个指数位减去127</p>
</li>
<li><p>A:它们底层的存储结构不同。</p>
</li>
<li>B:float表示的数据范围比long的范围要大<ul>
<li>long：2^63-1</li>
<li><code>float：3.4*10^38 &gt; 2*10^38 &gt; 2*8^38 = 2*2^3^38 = 2*2^114 &gt; 2^63-1</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-17-Java语言基础-字符和字符串参与运算-掌握"><a href="#02-17-Java语言基础-字符和字符串参与运算-掌握" class="headerlink" title="02.17_Java语言基础(字符和字符串参与运算)(掌握)"></a>02.17_Java语言基础(字符和字符串参与运算)(掌握)</h3><ul>
<li><p>A:案例演示</p>
<ul>
<li>System.out.println(‘a’);</li>
<li><p>System.out.println(‘a’+1);</p>
</li>
<li><p>通过看结果知道’a’的值是多少,由此引出ASCII码表</p>
</li>
</ul>
</li>
<li>B:ASCII码表的概述<ul>
<li>记住三个值：<ul>
<li>‘0’  48</li>
<li>‘A’  65</li>
<li>‘a’  97</li>
</ul>
</li>
</ul>
</li>
<li>C:案例演示<ul>
<li>System.out.println(“hello”+’a’+1);</li>
<li>System.out.println(‘a’+1+”hello”);</li>
</ul>
</li>
<li>D:+在有字符串参与中被称为字符串连接符<ul>
<li>System.out.println(“5+5=”+5+5);</li>
<li>System.out.println(5+5+”=5+5”);</li>
</ul>
</li>
</ul>
<h3 id="02-18-Java语言基础-char数据类型-掌握"><a href="#02-18-Java语言基础-char数据类型-掌握" class="headerlink" title="02.18_Java语言基础(char数据类型)(掌握)"></a>02.18_Java语言基础(char数据类型)(掌握)</h3><ul>
<li>A:char c = 97;    0到65535</li>
<li>B:Java语言中的字符char可以存储一个中文汉字吗?为什么呢?<ul>
<li>可以。因为Java语言采用的是Unicode编码。Unicode编码中的每个字符占用两个字节。中文也是占的两个字节</li>
<li>所以，Java中的字符可以存储一个中文汉字</li>
</ul>
</li>
</ul>
<h3 id="02-19-Java语言基础-算术运算符的基本用法-掌握"><a href="#02-19-Java语言基础-算术运算符的基本用法-掌握" class="headerlink" title="02.19_Java语言基础(算术运算符的基本用法)(掌握)"></a>02.19_Java语言基础(算术运算符的基本用法)(掌握)</h3><ul>
<li>A:什么是运算符<ul>
<li>就是对常量和变量进行操作的符号。</li>
</ul>
</li>
<li>B:运算符的分类<ul>
<li>算术运算符，赋值运算符，比较(关系或条件)运算符，逻辑运算符，位运算符，三目(元)运算符 </li>
</ul>
</li>
<li>C:算数运算符有哪些<ul>
<li>+,-,*,/,%,++,– </li>
</ul>
</li>
<li>D:注意事项：<ul>
<li>a:+号在java中有三种作用,代表正号,做加法运算,字符串的连接符</li>
<li>b:整数相除只能得到整数。如果想得到小数，必须把数据变化为浮点数类型</li>
<li>c:/获取的是除法操作的商，%获取的是除法操作的余数</li>
<li>%运算符<ul>
<li>当左边的绝对值小于右边绝对值时,结果是左边</li>
<li>当左边的绝对值等于右边或是右边的倍数时,结果是0</li>
<li>当左边的绝对值大于右边绝对值时,结果是余数</li>
<li>%运算符结果的符号只和左边有关系,与右边无关</li>
<li>任何一个正整数%2结果不是0就是1可以用来当作切换条件 </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-20-Java语言基础-算术运算符-和–的用法-掌握"><a href="#02-20-Java语言基础-算术运算符-和–的用法-掌握" class="headerlink" title="02.20_Java语言基础(算术运算符++和–的用法)(掌握)"></a>02.20_Java语言基础(算术运算符++和–的用法)(掌握)</h3><ul>
<li>A:++,–运算符的作用<ul>
<li>自加（++）自减（–）运算</li>
<li>++:自加。对原有的数据进行+1</li>
<li>–:自减。对原有的数据进行-1</li>
</ul>
</li>
<li>B:案例演示<ul>
<li>a:单独使用：<ul>
<li>放在操作数的前面和后面效果一样。(这种用法是我们比较常见的)</li>
</ul>
</li>
<li>b:参与运算使用：<ul>
<li>放在操作数的前面，先自增或者自减，然后再参与运算。</li>
<li>放在操作数的后面，先参与运算，再自增或者自减。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-21-Java语言基础-算术运算符-和–的练习-掌握"><a href="#02-21-Java语言基础-算术运算符-和–的练习-掌握" class="headerlink" title="02.21_Java语言基础(算术运算符++和–的练习)(掌握)"></a>02.21_Java语言基础(算术运算符++和–的练习)(掌握)</h3><ul>
<li><p>A:案例演示</p>
<ul>
<li>请分别计算出a,b,c的值?<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line">	<span class="keyword">int</span> c = <span class="number">10</span>;</div><div class="line"></div><div class="line">	a = b++;		</div><div class="line">	c = --a;			</div><div class="line">	b = ++a;		</div><div class="line">	a = c--;	</div><div class="line">```		</div><div class="line">* B:案例演示</div><div class="line">	* 请分别计算出x,y的值?</div><div class="line">```java</div><div class="line">			<span class="keyword">int</span> x = <span class="number">4</span>;</div><div class="line">			<span class="keyword">int</span> y = (x++)+(++x)+(x*<span class="number">10</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>C:面试题</p>
<ul>
<li>byte b = 10;</li>
<li>b++;</li>
<li>b = b + 1;</li>
<li>问哪句会报错,为什么 </li>
</ul>
</li>
</ul>
<h3 id="02-22-Java语言基础-赋值运算符的基本用法-掌握"><a href="#02-22-Java语言基础-赋值运算符的基本用法-掌握" class="headerlink" title="02.22_Java语言基础(赋值运算符的基本用法)(掌握)"></a>02.22_Java语言基础(赋值运算符的基本用法)(掌握)</h3><ul>
<li><p>A:赋值运算符有哪些</p>
<ul>
<li><p>a:基本的赋值运算符：=</p>
<ul>
<li>把=右边的数据赋值给左边。</li>
</ul>
</li>
<li><p>b:扩展的赋值运算符：+=,-=,*=,/=,%=</p>
<ul>
<li>+= 把左边和右边做加法，然后赋值给左边。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="02-23-Java语言基础-赋值运算符的面试题-掌握"><a href="#02-23-Java语言基础-赋值运算符的面试题-掌握" class="headerlink" title="02.23_Java语言基础(赋值运算符的面试题)(掌握)"></a>02.23_Java语言基础(赋值运算符的面试题)(掌握)</h3><ul>
<li>A:案例演示<ul>
<li>面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。</li>
<li>short s=1;s = s+1;</li>
<li>short s=1;s+=1;</li>
</ul>
</li>
</ul>
<h3 id="02-24-Java语言基础-关系运算符的基本用法及其注意事项-掌握"><a href="#02-24-Java语言基础-关系运算符的基本用法及其注意事项-掌握" class="headerlink" title="02.24_Java语言基础(关系运算符的基本用法及其注意事项)(掌握)"></a>02.24_Java语言基础(关系运算符的基本用法及其注意事项)(掌握)</h3><ul>
<li>A:关系运算符有哪些(比较运算符,条件运算符)<ul>
<li>==,!=,&gt;,&gt;=,&lt;,&lt;= </li>
</ul>
</li>
<li><p>注意事项：</p>
<ul>
<li><p>无论你的操作是简单还是复杂，结果是boolean类型。</p>
</li>
<li><p>“==”不能写成”=”。</p>
</li>
</ul>
</li>
</ul>
<h3 id="02-25-day02总结"><a href="#02-25-day02总结" class="headerlink" title="02.25_day02总结"></a>02.25_day02总结</h3><ul>
<li>把今天的知识点总结一遍。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;02-01-Java语言基础-常量的概述和使用-掌握&quot;&gt;&lt;a href=&quot;#02-01-Java语言基础-常量的概述和使用-掌握&quot; class=&quot;headerlink&quot; title=&quot;02.01_Java语言基础(常量的概述和使用)(掌握)&quot;&gt;&lt;/a&gt;02.01_Java语言基础(常量的概述和使用)(掌握)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:什么是常量&lt;ul&gt;
&lt;li&gt;在程序执行的过程中其值不可以发生改变 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B:Java中常量的分类&lt;ul&gt;
&lt;li&gt;字面值常量&lt;/li&gt;
&lt;li&gt;自定义常量(面向对象部分讲) &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C:字面值常量的分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串常量    用双引号括起来的内容&lt;/li&gt;
&lt;li&gt;整数常量        所有整数&lt;/li&gt;
&lt;li&gt;小数常量        所有小数&lt;/li&gt;
&lt;li&gt;字符常量        用单引号括起来的内容,里面只能放单个数字,单个字母或单个符号&lt;/li&gt;
&lt;li&gt;布尔常量        较为特殊，只有true和false&lt;/li&gt;
&lt;li&gt;空常量            null(数组部分讲解)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;D:案例演示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用输出语句输出各种常量。null不演示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java语言基础" scheme="http://harmansecurity.cn/tags/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数据类型" scheme="http://harmansecurity.cn/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="运算符" scheme="http://harmansecurity.cn/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java基础学习笔记(一)</title>
    <link href="http://harmansecurity.cn/2017/03/19/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
    <id>http://harmansecurity.cn/2017/03/19/Java基础学习笔记(一)/</id>
    <published>2017-03-19T14:34:21.000Z</published>
    <updated>2017-03-19T14:59:19.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="01-01-计算机基础知识-计算机概述-了解"><a href="#01-01-计算机基础知识-计算机概述-了解" class="headerlink" title="01.01_计算机基础知识(计算机概述)(了解)"></a>01.01_计算机基础知识(计算机概述)(了解)</h3><ul>
<li>A:什么是计算机?计算机在生活中的应用举例<ul>
<li>计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。</li>
<li>应用举例<ul>
<li>1：科学计算</li>
<li>2、数据处理</li>
<li>3、自动控制</li>
<li>4、计算机辅助设计</li>
<li>5、人工智能</li>
<li>6、多媒体应用</li>
<li>7、计算机网络</li>
<li>… </li>
</ul>
</li>
</ul>
</li>
<li><p>B:什么是硬件?硬件举例</p>
<ul>
<li>计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。</li>
<li>冯.诺依曼体系结构</li>
<li><p>计算机的硬件分成5大组成部件：运算器、控制器、存储器、输入设备和输出设备。</p>
<ul>
<li>运算器和控制器是计算机的核心，合称中央处理单元（Central Processing Unit，CPU）或处理器。CPU的内部还有一些高速存储单元，被称为寄存器。其中运算器执行所有的算术和逻辑运算；控制器负责把指令逐条从存储器中取出，经译码后向计算机发出各种控制命令；而寄存器为处理单元提供操作所需要的数据。</li>
<li>存储器是计算机的记忆部分，用来存放程序以及程序中涉及的数据。它分为内部存储器和外部存储器。内部存储器用于存放正在执行的程序和使用的数据，其成本高、容量小，但速度快。外部存储器可用于长期保存大量程序和数据，其成本低、容量大，但速度较慢。</li>
<li>输入设备和输出设备统称为外部设备，简称外设或I/O设备，用来实现人机交互和机间通信。微型机中常用的输入设备有键盘、鼠标等，输出设备有显示器、打印机等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li>C:什么是软件?软件分类及举例<ul>
<li>计算机软件(Computer Software)是使用计算机过程中必不可少的东西，计算机软件可以使计算机按照事先预定好的顺序完成特定的功能</li>
<li>计算机软件按照其功能划分为系统软件与应用软件<ul>
<li>系统软件： DOS(Disk Operating System), Windows, Linux, Unix, Mac, Android, iOS</li>
<li>应用软件：office  QQ聊天  YY语言  扫雷</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="01-02-计算机基础知识-软件开发和计算机语言概述-了解"><a href="#01-02-计算机基础知识-软件开发和计算机语言概述-了解" class="headerlink" title="01.02_计算机基础知识(软件开发和计算机语言概述)(了解)"></a>01.02_计算机基础知识(软件开发和计算机语言概述)(了解)</h3><ul>
<li>A:什么是软件<ul>
<li>按照特定顺序组织的计算机数据和指令的集合</li>
</ul>
</li>
<li>B:什么是开发<ul>
<li>软件的制作过程</li>
</ul>
</li>
<li>C:什么是软件开发<ul>
<li>借助开发工具与计算机语言制作软件 </li>
</ul>
</li>
<li>D:什么是计算机语言<ul>
<li>人与计算机之间进行信息交流沟通的一种特殊语言</li>
</ul>
</li>
<li>E:计算机语言的分类<ul>
<li>机器语言：<ul>
<li>机器语言是直接用二进制代码指令表达的计算机语言，指令是用0和1组成的一串代码，它们有一定的位数，并分成若干段，各段的编码表示不同的含义。</li>
</ul>
</li>
<li>汇编语言：<ul>
<li>汇编语言是使用一些特殊的符号来代替机器语言的二进制码，计算机不能直接识别，需要用一种软件将汇编语言翻译成机器语言。</li>
</ul>
</li>
<li>高级语言：  <ul>
<li>使用普通英语进行编写源代码，通过编译器将源代码翻译成计算机直接识别的机器语言，之后再由计算机执行。</li>
<li>高级语言包括C,C++,C#,JAVA</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="01-03-计算机基础知识-人机交互-了解"><a href="#01-03-计算机基础知识-人机交互-了解" class="headerlink" title="01.03_计算机基础知识(人机交互)(了解)"></a>01.03_计算机基础知识(人机交互)(了解)</h3><ul>
<li>A:人机交互的两种方式<ul>
<li>a:命令行方式 <ul>
<li>需要有一个控制台，输入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些命令。 </li>
</ul>
</li>
<li>b:图形化界面方式<ul>
<li>这种方式简单直观，使用者易于接受，容易上手操作。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="01-04-计算机基础知识-键盘功能键和快捷键-掌握"><a href="#01-04-计算机基础知识-键盘功能键和快捷键-掌握" class="headerlink" title="01.04_计算机基础知识(键盘功能键和快捷键)(掌握)"></a>01.04_计算机基础知识(键盘功能键和快捷键)(掌握)</h3><ul>
<li>A:键盘功能键<ul>
<li>a:Tab</li>
<li>b:Shift</li>
<li>c:Ctrl</li>
<li>d:Alt</li>
<li>e:空格    </li>
<li>f:Enter</li>
<li>g:Window</li>
<li>h:上下左右键</li>
<li>i:PrtSc(PrintScreen)屏幕截图</li>
</ul>
</li>
<li>B:键盘快捷键<ul>
<li>a:Ctrl+A    全选</li>
<li>b:Ctrl+C    复制</li>
<li>c:Ctrl+V    粘贴</li>
<li>d:Ctrl+X    剪切</li>
<li>e:Ctrl+Z    撤销</li>
<li>f:Ctrl+S    保存</li>
</ul>
</li>
</ul>
<h3 id="01-05-计算机基础知识-如何打开DOS控制台-掌握"><a href="#01-05-计算机基础知识-如何打开DOS控制台-掌握" class="headerlink" title="01.05_计算机基础知识(如何打开DOS控制台)(掌握)"></a>01.05_计算机基础知识(如何打开DOS控制台)(掌握)</h3><ul>
<li>A:xp下如何打开DOS控制台？<ul>
<li>a:开始–程序–附件–命令提示符</li>
<li>b:开始–运行–cmd–回车</li>
<li>c:win+r–cmd–回车</li>
</ul>
</li>
<li>B:win7下如何打开DOS控制台？<ul>
<li>a:开始–所有程序–附件–命令提示符</li>
<li>b:开始–搜索程序和文件–cmd–回车</li>
<li>c:win+r–cmd–回车</li>
</ul>
</li>
<li>C:win8下如何打开DOS控制台<ul>
<li>a:鼠标左击开始–下箭头–命令提示符</li>
<li>b:鼠标右击开始–搜索–cmd–回车</li>
<li>c:鼠标右击开始–运行–cmd–回车</li>
<li>d:win+r–cmd–回车</li>
</ul>
</li>
</ul>
<h3 id="01-06-计算机基础知识-常见的DOS命令讲解"><a href="#01-06-计算机基础知识-常见的DOS命令讲解" class="headerlink" title="01.06_计算机基础知识(常见的DOS命令讲解)"></a>01.06_计算机基础知识(常见的DOS命令讲解)</h3><ul>
<li>A:d: 回车    盘符切换</li>
<li>B:dir(directory):列出当前目录下的文件以及文件夹</li>
<li>C:cd (change directory)改变指定目录(进入指定目录)</li>
<li>D:cd.. : 退回到上一级目录</li>
<li>E:cd\: 退回到根目录</li>
<li>F:cls : (clear screen)清屏</li>
<li>G:exit : 退出dos命令行(分割线上的需要掌握,下的了解)</li>
<li>/=========================================================</li>
<li>md (make directory) : 创建目录</li>
<li>rd (remove directory): 删除目录</li>
<li>del (delete): 删除文件,删除一堆后缀名一样的文件*.txt</li>
<li>notepad 创建文件</li>
<li>删除带内容的文件夹<ul>
<li>rd + /s    文件夹名称(询问是否删除)</li>
<li>rd + /q + /s 文件夹名称(直接删除)</li>
</ul>
</li>
</ul>
<h3 id="01-07-Java语言基础-Java语言概述-了解"><a href="#01-07-Java语言基础-Java语言概述-了解" class="headerlink" title="01.07_Java语言基础(Java语言概述)(了解)"></a>01.07_Java语言基础(Java语言概述)(了解)</h3><ul>
<li>A:Java语言发展史<ul>
<li>詹姆斯·高斯林（James Gosling）1977年获得了加拿大卡尔加里大学计算机科学学士学位，1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM第一代工作站NeWS系统，但不受重视。后来转至Sun公司，1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。</li>
<li>SUN(Stanford University Network，斯坦福大学网络公司) </li>
</ul>
</li>
<li>B:Java语言版本<ul>
<li>JDK 1.1.4        Sparkler    宝石                1997-09-12</li>
<li>JDK 1.1.5        Pumpkin        南瓜                1997-12-13</li>
<li>JDK 1.1.6        Abigail        阿比盖尔–女子名        1998-04-24</li>
<li>JDK 1.1.7        Brutus        布鲁图–古罗马政治家和将军    1998-09-28</li>
<li>JDK 1.1.8        Chelsea        切尔西–城市名            1999-04-08</li>
<li>J2SE 1.2        Playground    运动场                1998-12-04</li>
<li>J2SE 1.2.1        none        无                1999-03-30</li>
<li>J2SE 1.2.2        Cricket        蟋蟀                1999-07-08</li>
<li>J2SE 1.3        Kestrel        美洲红隼(sǔn)            2000-05-08</li>
<li>J2SE 1.3.1        Ladybird    瓢虫                2001-05-17</li>
<li>J2SE 1.4.0        Merlin        灰背隼                2002-02-13</li>
<li>J2SE 1.4.1        grasshopper    蚱蜢                2002-09-16</li>
<li>J2SE 1.4.2        Mantis        螳螂                2003-06-26</li>
<li>JAVASE 5.0 (1.5.0)    Tiger        老虎    </li>
<li>JAVASE 5.1 (1.5.1)    Dragonfly    蜻蜓    </li>
<li>JAVASE 6.0 (1.6.0)    Mustang        野马</li>
<li>JAVASE 7.0 (1.7.0)    Dolphin        海豚</li>
</ul>
</li>
<li>C:Java语言平台<ul>
<li>J2SE(Java 2 Platform Standard Edition)标准版<ul>
<li>是为开发普通桌面和商务应用程序提供的解决方案,该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发</li>
</ul>
</li>
<li>J2ME(Java 2 Platform Micro Edition)小型版<ul>
<li>是为开发电子消费产品和嵌入式设备提供的解决方案</li>
</ul>
</li>
<li>J2EE(Java 2 Platform Enterprise Edition)企业版<ul>
<li>是为开发企业环境下的应用程序提供的一套解决方案,该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 </li>
</ul>
</li>
</ul>
</li>
<li>C:Java语言特点<ul>
<li>简单性        </li>
<li>解释性</li>
<li>面向对象        </li>
<li>高性能</li>
<li>分布式处理    </li>
<li>多线程</li>
<li>健壮性        </li>
<li>动态</li>
<li>结构中立        </li>
<li>安全性</li>
<li>开源</li>
<li>跨平台</li>
</ul>
</li>
</ul>
<h3 id="01-08-Java语言基础-Java语言跨平台原理-掌握"><a href="#01-08-Java语言基础-Java语言跨平台原理-掌握" class="headerlink" title="01.08_Java语言基础(Java语言跨平台原理)(掌握)"></a>01.08_Java语言基础(Java语言跨平台原理)(掌握)</h3><ul>
<li>A:什么是跨平台性</li>
<li>B:Java语言跨平台原理<ul>
<li>只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行。</li>
</ul>
</li>
<li>C:Java语言跨平台图解<ul>
<li>write once ,run anywhere!(一处编译,到处运行)</li>
</ul>
</li>
</ul>
<h3 id="01-09-Java语言基础-JRE和JDK的概述-掌握"><a href="#01-09-Java语言基础-JRE和JDK的概述-掌握" class="headerlink" title="01.09_Java语言基础(JRE和JDK的概述)(掌握)"></a>01.09_Java语言基础(JRE和JDK的概述)(掌握)</h3><ul>
<li>A:什么是JRE<ul>
<li>包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</li>
<li>JRE:JVM+类库。 </li>
</ul>
</li>
<li>B:什么是JDK<ul>
<li>JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。</li>
<li>其中的开发工具：编译工具(javac.exe)  打包工具(jar.exe)等<ul>
<li>JDK:JRE+JAVA的开发工具。</li>
</ul>
</li>
</ul>
</li>
<li>C:为什么JDK中包含一个JRE<ul>
<li>为什么JDK中包含一个JRE呢？<ul>
<li>开发完的程序，需要运行一下看看效果。</li>
</ul>
</li>
</ul>
</li>
<li>D:JDK,JRE,JVM的作用和关系</li>
</ul>
<h3 id="01-10-Java语言基础-JDK的下载和安装过程图解-了解"><a href="#01-10-Java语言基础-JDK的下载和安装过程图解-了解" class="headerlink" title="01.10_Java语言基础(JDK的下载和安装过程图解)(了解)"></a>01.10_Java语言基础(JDK的下载和安装过程图解)(了解)</h3><ul>
<li>A:JDK的下载<ul>
<li>a:官网 <a href="http://www.oracle.com" target="_blank" rel="external">http://www.oracle.com</a></li>
<li>b:演示下载流程</li>
</ul>
</li>
<li>B:JDK的安装<ul>
<li>a:傻瓜式安装<ul>
<li>双击安装程序，然后一路next即可(但是不建议)</li>
</ul>
</li>
<li>b:安装的推荐方式<ul>
<li>安装路径不要有中文或者特殊符号如空格等。</li>
<li>所有和开发相关的软件最好安装目录统一。<ul>
<li>举例：我的JDK安装路径<ul>
<li>D:\develop\Java\jdk1.7.0_72</li>
</ul>
</li>
</ul>
</li>
<li>当提示安装JRE时，可以选择不安装。建议还是安装上。</li>
</ul>
</li>
<li>c:演示安装流程<ul>
<li>可以先在d盘建立一个文件夹develop</li>
<li>然后演示安装过程</li>
</ul>
</li>
</ul>
</li>
<li>C:验证安装是否成功<ul>
<li>a:通过DOS命令，切换到JDK安装的bin目录下。<ul>
<li>D:\develop\Java\jdk1.7.0_72\bin</li>
</ul>
</li>
<li>b:然后分别输入javac和java，如果正常显示一些内容，说明安装成功</li>
</ul>
</li>
</ul>
<h3 id="01-11-Java语言基础-JDK安装路径下的目录解释-了解"><a href="#01-11-Java语言基础-JDK安装路径下的目录解释-了解" class="headerlink" title="01.11_Java语言基础(JDK安装路径下的目录解释)(了解)"></a>01.11_Java语言基础(JDK安装路径下的目录解释)(了解)</h3><ul>
<li>a:bin目录：该目录用于存放一些可执行程序。<ul>
<li>如javac.exe（java编译器）、java.exe(java运行工具)，jar.exe(打包工具)和* javadoc.exe(文档生成工具)等。</li>
</ul>
</li>
<li>b:db目录：db目录是一个小型的数据库。<ul>
<li>从JDK 6.0开始，Java中引用了一个新的成员JavaDB，这是一个纯Java实现、开源的数据库管理系统。这个数据库不仅轻便，而且支持JDBC 4.0所有的规范，在学习JDBC 时，不再需要额外地安装一个数据库软件，选择直接使用JavaDB即可。</li>
</ul>
</li>
<li>c:jre目录：”jre”是 Java Runtime Environment 的缩写，意为Java程序运行时环境。此目录是Java运行时环境的根目录，它包括Java虚拟机，运行时的类包，Java应用启动器以及一个bin目录，但不包含开发环境中的开发工具。</li>
<li>d:include目录：由于JDK是通过C和C++实现的，因此在启动时需要引入一些C语言的头文件，该目录就是用于存放这些头文件的。</li>
<li>e:lib目录：lib是library的缩写，意为 Java 类库或库文件，是开发工具使用的归档包文件。</li>
<li>f:src.zip文件：src.zip为src文件夹的压缩文件，src中放置的是JDK核心类的源代码，通过该文件可以查看Java基础类的源代码。</li>
</ul>
<h3 id="01-12-Java语言基础-Java开发工具介绍-了解"><a href="#01-12-Java语言基础-Java开发工具介绍-了解" class="headerlink" title="01.12_Java语言基础(Java开发工具介绍)(了解)"></a>01.12_Java语言基础(Java开发工具介绍)(了解)</h3><ul>
<li>A:notepad(微软操作系统自带)</li>
<li>B:Editplus/Notepad++</li>
<li>C:Eclipse</li>
<li>D:MyEclipse<ul>
<li>给大家简单的介绍一下这些工具，然后说说我们使用这些工具的顺序。</li>
<li>基础班：先notepad，然后Editplus，再Eclipse。</li>
<li>就业班：MyEclipse和Eclipse都用。</li>
</ul>
</li>
</ul>
<h3 id="01-13-Java语言基础-HelloWorld案例的编写和运行-掌握"><a href="#01-13-Java语言基础-HelloWorld案例的编写和运行-掌握" class="headerlink" title="01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握)"></a>01.13_Java语言基础(HelloWorld案例的编写和运行)(掌握)</h3><ul>
<li>A:定义类</li>
<li>B:写main方法</li>
<li>C:写输出语句</li>
<li>D:Java程序开发运行与工作原理</li>
<li>E:编译和运行程序<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"HelloWorld"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="01-14-Java语言基础-HelloWorld案例常见问题-掌握"><a href="#01-14-Java语言基础-HelloWorld案例常见问题-掌握" class="headerlink" title="01.14_Java语言基础(HelloWorld案例常见问题)(掌握)"></a>01.14_Java语言基础(HelloWorld案例常见问题)(掌握)</h3><ul>
<li>A:找不到文件(都演示一下，让学生看看出现的都是什么问题)<ul>
<li>a:文件扩展名隐藏导致编译失败</li>
<li>b:文件名写错了</li>
</ul>
</li>
<li>B:单词拼写问题(都演示一下，让学生看看出现的都是什么问题)<ul>
<li>a:class写成Class</li>
<li>b:String写成string</li>
<li>c:System写成system</li>
<li>d:main写成mian</li>
</ul>
</li>
<li>C:括号匹配问题(都演示一下，让学生看看出现的都是什么问题)<ul>
<li>a:把类体的那对大括号弄掉一个</li>
<li>b:把方法体的那对大括号弄掉一个</li>
<li>c:把输出语句的那对小括号弄掉一个</li>
</ul>
</li>
<li>D:中英文问题(都演示一下，让学生看看出现的都是什么问题)<ul>
<li>a:提示信息：错误: 非法字符: \????的格式</li>
<li>注意：java编程中需要的基本上都是英文字符</li>
</ul>
</li>
</ul>
<h3 id="01-15-Java语言基础-Java语言的书写格式-约定俗成-掌握"><a href="#01-15-Java语言基础-Java语言的书写格式-约定俗成-掌握" class="headerlink" title="01.15_Java语言基础(Java语言的书写格式(约定俗成))    (掌握)"></a>01.15_Java语言基础(Java语言的书写格式(约定俗成))    (掌握)</h3><ul>
<li>1,大括号要对齐,并且成对写</li>
<li>2,左大括号前面有空格</li>
<li>3,遇到左大括号要缩进,Tab</li>
<li>4,方法和程序块之间加空行让程序看起来清晰</li>
<li>5,并排语句之间加空格,例如for语句</li>
<li>6,运算符两侧加空格</li>
</ul>
<h3 id="01-16-Java语言基础-path环境变量的作用及配置方式1-掌握"><a href="#01-16-Java语言基础-path环境变量的作用及配置方式1-掌握" class="headerlink" title="01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握)"></a>01.16_Java语言基础(path环境变量的作用及配置方式1)(掌握)</h3><ul>
<li>A:在JDK的bin目录下开发程序容易产生的问题<ul>
<li>a:如果文件过多，不方便管理</li>
<li>b:删除自己写过的不需要的文件，可能不小心把JDK自带的工具给删除了</li>
</ul>
</li>
<li>B:如何解决问题呢<ul>
<li>notepad这样的命令为什么在任何路径下都能够执行,配置path环境变量</li>
</ul>
</li>
<li>C:配置方式<ul>
<li>a:xp系统<ul>
<li>右键点击桌面计算机→选择属性→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。</li>
</ul>
</li>
<li>b:win7/win8系统<ul>
<li>右键点击桌面计算机→选择属性→选择高级系统设置→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path→将jdk安装目录下的bin目录添加到最左边并添加分号。</li>
</ul>
</li>
</ul>
</li>
<li>path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件</li>
</ul>
<h3 id="01-17-Java语言基础-Path环境变量的配置方式2-掌握"><a href="#01-17-Java语言基础-Path环境变量的配置方式2-掌握" class="headerlink" title="01.17_Java语言基础(Path环境变量的配置方式2)(掌握)"></a>01.17_Java语言基础(Path环境变量的配置方式2)(掌握)</h3><ul>
<li>A:先配置JAVA_HOME</li>
<li>B:再修改path</li>
<li>C:最后说一下path是有先后顺序关系的</li>
</ul>
<h3 id="01-18-Java语言基础-classpath环境变量的作用及其配置-了解"><a href="#01-18-Java语言基础-classpath环境变量的作用及其配置-了解" class="headerlink" title="01.18_Java语言基础(classpath环境变量的作用及其配置)(了解)"></a>01.18_Java语言基础(classpath环境变量的作用及其配置)(了解)</h3><ul>
<li>A:为什么要配置classpath</li>
<li>B:classpath配置的原理</li>
<li><p>C:如何配置classpath</p>
<p>  如果将Java执行环境比喻为操作系统，如果设置Path变量是为了让操作系统找到指定的工具程序(以Windows来说就是找到.exe文件)，则设置Classpath的目的就是让Java执行环境找到指定的Java程序(也就是.class文件)。</p>
</li>
<li><p>path和classpath的区别</p>
<ul>
<li>path配置的是可执行的文件.exe,配置后可以在不同的盘符下访问path路径下的可执行文件</li>
<li>classpath配置的java的类文件,就是.class文件</li>
</ul>
</li>
</ul>
<h3 id="01-19-Java语言基础-Editplus开发程序并编译运行-了解"><a href="#01-19-Java语言基础-Editplus开发程序并编译运行-了解" class="headerlink" title="01.19_Java语言基础(Editplus开发程序并编译运行)(了解)"></a>01.19_Java语言基础(Editplus开发程序并编译运行)(了解)</h3><ul>
<li>A:配置快捷键编译运行</li>
<li>B:去除备份文件</li>
</ul>
<h3 id="01-20-Java语言基础-注释概述及其分类-掌握"><a href="#01-20-Java语言基础-注释概述及其分类-掌握" class="headerlink" title="01.20_Java语言基础(注释概述及其分类)(掌握)"></a>01.20_Java语言基础(注释概述及其分类)(掌握)</h3><ul>
<li>A:什么是注释</li>
<li><p>B:注释的分类及讲解</p>
<ul>
<li>文档注释目前不讲，说后面讲解</li>
</ul>
</li>
<li><p>注释的作用</p>
<ul>
<li>A:解释说明程序</li>
<li>B:帮助我们调试错误</li>
</ul>
</li>
</ul>
<h3 id="01-21-Java语言基础-关键字的概述和使用-掌握"><a href="#01-21-Java语言基础-关键字的概述和使用-掌握" class="headerlink" title="01.21_Java语言基础(关键字的概述和使用)(掌握)"></a>01.21_Java语言基础(关键字的概述和使用)(掌握)</h3><ul>
<li>A:什么是关键字<ul>
<li>被Java语言赋予特定含义的单词 </li>
</ul>
</li>
<li>B:关键字的特点<ul>
<li>组成关键字的字母全部小写 </li>
</ul>
</li>
<li>C:常见关键字<ul>
<li>public static void class等 </li>
</ul>
</li>
<li>D:关键字的注意事项<ul>
<li>goto和const作为保留字存在,目前并不使用,类似Editplus这样的高级记事本,针对关键字有特殊的颜色标记，非常直观 </li>
</ul>
</li>
</ul>
<h3 id="01-22-Java语言基础-标识符的概述和组成规则-掌握"><a href="#01-22-Java语言基础-标识符的概述和组成规则-掌握" class="headerlink" title="01.22_Java语言基础(标识符的概述和组成规则)(掌握)"></a>01.22_Java语言基础(标识符的概述和组成规则)(掌握)</h3><ul>
<li>A:什么是标识符<ul>
<li>就是给类,接口,方法,变量等起名字时使用的字符序列 </li>
</ul>
</li>
<li>B:标识符的组成规则<ul>
<li>英文大小写字母</li>
<li>数字字符</li>
<li><code>$和__</code></li>
</ul>
</li>
<li>C:标识符注意事项<ul>
<li>1,不能使用关键字</li>
<li>2,不能数字开头 </li>
</ul>
</li>
</ul>
<h3 id="01-23-Java语言基础-标识符中常见的命名规则-了解"><a href="#01-23-Java语言基础-标识符中常见的命名规则-了解" class="headerlink" title="01.23_Java语言基础(标识符中常见的命名规则)(了解)"></a>01.23_Java语言基础(标识符中常见的命名规则)(了解)</h3><ul>
<li>见名知意</li>
<li>A:包<ul>
<li>最好是域名倒过来,要求所有的字母小写 </li>
</ul>
</li>
<li>B:类或者接口<ul>
<li>如果是一个单词首字母大写</li>
<li>如果是多个单词每个单词首字母大写(驼峰标识) </li>
</ul>
</li>
<li>C:方法或者变量<ul>
<li>如果是一个单词全部小写</li>
<li>如果是多个单词,从第二个单词首字母大写 </li>
</ul>
</li>
<li>D:常量<ul>
<li>如果是一个单词,所有字母大写</li>
<li>如果是多个单词,所有的单词大写,用下划线区分每个单词 </li>
</ul>
</li>
</ul>
<h3 id="01-24-day01总结"><a href="#01-24-day01总结" class="headerlink" title="01.24_day01总结"></a>01.24_day01总结</h3><ul>
<li>把今天的知识点总结一遍。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;01-01-计算机基础知识-计算机概述-了解&quot;&gt;&lt;a href=&quot;#01-01-计算机基础知识-计算机概述-了解&quot; class=&quot;headerlink&quot; title=&quot;01.01_计算机基础知识(计算机概述)(了解)&quot;&gt;&lt;/a&gt;01.01_计算机基础知识(计算机概述)(了解)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;A:什么是计算机?计算机在生活中的应用举例&lt;ul&gt;
&lt;li&gt;计算机（Computer）全称：电子计算机，俗称电脑。是一种能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。由硬件和软件所组成，没有安装任何软件的计算机称为裸机。常见的形式有台式计算机、笔记本计算机、大型计算机等。&lt;/li&gt;
&lt;li&gt;应用举例&lt;ul&gt;
&lt;li&gt;1：科学计算&lt;/li&gt;
&lt;li&gt;2、数据处理&lt;/li&gt;
&lt;li&gt;3、自动控制&lt;/li&gt;
&lt;li&gt;4、计算机辅助设计&lt;/li&gt;
&lt;li&gt;5、人工智能&lt;/li&gt;
&lt;li&gt;6、多媒体应用&lt;/li&gt;
&lt;li&gt;7、计算机网络&lt;/li&gt;
&lt;li&gt;… &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B:什么是硬件?硬件举例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件（Computer Hardware）是指计算机系统中由电子，机械和光电元件等组成的各种物理装置的总称。这些物理装置按系统结构的要求构成一个有机整体为计算机软件运行提供物质基础。&lt;/li&gt;
&lt;li&gt;冯.诺依曼体系结构&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算机的硬件分成5大组成部件：运算器、控制器、存储器、输入设备和输出设备。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运算器和控制器是计算机的核心，合称中央处理单元（Central Processing Unit，CPU）或处理器。CPU的内部还有一些高速存储单元，被称为寄存器。其中运算器执行所有的算术和逻辑运算；控制器负责把指令逐条从存储器中取出，经译码后向计算机发出各种控制命令；而寄存器为处理单元提供操作所需要的数据。&lt;/li&gt;
&lt;li&gt;存储器是计算机的记忆部分，用来存放程序以及程序中涉及的数据。它分为内部存储器和外部存储器。内部存储器用于存放正在执行的程序和使用的数据，其成本高、容量小，但速度快。外部存储器可用于长期保存大量程序和数据，其成本低、容量大，但速度较慢。&lt;/li&gt;
&lt;li&gt;输入设备和输出设备统称为外部设备，简称外设或I/O设备，用来实现人机交互和机间通信。微型机中常用的输入设备有键盘、鼠标等，输出设备有显示器、打印机等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="计算机基础知识" scheme="http://harmansecurity.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java语言基础" scheme="http://harmansecurity.cn/tags/Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>2017年3月小记</title>
    <link href="http://harmansecurity.cn/2017/03/19/2017%E5%B9%B43%E6%9C%88%E5%B0%8F%E8%AE%B0/"/>
    <id>http://harmansecurity.cn/2017/03/19/2017年3月小记/</id>
    <published>2017-03-19T14:07:22.000Z</published>
    <updated>2017-03-19T14:22:52.737Z</updated>
    
    <content type="html"><![CDATA[<!--<img src="/diaryImages/diary-1.jpg" width = "700" height = "400"/>-->
<p>　　最近一直在忙着挑战杯以及看论文写论文，没有太多的时间来写博客。回想之前做的事，虽然都是有收获的但是有些还是没继续做到最后。自从寒假前想清楚以后要做的是从事技术，一直在盘算着未来到底做哪一块，什么样的岗位，想更适合做哪些领域的工作，早作决定然后早点准备，打牢基础。</p>
<p>　　对待买书这件事上一直不是很吝啬的，从去年到现在购买书所花费的费用快接近千元了，很多书都过了一遍，有些经典的书一时半会儿还吃不完，等以后有时间慢慢消化。本科有一些Java前端和后台开发的基础，对我来说选择Java更容易上手。但是之前所学深感都是皮毛，为了开发一个东西而开发，理解的深度不够。最近新购了一批Java相关的书籍，利用接下来的时间过一遍，从最基础的开始，温故而知新。也在看某马的Java基础教程，发现有些基础知识已经遗忘，这套视频的好处，每节课都会有一个markdown写的笔记，我打算看完一节视频，更新一下笔记，虽然都是基础，但是牢牢掌握还是很有必要的。先从基础开始，然后多动手实践。上学期看的相关安全类的书和做的一些简单小实验对自己还是有很大启发的，以前的开发中从未考虑过安全，很多细节在之后的开发中都需要注意。下面的就是书单，在这边发上来，也督促自己先把这些书看完。<br><a id="more"></a></p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/2017%E5%B9%B43%E6%9C%88%E5%B0%8F%E8%AE%B01.jpg" alt=""><br></div><br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/2017%E5%B9%B43%E6%9C%88%E5%B0%8F%E8%AE%B02.jpg" alt=""><br></div>
]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;img src=&quot;/diaryImages/diary-1.jpg&quot; width = &quot;700&quot; height = &quot;400&quot;/&gt;--&gt;
&lt;p&gt;　　最近一直在忙着挑战杯以及看论文写论文，没有太多的时间来写博客。回想之前做的事，虽然都是有收获的但是有些还是没继续做到最后。自从寒假前想清楚以后要做的是从事技术，一直在盘算着未来到底做哪一块，什么样的岗位，想更适合做哪些领域的工作，早作决定然后早点准备，打牢基础。&lt;/p&gt;
&lt;p&gt;　　对待买书这件事上一直不是很吝啬的，从去年到现在购买书所花费的费用快接近千元了，很多书都过了一遍，有些经典的书一时半会儿还吃不完，等以后有时间慢慢消化。本科有一些Java前端和后台开发的基础，对我来说选择Java更容易上手。但是之前所学深感都是皮毛，为了开发一个东西而开发，理解的深度不够。最近新购了一批Java相关的书籍，利用接下来的时间过一遍，从最基础的开始，温故而知新。也在看某马的Java基础教程，发现有些基础知识已经遗忘，这套视频的好处，每节课都会有一个markdown写的笔记，我打算看完一节视频，更新一下笔记，虽然都是基础，但是牢牢掌握还是很有必要的。先从基础开始，然后多动手实践。上学期看的相关安全类的书和做的一些简单小实验对自己还是有很大启发的，以前的开发中从未考虑过安全，很多细节在之后的开发中都需要注意。下面的就是书单，在这边发上来，也督促自己先把这些书看完。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://harmansecurity.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="小记" scheme="http://harmansecurity.cn/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ELK搭建社工库</title>
    <link href="http://harmansecurity.cn/2017/02/25/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%93/"/>
    <id>http://harmansecurity.cn/2017/02/25/ELK搭建社工库/</id>
    <published>2017-02-25T07:07:21.000Z</published>
    <updated>2017-02-25T08:13:13.359Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><h5 id="1-核心组成"><a href="#1-核心组成" class="headerlink" title="1.核心组成"></a>1.核心组成</h5><p>ELK由Elasticsearch、Logstash和Kibana三部分组件组成；</p>
<ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。</li>
<li>Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</li>
</ul>
<h5 id="2-三大组件"><a href="#2-三大组件" class="headerlink" title="2.三大组件"></a>2.三大组件</h5><ul>
<li>Logstash: logstash server端用来搜集数据；</li>
<li>Elasticsearch: 存储各类数据；</li>
<li>Kibana: web化接口用作查寻和可视化数据；</li>
</ul>
<h5 id="3-工作流程"><a href="#3-工作流程" class="headerlink" title="3.工作流程"></a>3.工作流程</h5><p>　 　以日志分析为例：Logstash收集AppServer产生的Log，并存放到ElasticSearch集群中，而Kibana则从ES集群中查询数据生成图表，再返回给Browser。</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%931.png" alt=""><br></div>

<a id="more"></a>
<h4 id="二、ELK搭建"><a href="#二、ELK搭建" class="headerlink" title="二、ELK搭建"></a>二、ELK搭建</h4><h5 id="1-系统环境"><a href="#1-系统环境" class="headerlink" title="1.系统环境"></a>1.系统环境</h5><ul>
<li>win7(X86)</li>
<li>ElasticSearch: 2.1.1</li>
<li>Logstash: 1.5.1</li>
<li>Kibana: 5.2.1</li>
<li>JDK1.8(安装java至少7以上的版本,并且配置JAVA_HOME环境变量)</li>
</ul>
<h5 id="2-安装Elasticsearch"><a href="#2-安装Elasticsearch" class="headerlink" title="2.安装Elasticsearch"></a>2.安装Elasticsearch</h5><ul>
<li>下载地址：<a href="https://www.elastic.co/downloads/" target="_blank" rel="external">https://www.elastic.co/downloads/</a></li>
<li><p>解压即可，配置文件elasticsearch.yml,默认也行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#按照自己的需求修改也行，我选择的是默认，没有修改。</div><div class="line">cluster.name: esdemo #(集群的描述信息)</div><div class="line">node.name: 63 #(节点名称)</div><div class="line">network.host: 192.168.1.5 #(绑定的IP地址)</div><div class="line">http.port: 9200 #(端口号 默认9200)</div></pre></td></tr></table></figure>
</li>
<li><p>执行elasticsearch.bat即可启动</p>
</li>
</ul>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%932.png" alt=""></p>
<ul>
<li>访问<code>http://localhost:9200</code>可查看是否正常运行，运行成功效果如下：</li>
</ul>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%933.png" alt=""></p>
<h5 id="3-安装Kibana"><a href="#3-安装Kibana" class="headerlink" title="3.安装Kibana"></a>3.安装Kibana</h5><ul>
<li>下载地址：<a href="https://www.elastic.co/downloads/" target="_blank" rel="external">https://www.elastic.co/downloads/</a></li>
<li>解压即可，执行kibana.bat启动即可启动</li>
<li>访问<code>http://localhost:5601</code>可查看是否正常运行，运行成功效果如下：<br><img src="http://ojto7c1rw.bkt.clouddn.com/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%934.png" alt=""></li>
</ul>
<h5 id="4-安装logstash"><a href="#4-安装logstash" class="headerlink" title="4.安装logstash"></a>4.安装logstash</h5><ul>
<li>下载地址：<a href="https://www.elastic.co/downloads/" target="_blank" rel="external">https://www.elastic.co/downloads/</a></li>
<li>解压即可。</li>
</ul>
<h4 id="三、社工库搭建"><a href="#三、社工库搭建" class="headerlink" title="三、社工库搭建"></a>三、社工库搭建</h4><p>　 　因为是.sql文件，所以先导入mysql,然后再导出csv文件。也就是说不同的网站数据库最终全部是csv文件，并且是格式相同的csv。有字段不存在的则使用空字符替代。这样的话,可以在不更改logstash配置文件的情况下直接导入ES，也方便进行迁移。</p>
<ul>
<li><p>数据库中的文件导出csv文件格式。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> md5_sgk <span class="keyword">into</span> <span class="keyword">outfile</span> <span class="string">'f://scolib.csv'</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span><span class="keyword">optionally</span> <span class="keyword">enclosed</span> <span class="keyword">by</span> <span class="string">''</span><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'/n'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>新建logstash.config并进行配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">input&#123;</div><div class="line">	file&#123;</div><div class="line">	    #需要被导入的数据库文件路径</div><div class="line">		path =&gt;&quot;f:/soclib.csv&quot;</div><div class="line">		start_position =&gt;beginning</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">filter&#123;</div><div class="line">	grok&#123;</div><div class="line">	    #表达式路径，这里自定义了一行内容S \s用来匹配换行符</div><div class="line">		patterns_dir =&gt;&quot;f:/test.txt&quot;</div><div class="line">		#写入ES的字段名</div><div class="line">		match =&gt;&#123;&quot;message&quot;=&gt;&quot;%&#123;DATA:id&#125;,%&#123;DATA:username&#125;,%&#123;DATA:password&#125;,%&#123;DATA:email&#125;,%&#123;DATA:salt&#125;,%&#123;DATA:order&#125;&quot;&#125;</div><div class="line">	&#125;</div><div class="line">	grok&#123;</div><div class="line">		#提取文件名</div><div class="line">		match =&gt;[&quot;path&quot;,&quot;f:/%&#123;GREEDYDATA:from&#125;\.csv&quot;]</div><div class="line">	&#125;</div><div class="line">	mutate&#123;</div><div class="line">		#删除一些ES自带的字段很占用空间</div><div class="line">		remove_field =&gt;[&quot;host&quot;,&quot;path&quot;,&quot;message&quot;]</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output&#123;</div><div class="line">	elasticsearch&#123;</div><div class="line">		#ES地址</div><div class="line">		hosts =&gt; &quot;localhost:9200&quot;</div><div class="line">		#索引名称</div><div class="line">		index =&gt;&quot;sdb&quot;</div><div class="line">		document_type =&gt;&quot;sdb&quot;</div><div class="line">		#如果启用了shield则需要配置用户名和密码</div><div class="line">		#user =&gt;&quot;填写密码&quot;</div><div class="line">		#password =&gt;&quot;填写用户名&quot;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	stdout&#123;</div><div class="line">		codec=&gt;rubydebug</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在logstash bin目录下面执行logstash.bat -f logstash.config</p>
</li>
</ul>
<h4 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h4><ul>
<li><code>http://www.tuicool.com/articles/uuaqeyf</code></li>
<li>百度搜索ELK，对原理有大概的了解。</li>
</ul>
<h4 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h4><p>　 　上一篇文章没有做任何的处理，直接通过sql语句进行查询，数据库中大概有九千万的数据，查询一次需要四分钟左右，速度还是很慢的，之前在论坛里听有人说用ELK搭建，所以这次就试了下。ELK处理数据应该是特别快的，不过真的很迟内存，按照我上面的步骤没有错，不过执行到最后一步，电脑内存耗尽直接有点死了，由于装的是32位的系统，占用内存本来就比较小，所以我就终止了程序。如果有人感兴趣的话电脑配置也比较高可以按照我的步骤执行下，一起交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h4&gt;&lt;h5 id=&quot;1-核心组成&quot;&gt;&lt;a href=&quot;#1-核心组成&quot; class=&quot;headerlink&quot; title=&quot;1.核心组成&quot;&gt;&lt;/a&gt;1.核心组成&lt;/h5&gt;&lt;p&gt;ELK由Elasticsearch、Logstash和Kibana三部分组件组成；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。&lt;/li&gt;
&lt;li&gt;Logstash是一个完全开源的工具，他可以对你的日志进行收集、过滤，并将其存储供以后使用（如，搜索）。&lt;/li&gt;
&lt;li&gt;Kibana 也是一个开源和免费的工具，它Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-三大组件&quot;&gt;&lt;a href=&quot;#2-三大组件&quot; class=&quot;headerlink&quot; title=&quot;2.三大组件&quot;&gt;&lt;/a&gt;2.三大组件&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Logstash: logstash server端用来搜集数据；&lt;/li&gt;
&lt;li&gt;Elasticsearch: 存储各类数据；&lt;/li&gt;
&lt;li&gt;Kibana: web化接口用作查寻和可视化数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;3-工作流程&quot;&gt;&lt;a href=&quot;#3-工作流程&quot; class=&quot;headerlink&quot; title=&quot;3.工作流程&quot;&gt;&lt;/a&gt;3.工作流程&lt;/h5&gt;&lt;p&gt;　 　以日志分析为例：Logstash收集AppServer产生的Log，并存放到ElasticSearch集群中，而Kibana则从ES集群中查询数据生成图表，再返回给Browser。&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/ELK%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%931.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="社工库" scheme="http://harmansecurity.cn/tags/%E7%A4%BE%E5%B7%A5%E5%BA%93/"/>
    
      <category term="Elasticsearch" scheme="http://harmansecurity.cn/tags/Elasticsearch/"/>
    
      <category term="Logstash" scheme="http://harmansecurity.cn/tags/Logstash/"/>
    
      <category term="Kinaba" scheme="http://harmansecurity.cn/tags/Kinaba/"/>
    
  </entry>
  
  <entry>
    <title>搭建社工库</title>
    <link href="http://harmansecurity.cn/2017/02/20/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%93/"/>
    <id>http://harmansecurity.cn/2017/02/20/搭建社工库/</id>
    <published>2017-02-20T12:53:12.000Z</published>
    <updated>2017-02-20T14:56:01.654Z</updated>
    
    <content type="html"><![CDATA[<p>　 　社工库顾名思义就是社工数据库查询工具。网站自称可帮助您判断您的密码或个人信息是否已经被公开或泄漏，即如果您输入自己密码可以在社工库上查到，就意味着你的账号已被盗（过）。这两天正好得到了一些数据，简单做一个社工库。</p>
<h5 id="简单介绍下MySql的使用"><a href="#简单介绍下MySql的使用" class="headerlink" title="简单介绍下MySql的使用"></a>简单介绍下MySql的使用</h5><p>　 　由于我之前的数据库中已经有数据为了方便演示，我把数据删掉，正好也回顾一下MySql的使用。我使用的是Navicat这个支持MySql的可视化工具，由于数据比较多，我直接从CMD终端进行操作删除。</p>
<ul>
<li>很多时候我们电脑的MySQL服务没有开启，<code>net start mysql</code>开启MySQL服务。<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%931.png" alt=""><br></div></li>
<li>进入MySQL数据库,在终端中输入<code>mysql -u root -p</code>,根据提示输入密码。<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%932.png" alt=""><br></div>

</li>
</ul>
<a id="more"></a>
<ul>
<li>查看所有的数据库，<code>show databases;</code>我们会看到之前新建的数据库。<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%933.png" alt=""><br></div></li>
<li>使用之前的数据库<code>use &lt;库名&gt;;</code>,然后查看当前数据库下面的表,<code>show tables;</code>。<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%934.png" alt=""><br></div></li>
<li>删除表里面的所有数据<code>delete from &lt;表名&gt;;</code>。<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%935.png" alt=""><br></div>

</li>
</ul>
<h5 id="处理数据，实现保存和查询的功能"><a href="#处理数据，实现保存和查询的功能" class="headerlink" title="处理数据，实现保存和查询的功能"></a>处理数据，实现保存和查询的功能</h5><p>　 　我得到的数据是txt格式，每一行是用户名，密码，邮箱，由于这一行数据可能是以多个空格或者分号或者只有用户名没有密码，所以还需要对每一行的数据进行适当的处理然后保存到数据库中。我读取了一下txt文件，txt中有二百多万条数据，大概花了40秒左右，但是将数据存储到数据库中花的时间太长了，由于时间的原因，只向数据库中插入了十万多条数据。</p>
<ul>
<li><p>对txt文件数据进行处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFileByLines</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line">	File file = <span class="keyword">new</span> File(fileName);</div><div class="line">	<span class="comment">//用户名</span></div><div class="line">	String  userName=<span class="keyword">null</span>;</div><div class="line">	<span class="comment">//用户密码</span></div><div class="line">	String  userPwd=<span class="keyword">null</span>;</div><div class="line">	<span class="comment">//用户邮箱</span></div><div class="line">	String  userMail=<span class="keyword">null</span>;</div><div class="line">	BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		System.out.println(<span class="string">"以行为单位读取文件内容，一次读一整行："</span>);</div><div class="line">		reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">		String tempString=<span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> line=<span class="number">1</span>;</div><div class="line">	    <span class="comment">//开始时间</span></div><div class="line">		<span class="keyword">long</span> startTime=System.currentTimeMillis();</div><div class="line">		<span class="comment">// 一次读入一行，直到读入null为文件结束</span></div><div class="line">		<span class="keyword">while</span>((tempString=reader.readLine())!=<span class="keyword">null</span>)&#123;</div><div class="line">               <span class="comment">// 显示每行的数据</span></div><div class="line">              System.out.println(<span class="string">"line "</span> + line + <span class="string">": "</span> + tempString);</div><div class="line">               <span class="comment">//因为txt文件里每行数据可能是以多个空格或者;来分隔</span></div><div class="line">               String[]  tempArray = tempString.split(<span class="string">"\\s+|;"</span>);</div><div class="line">               <span class="comment">//有的数据里面只有用户名或者密码，缺少邮箱，不这样处理的话溢出</span></div><div class="line">               <span class="comment">//如果字符串只有用户名和密码，那么字符数组的长度为2</span></div><div class="line">               <span class="comment">//那么插入数据到数据库的时候，如果直接赋值tempArray[2]肯定会报错</span></div><div class="line">               <span class="keyword">if</span>(tempArray.length==<span class="number">2</span>)&#123;</div><div class="line">               	tempArray=(String[]) Arrays.copyOf(tempArray, tempArray.length+<span class="number">1</span>);</div><div class="line">               	tempArray[tempArray.length-<span class="number">1</span>]=<span class="string">" "</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//System.out.println(tempArray[0]);</span></div><div class="line">               <span class="comment">//System.out.println(tempArray[1]);</span></div><div class="line">              <span class="comment">// System.out.println(tempArray[2]);</span></div><div class="line">               <span class="comment">//把拆分的数据分别赋值然后保存到数据库中</span></div><div class="line">               userName=tempArray[<span class="number">0</span>];</div><div class="line">               userPwd=tempArray[<span class="number">1</span>];</div><div class="line">               userMail=tempArray[<span class="number">2</span>];</div><div class="line">               <span class="comment">//把数据插入到数据库中</span></div><div class="line">               operateData.insertData(userName, userPwd, userMail);</div><div class="line">               line++;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//结束时间</span></div><div class="line">		<span class="keyword">long</span> endTime=System.currentTimeMillis();</div><div class="line">		<span class="comment">//程序运行的时间</span></div><div class="line">		<span class="keyword">double</span> seconds=(endTime-startTime)/<span class="number">1000.0</span>;</div><div class="line">		System.out.println(<span class="string">"程序运行的时间是："</span>+seconds+<span class="string">"s"</span>);</div><div class="line">		<span class="comment">//总共数据量</span></div><div class="line">		System.out.println(<span class="string">"总共数据量是："</span>+(line-<span class="number">1</span>));</div><div class="line">		reader.close();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span>&#123;</div><div class="line">		<span class="keyword">if</span>(reader!=<span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				reader.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e1) &#123;</div><div class="line">				<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>将处理完的数据保存到数据库中(插入操作)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将文本中的数据插入到数据库中</div><div class="line"> * <span class="doctag">@param</span> userName</div><div class="line"> * <span class="doctag">@param</span> userPwd</div><div class="line"> * <span class="doctag">@param</span> userMail</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertData</span><span class="params">(String userName,String userPwd,String userMail)</span></span>&#123;</div><div class="line">	ConnDB cdb = <span class="keyword">new</span> ConnDB();</div><div class="line">	String sql = <span class="string">"insert into userInfo (userName,userPwd,userMail) values ('"</span>+userName+<span class="string">"','"</span>+userPwd+<span class="string">"','"</span>+userMail+<span class="string">"')"</span>;</div><div class="line">	<span class="comment">//执行增删改</span></div><div class="line">	cdb.getModify(sql);</div><div class="line">	<span class="comment">//不知道是否插入成功，可通过下面的代码来判断</span></div><div class="line">	<span class="comment">/*	int i=cdb.getModify(sql);</span></div><div class="line">	  if(i==1)</div><div class="line">		System.out.println("添加成功");</div><div class="line">	else</div><div class="line">		System.out.println("添加失败");*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>对数据库中的数据进行查询(查询操作)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据用户名或者邮箱查询数据</div><div class="line"> * <span class="doctag">@param</span> data</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">queryData</span><span class="params">(String data)</span></span>&#123;</div><div class="line">	    String userName=<span class="keyword">null</span>;</div><div class="line">        ConnDB cdb = <span class="keyword">new</span> ConnDB();</div><div class="line">		ResultSet rs = cdb.getSelect(<span class="string">"select * from userinfo where userName='"</span>+data+<span class="string">"' or userMail='"</span>+data+<span class="string">"';"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">while</span>(rs.next())&#123;</div><div class="line">				userName=rs.getString(<span class="string">"userName"</span>);</div><div class="line">				System.out.print(rs.getString(<span class="string">"userName"</span>)+<span class="string">"\t"</span>);</div><div class="line">				System.out.print(rs.getString(<span class="string">"userPwd"</span>)+<span class="string">"\t"</span>);</div><div class="line">				System.out.println(rs.getString(<span class="string">"userMail"</span>));</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(userName==<span class="keyword">null</span>)&#123;</div><div class="line">					System.out.println(<span class="string">"对不起，您查找的用户不存在！"</span>);</div><div class="line">				&#125;</div><div class="line">				cdb.closeResultSet(rs);</div><div class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Eclipse控制台运行效果</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%936.png" alt=""><br></div>
</li>
<li><p>该项目地址<br>GitHUB：<a href="https://github.com/harmansecurity/SocilaLibrary" target="_blank" rel="external">https://github.com/harmansecurity/SocilaLibrary</a></p>
</li>
</ul>
<p>　 　还是个小白，要学的东西还有很多，待会儿我把代码上传到我的GitHub中，等明天电脑到之后准备搭一个渗透环境，多实践。提到电脑还是很感动的，因为实验室到现在还没有配台式机(这里我就不吐槽这件事了)，跟朋友说了下目前的情况，立马把她的旧电脑寄给我做实验了，满满的感动，感激。时间的原因，我先暂时不做一个网页了，做一个搜索的网页无非就是一个搜索栏然后连接数据库查询数据，实现起来不是很难。如果对数据感兴趣的朋友可以私聊我或者留言，到时候转发给你，如果做违法犯罪行为，本人概不负责任。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　社工库顾名思义就是社工数据库查询工具。网站自称可帮助您判断您的密码或个人信息是否已经被公开或泄漏，即如果您输入自己密码可以在社工库上查到，就意味着你的账号已被盗（过）。这两天正好得到了一些数据，简单做一个社工库。&lt;/p&gt;
&lt;h5 id=&quot;简单介绍下MySql的使用&quot;&gt;&lt;a href=&quot;#简单介绍下MySql的使用&quot; class=&quot;headerlink&quot; title=&quot;简单介绍下MySql的使用&quot;&gt;&lt;/a&gt;简单介绍下MySql的使用&lt;/h5&gt;&lt;p&gt;　 　由于我之前的数据库中已经有数据为了方便演示，我把数据删掉，正好也回顾一下MySql的使用。我使用的是Navicat这个支持MySql的可视化工具，由于数据比较多，我直接从CMD终端进行操作删除。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很多时候我们电脑的MySQL服务没有开启，&lt;code&gt;net start mysql&lt;/code&gt;开启MySQL服务。&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%931.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;进入MySQL数据库,在终端中输入&lt;code&gt;mysql -u root -p&lt;/code&gt;,根据提示输入密码。&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/%E6%90%AD%E5%BB%BA%E7%A4%BE%E5%B7%A5%E5%BA%932.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="社工库" scheme="http://harmansecurity.cn/tags/%E7%A4%BE%E5%B7%A5%E5%BA%93/"/>
    
      <category term="Java" scheme="http://harmansecurity.cn/tags/Java/"/>
    
      <category term="MySql" scheme="http://harmansecurity.cn/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Http抓包与调试(Wireshark)</title>
    <link href="http://harmansecurity.cn/2017/02/14/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95(Wireshark)/"/>
    <id>http://harmansecurity.cn/2017/02/14/Http抓包与调试(Wireshark)/</id>
    <published>2017-02-14T06:23:27.000Z</published>
    <updated>2017-02-14T14:22:50.605Z</updated>
    
    <content type="html"><![CDATA[<p> 　 　wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息。使用wireshark的人必须了解网络协议，否则就看不懂wireshark了。为了安全考虑，wireshark只能查看封包，而不能修改封包的内容，或者发送封包。wireshark能获取HTTP，也能获取HTTPS，但是不能解密HTTPS，所以wireshark看不懂HTTPS中的内容，总结，<strong>如果是处理HTTP,HTTPS 还是用Fiddler, 其他协议比如TCP,UDP就用wireshark.</strong></p>
<h6 id="1-wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考："><a href="#1-wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：" class="headerlink" title="1.wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考："></a>1.wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：</h6><ul>
<li><code>http://blog.csdn.net/lina_acm/article/details/53404429</code></li>
<li><code>http://www.cnblogs.com/dragonir/p/6219541.html</code></li>
<li><code>http://www.9upk.com/article/2537.html</code></li>
<li><code>http://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html</code></li>
<li><code>http://blog.jobbole.com/70907/</code>(一站式学习系列文章可以参考)</li>
</ul>
<a id="more"></a>
<h6 id="2-比较详细的wireshark过滤规则"><a href="#2-比较详细的wireshark过滤规则" class="headerlink" title="2.比较详细的wireshark过滤规则"></a>2.比较详细的wireshark过滤规则</h6><ul>
<li><code>http://blog.csdn.net/hzhsan/article/details/43453251</code></li>
</ul>
<h6 id="3-比较详细的wireshark使用教程文档"><a href="#3-比较详细的wireshark使用教程文档" class="headerlink" title="3.比较详细的wireshark使用教程文档"></a>3.比较详细的wireshark使用教程文档</h6><ul>
<li><code>链接：http://pan.baidu.com/s/1nvCv52p 密码：s1vd</code></li>
</ul>
<h6 id="4-以上的资料就是介绍了wireshark的基本用法，下面的视频教程讲解wireshark更加的详细，有时间的话可以学习下："><a href="#4-以上的资料就是介绍了wireshark的基本用法，下面的视频教程讲解wireshark更加的详细，有时间的话可以学习下：" class="headerlink" title="4.以上的资料就是介绍了wireshark的基本用法，下面的视频教程讲解wireshark更加的详细，有时间的话可以学习下："></a>4.以上的资料就是介绍了wireshark的基本用法，下面的视频教程讲解wireshark更加的详细，有时间的话可以学习下：</h6><ul>
<li><code>http://edu.51cto.com/lesson/id-62644.html</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 　 　wireshark是非常流行的网络封包分析软件，功能十分强大。可以截取各种网络封包，显示网络封包的详细信息。使用wireshark的人必须了解网络协议，否则就看不懂wireshark了。为了安全考虑，wireshark只能查看封包，而不能修改封包的内容，或者发送封包。wireshark能获取HTTP，也能获取HTTPS，但是不能解密HTTPS，所以wireshark看不懂HTTPS中的内容，总结，&lt;strong&gt;如果是处理HTTP,HTTPS 还是用Fiddler, 其他协议比如TCP,UDP就用wireshark.&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&quot;1-wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：&quot;&gt;&lt;a href=&quot;#1-wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：&quot; class=&quot;headerlink&quot; title=&quot;1.wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：&quot;&gt;&lt;/a&gt;1.wireshark是搞IT经常用到的一个工具，主要整理了一下一些资料可供参考：&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://blog.csdn.net/lina_acm/article/details/53404429&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://www.cnblogs.com/dragonir/p/6219541.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://www.9upk.com/article/2537.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://blog.jobbole.com/70907/&lt;/code&gt;(一站式学习系列文章可以参考)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Wireshark" scheme="http://harmansecurity.cn/tags/Wireshark/"/>
    
      <category term="抓包分析" scheme="http://harmansecurity.cn/tags/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>解决端口被占用</title>
    <link href="http://harmansecurity.cn/2017/02/10/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://harmansecurity.cn/2017/02/10/解决端口被占用/</id>
    <published>2017-02-10T12:45:13.000Z</published>
    <updated>2017-02-10T13:09:34.114Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-开始—-gt-运行—-gt-cmd，调出命令窗口"><a href="#1-开始—-gt-运行—-gt-cmd，调出命令窗口" class="headerlink" title="1.开始—-&gt;运行—-&gt;cmd，调出命令窗口"></a>1.开始—-&gt;运行—-&gt;cmd，调出命令窗口</h5><h5 id="2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。"><a href="#2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。" class="headerlink" title="2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。"></a>2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。</h5><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A81.png" alt=""><br></div>

<h5 id="3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“4000”，回车，记下最后一位数字，即PID-这里是372"><a href="#3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“4000”，回车，记下最后一位数字，即PID-这里是372" class="headerlink" title="3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “4000”，回车，记下最后一位数字，即PID,这里是372"></a>3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “4000”，回车，记下最后一位数字，即PID,这里是372</h5><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A82.png" alt=""><br></div>

<a id="more"></a>
<h5 id="4-继续输入tasklist-findstr-“372”，回车，查看是哪个进程或者程序占用了372端口"><a href="#4-继续输入tasklist-findstr-“372”，回车，查看是哪个进程或者程序占用了372端口" class="headerlink" title="4.继续输入tasklist|findstr “372”，回车，查看是哪个进程或者程序占用了372端口"></a>4.继续输入tasklist|findstr “372”，回车，查看是哪个进程或者程序占用了372端口</h5><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A83.png" alt=""><br></div>

<h5 id="5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-nvvsvc-exe"><a href="#5-结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill-f-t-im-nvvsvc-exe" class="headerlink" title="5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im nvvsvc.exe"></a>5.结束该进程：在任务管理器中选中该进程点击”结束进程“按钮，或者是在cmd的命令窗口中输入：taskkill /f /t /im nvvsvc.exe</h5><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A84.png" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-开始—-gt-运行—-gt-cmd，调出命令窗口&quot;&gt;&lt;a href=&quot;#1-开始—-gt-运行—-gt-cmd，调出命令窗口&quot; class=&quot;headerlink&quot; title=&quot;1.开始—-&amp;gt;运行—-&amp;gt;cmd，调出命令窗口&quot;&gt;&lt;/a&gt;1.开始—-&amp;gt;运行—-&amp;gt;cmd，调出命令窗口&lt;/h5&gt;&lt;h5 id=&quot;2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。&quot;&gt;&lt;a href=&quot;#2-输入命令：netstat-ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。&quot; class=&quot;headerlink&quot; title=&quot;2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。&quot;&gt;&lt;/a&gt;2.输入命令：netstat -ano，列出所有端口的情况。在列表中我们观察被占用的端口，比如是4000，首先找到它。&lt;/h5&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A81.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“4000”，回车，记下最后一位数字，即PID-这里是372&quot;&gt;&lt;a href=&quot;#3-查看被占用端口对应的PID，输入命令：netstat-aon-findstr-“4000”，回车，记下最后一位数字，即PID-这里是372&quot; class=&quot;headerlink&quot; title=&quot;3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “4000”，回车，记下最后一位数字，即PID,这里是372&quot;&gt;&lt;/a&gt;3.查看被占用端口对应的PID，输入命令：netstat -aon|findstr “4000”，回车，记下最后一位数字，即PID,这里是372&lt;/h5&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A82.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="端口占用" scheme="http://harmansecurity.cn/tags/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Http抓包与调试(Fiddler)</title>
    <link href="http://harmansecurity.cn/2017/02/09/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95(Fiddler)/"/>
    <id>http://harmansecurity.cn/2017/02/09/Http抓包与调试(Fiddler)/</id>
    <published>2017-02-09T13:19:07.000Z</published>
    <updated>2017-02-10T09:10:30.869Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、什么是Fiddler？"><a href="#一、什么是Fiddler？" class="headerlink" title="一、什么是Fiddler？"></a>一、什么是Fiddler？</h4><p>　 　1.Fiddler是位于客户端和服务器端的HTTP代理，也是目前最常用的http抓包工具之一。它能够记录客户端和服务器之间的所有HTTP请求，可以针对特定的HTTP请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。既然是代理，也就是说：客户端的所有请求都要先经过Fiddler，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过Fiddler然后发送到客户端，基于这个原因，Fiddler支持所有可以设置http代理为 127.0.0.1:8888 的浏览器和应用程序。<br>使用了Fiddler之后，web客户端和服务器的请求如下所示:</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%291.png" alt=""><br></div><br>　 　2.Fiddler 作为系统代理，当启用Fiddler时，IE的PROXY设定会变成 127.0.0.1:8888，因此如果你的浏览器在开启fiddler之后没有设置相应的代理，则fiddler是无法捕获到HTTP请求的。如下是启动Fiddler之后，IE浏览器的代理设置：<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%292.png" alt=""><br></div><br><a id="more"></a><br>　 　3.以Firefox为例，默认情况下，firefox是没有启用代理的（如果你安装了proxy等代理工具或插件，是另外一种情况），在firefox中配置http代理的步骤如下：工具-&gt;选项-&gt;高级-&gt;网络-&gt;设置。并配置相应的代理如下就可以使用Fiddler抓取Firefox的HTTP请求了。<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%293.png" alt=""><br></div>

<hr>
<h4 id="二、Fiddler使用界面简介"><a href="#二、Fiddler使用界面简介" class="headerlink" title="二、Fiddler使用界面简介"></a>二、Fiddler使用界面简介</h4><p>Fiddler主界面的布局如下：</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%294.png" alt=""><br></div>

<h6 id="主界面中主要包括四个常用的块："><a href="#主界面中主要包括四个常用的块：" class="headerlink" title="主界面中主要包括四个常用的块："></a>主界面中主要包括四个常用的块：</h6><ul>
<li>Fiddler的菜单栏，上图绿色部分。包括捕获http请求，停止捕获请求，保存http请求，载入本地session、设置捕获规则等功能。</li>
<li>Fiddler的工具栏,上图红色部分。<code>Replay：回放按钮;</code> <code>X：清空监控面板；</code> <code>Go：调试Debug；</code> <code>Stream：模式切换；（流模式与缓冲模式）</code> <code>Decode：解压请求；</code> <code>Keep session：保持会话；</code> <code>Any Process：过滤请求；（如只查看Chrome的请求）</code> <code>Find：查找；</code> <code>Save：保存会话；</code> <code>保存截图；</code> <code>计时器；</code> <code>Browser：快速启动浏览器；</code> <code>TextWizard：编码/解码；（非常常用）</code> <code>Tearoff：分离面板；</code> <code>MSDN Search：MSDN搜索；</code></li>
<li>web Session面板，上图黄色区域，主要是Fiddler抓取到的每条http请求（每一条称为一个session）,主要包含了请求的url，协议，状态码，body等信息，详细的字段含义如下图所示：<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%295.png" alt=""><br></div></li>
<li>详情和数据统计面板。针对每条http请求的具体统计（例如发送/接受字节数，发送/接收时间，还有粗略统计世界各地访问该服务器所花费的时间）和数据包分析。如inspector面板下，提供headers、textview、hexview,Raw等多种方式查看单条http请求的请求报文的信息：<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%296.png" alt=""><br></div><br>而composer面板下，则可以模拟向相应的服务器发送数据的过程（这就是灌水机器人的基本原理,也可以是部分http flood的一种方式）。<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%297.png" alt=""><br></div><br>也可以粘贴一次请求的raw http headers,达到模拟请求的目的：<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%298.png" alt=""><br></div>

</li>
</ul>
<hr>
<h4 id="三、Fiddler内置命令"><a href="#三、Fiddler内置命令" class="headerlink" title="三、Fiddler内置命令"></a>三、Fiddler内置命令</h4><p>　 　为了更加方便的管理所有的session, Fiddler提供了一系列内置的函数用于筛选和操作这些session.输入命令的位置在websession管理面板的下方（通过快捷键alt+q可以focus到命令行）.<br>Fiddler内置的命令有如下几种：</p>
<h6 id="1-select命令。"><a href="#1-select命令。" class="headerlink" title="1. select命令。"></a>1. select命令。</h6><p>选择所有相应类型（指content-type）为指定类型的HTTP请求，如选择图片，使用命令<code>select image</code>.而<code>select css</code>则可以选择所有相应类型为css的请求，<code>select html</code>则选择所有响应为HTML的请求（怎么样，是不是跟SQL语句很像？）。如图是执行<code>select image</code>之后的结果：</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%299.png" alt=""><br></div>

<h6 id="2-allbut命令。"><a href="#2-allbut命令。" class="headerlink" title="2. allbut命令。"></a>2. allbut命令。</h6><p>allbut命令用于选择所有响应类型不是给定类型的HTTP请求。如allbut image用于选择所有相应类型不是图片的session(HTTP请求)，该命令还有一个别名keeponly.需要注意的是，keeponly和allbut命令是将不是该类型的session删除，留下的都是该类型的响应。因此，如果你执行allbut xxxx（不存在的类型），实际上类似与执行cls命令（删除所有的session, ctrl+x快捷键也是这个作用）</p>
<h6 id="3-text命令"><a href="#3-text命令" class="headerlink" title="3. ?text命令"></a>3. ?text命令</h6><p>选择所有 URL 匹配问号后的字符的全部 session</p>
<h6 id="4-gt-size-和-lt-size命令"><a href="#4-gt-size-和-lt-size命令" class="headerlink" title="4. &gt;size 和 &lt;size命令"></a>4. &gt;size 和 &lt;size命令</h6><p>选择响应大小大于某个大小（单位是b）或者小于某个大小的所有HTTP请求</p>
<h6 id="5-status命令"><a href="#5-status命令" class="headerlink" title="5. =status命令"></a>5. =status命令</h6><p>选择响应状态等于给定状态的所有HTTP请求。<br><br>例如，选择所有状态为200的HTTP请求：=200<br></p>
<h6 id="6-host命令"><a href="#6-host命令" class="headerlink" title="6. @host命令"></a>6. @host命令</h6><p>选择包含指定 HOST 的全部 HTTP请求。例如：@csdn.net<br><br>选择所有host包含csdn.net的请求<br></p>
<h6 id="7-Bpafter，-Bps-bpv-bpm-bpu"><a href="#7-Bpafter，-Bps-bpv-bpm-bpu" class="headerlink" title="7. Bpafter， Bps, bpv, bpm, bpu"></a>7. Bpafter， Bps, bpv, bpm, bpu</h6><p>这几个命令主要用于批量设置断点：<br><br>Bpafter xxx: 中断 URL 包含指定字符的全部 session 响应<br><br>Bps xxx: 中断 HTTP 响应状态为指定字符的全部 session 响应。<br><br>Bpv xxx: 中断指定请求方式的全部 session 响应<br><br>Bpm xxx: 中断指定请求方式的全部 session 响应。等同于bpv xxx<br><br>Bpu xxx:与bpafter类似。<br><br>当这些命令没有加参数时，会清空所有设置了断点的HTTP请求。<br></p>
<hr>
<h4 id="四、Fiddler抓包分析"><a href="#四、Fiddler抓包分析" class="headerlink" title="四、Fiddler抓包分析"></a>四、Fiddler抓包分析</h4><p>　 　抓包是Fiddler的最基本的应用，在Fiddler的web session界面捕获到HTTP请求。各字段的详细说明已经解释过，这里不再说明。需要注意的是#号列中的图标，每种图标代表不同的相应类型，具体的类型包括：</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2910.png" alt=""><br></div><br>另外，注意请求的host字段。可以看到有来自多个www.csdn.net的子域名的响应，说明在大型网站的架构中，大多需要多个子域名，这些子域名可能是单独用于缓存静态资源的，也可能是专门负责媒体资源的，或者是专门负责数据统计的（如pingback）。<br><em>右键单击其中的一条请求。可以选择的操作有：save(保存请求的报文信息，可以是请求报文，可以是响应报文)。</em><br><em>如果想要重新发送某些请求，可以选中这些请求，然后点击工具栏中的reply.就可以重新发送选中的这些请求。</em><br><strong>左键点击单条HTTP请求，可以在右侧的tab面板中看到如下信息：</strong><br><br><strong>(1). Statistic。</strong><br>关于HTTP请求的性能和其他数据分析，使用Statistics页签，用户可以通过选择多个会话来得来这几个会话的总的信息统计，比如多个请求和传输的字节数。选择第一个请求和最后一个请求，可获得整个页面加载所消耗的总体时间。从条形图表中还可以分别出哪些请求耗时最多，从而对页面的访问进行访问速度优化。<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2911.png" alt=""><br></div>

<p><strong>(2). Inspectors。</strong><br>分为上下两个部分，上半部分是请求头部分，下半部分是响应头部分。对于每一部分，提供了多种不同格式查看每个请求和响应的内容。JPG 格式使用 ImageView 就可以看到图片，HTML/JS/CSS 使用 TextView可以看到响应的内容。Raw标签可以查看原始的符合HTTP标准的请求和响应头。Auth则可以查看授权Proxy-Authorization和Authorization的相关信息。Cookies标签可以看到请求的cookie和响应的set-cookie头信息。</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2912.png" alt=""><br></div>

<ul>
<li>Http Request Header<h6 id="Cache-头域"><a href="#Cache-头域" class="headerlink" title="Cache 头域"></a>Cache 头域</h6>If-Modified-Since作用：把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端 就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。例如：If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2913.png" alt=""><br></div><br>If-None-Match作用: If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用 本地缓存文件。否则将返回200状态和新的资源和Etag.  使用这样的机制将提高网站的性能例如: If-None-Match: “03f2b33c0bfcc1:0”<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2914.png" alt=""><br></div><br>Pragma作用：防止页面被缓存， 在HTTP/1.1版本中，它和Cache-Control:no-cache作用一模一样。Pargma只有一个用法，例如：Pragma: no-cache.<br>注意: 在HTTP/1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control。Cache-Control作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的缓存机制。各个指令含义如下</li>
</ul>
<p>Cache-Control:Public   可以被任何缓存所缓存（）</p>
<p>Cache-Control:Private     内容只缓存到私有缓存中</p>
<p>Cache-Control:no-cache  所有内容都不会被缓存</p>
<h4 id="Client-头域"><a href="#Client-头域" class="headerlink" title="Client 头域"></a>Client 头域</h4><p> Accept: text/html代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,如果服务器无法返回text/html类型的数据，服务器应该返回一个406错误(non acceptable)。</p>
<p> Accept: <em>/</em>  代表浏览器可以处理所有类型，(一般浏览器发给服务器都是发这个)。</p>
<p> Accept-Encoding：作用：浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）。</p>
<p>Accept-Language作用： 浏览器申明自己接收的语言。 </p>
<p>User-Agent作用：告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本.我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览 器和其它属性告诉服务器。</p>
<p>Accept-Charset作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）</p>
<h6 id="Cookie-Login-头域"><a href="#Cookie-Login-头域" class="headerlink" title="Cookie/Login 头域"></a>Cookie/Login 头域</h6><p>Cookie:作用：最重要的header, 将cookie的值发送给HTTP 服务器</p>
<h6 id="Entity头域"><a href="#Entity头域" class="headerlink" title="Entity头域"></a>Entity头域</h6><p>Content-Length作用：发送给HTTP服务器数据的长度。</p>
<p>Content-Type: application/x-www-form-urlencoded</p>
<h6 id="Miscellaneous-头域"><a href="#Miscellaneous-头域" class="headerlink" title="Miscellaneous 头域"></a>Miscellaneous 头域</h6><p>Referer:作用：提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>
<h6 id="Transport-头域"><a href="#Transport-头域" class="headerlink" title="Transport 头域"></a>Transport 头域</h6><p>Connection</p>
<p>例如：Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>
<p>例如：Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>
<p>Host（发送请求时，该报头域是必需的）作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的。例如: 我们在浏览器中输入：<code>http://www.guet.edu.cn/index.html</code>。浏览器发送的请求消息中，就会包含Host请求报头域，如下：<code>Host：http://www.guet.edu.cn</code>此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p>
<p><strong>(3). AutoResponder。</strong><br>Fiddler比较重要且比较强大的功能之一。可用于拦截某一请求，并重定向到本地的资源，或者使用Fiddler的内置响应。可用于调试服务器端代码而无需修改服务器端的代码和配置，因为拦截和重定向后，实际上访问的是本地的文件或者得到的是Fiddler的内置响应。当勾选EnableRules并设置相应的规则后（本例中的规则是将<code>http://www.cnblogs.com/HYanqing/p/5294968.html</code>的请求拦截到本地的文件）,如下图所示:</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2915.png" alt=""><br></div><br>然后在浏览器中访问<code>http://www.cnblogs.com/HYanqing/p/5294968.html</code>，得到的结果实际为本地的网页。说明请求已经成功被拦截到本地.当然也可以使用Fiddler的内置响应。因此如果要调试服务器的某个脚本文件，可以将该脚本拦截到本地，在本地修改完脚本之后，再修改服务器端的内容，这可以保证，尽量在真实的环境下去调试，从而最大限度的减少bug发生的可能性。<br><br>不仅是单个url，Fiddler支持多种url匹配的方式：<br><br>I. 字符匹配<br><br>如 example可以匹配 <code>http://www.example.com</code>和<code>http://example.com.cn</code><br><br>II. 完全匹配<br><br>以EXACT开头表示完全匹配，如上边的例子<br><br>EXACT:<code>http://www.cnblogs.com/HYanqing/p/5294968.html</code><br><br>III. 正则表达式匹配<br><br>以regex: 开头，使用正则表达式来匹配URL.如：<code>regex:(?insx).*\.(css|js|php)$</code>  表示匹配所有以css,js,php结尾的请求url<br><br><strong>(4). Composer。（模拟请求）</strong><br>老版本的fiddler中叫request-builder.顾名思义，可以构建相应的请求，有两种常用的方式构建请求:<br><br>(1)Parsed 输入请求的url之后executed即可，也可以修改相应的头信息（如添加常用的accept, host, referrer, cookie，cache-control等头部）后execute.这个功能的常见应用是：“刷票”（不是火车票！！），如刷新页面的访问量。<br><br>(2)Raw。使用HTTP头部信息构建http请求。与上类似。不多叙述<br><br><strong>(5). Filter。</strong><br>Fiddler另一个比较强大的功能。Fiddler提供了多维度的过滤规则，足以满足日常开发调试的需求。<br><br>过滤规则有：<br><br>a. host和zone过滤。可以过滤只显示intranet或则internet的HTTP请求。也可以选择特定域名的HTTP请求。<br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2916.png" alt=""><br></div><br>b. client process:可以捕获指定进程的请求。这对于调试单个应用的请求很有帮助。<br><br><strong>五、Fiddler中设置断点修改Request</strong><br>　 　Fiddler最强大的功能莫过于设置断点了，设置好断点后，你可以修改httpRequest的任何信息包括host,cookie或者表单中的数据。设置断点有两种方法：<br><br>第一种：打开Fiddler 点击Rules-&gt; Automatic Breakpoint  -&gt;Before Requests(这种方法会中断所有的会话)<br><br>如何消除命令呢？  点击Rules-&gt; Automatic Breakpoint  -&gt;Disabled<br><br>第二种:  在命令行中输入命令:  bpu www.baidu.com   (这种方法只会中断www.baidu.com)<br><br>如何消除命令呢？  在命令行中输入命令 bpu<br><br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2917.jpg" alt=""><br></div><br>看个实例，模拟麦子学院的登录，在火狐中打开麦子学院的登录页面，输入错误的用户名和密码，用Fiddler中断会话，修改成正确的用户名密码。这样就能成功登录：<br><br>1. 用火狐打开麦子学院的登录界面  <code>http://www.maiziedu.com/</code><br><br>2. 打开Fiddler,  在命令行中输入bpu <code>http://www.maiziedu.com/</code><br><br>3. 输入错误的用户名和密码，点击登录<br><br>4. Fiddler 能中断这次会话，选择被中断的会话，点击Inspectors tab下的WebForms tab 修改用户名密码，然后点击Run to Completion 如下图所示:<br><br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2918.png" alt=""><br></div><br>5. 结果是正确地登录了麦子学院<br><br><strong>六、Fiddler中设置断点修改Response</strong><br>当然Fiddler中也能修改Response：<br><br>第一种：打开Fiddler 点击Rules-&gt; Automatic Breakpoint  -&gt;After Response  (这种方法会中断所有的会话)<br><br>如何消除命令呢？  点击Rules-&gt; Automatic Breakpoint  -&gt;Disabled<br><br>第二种:  在命令行中输入命令:  bpuafter www.baidu.com   (这种方法只会中断www.baidu.com)<br><br>如何消除命令呢？  在命令行中输入命令 bpuafter<br><br><div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2919.jpg" alt=""><br></div>

<hr>
<h4 id="七、Watcher-安全扫描工具，第三方扩展"><a href="#七、Watcher-安全扫描工具，第三方扩展" class="headerlink" title="七、Watcher(安全扫描工具，第三方扩展)"></a>七、Watcher(安全扫描工具，第三方扩展)</h4><p>　 　Watcher是一个实时的，被动分析基于HTTP协议的Web应用程序的安全工具(Fiddler插件)。所谓被动分析就是指它不会对现有系统产生任何破坏。Watcher可以被安全的用于分布式网络，共享式网络和专用宿主网络。Watcher能够自动检查这些问题：cookie设置、SSL配置、信息泄露等。另外，Watcher是一个非常好的HTTP协议调试工具，不过，它的HTTP调试功能是以Fiddler插件方式工作的。总之，Watcher是一个很好的渗透测试工具，有助于渗透测试人员的渗透测试工作。</p>
<div align="center"><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%2920.png" alt=""><br></div>

<hr>
<h4 id="八、参考文献"><a href="#八、参考文献" class="headerlink" title="八、参考文献"></a>八、参考文献</h4><ul>
<li><code>http://www.cnblogs.com/HYanqing/p/5294968.html</code></li>
<li><code>http://blog.csdn.net/ohmygirl/article/details/17846199</code></li>
<li><code>http://blog.csdn.net/ohmygirl/article/details/17849983</code></li>
<li><code>http://www.imooc.com/course/note/id/37?sort=last&amp;page=1</code></li>
<li><code>http://www.freebuf.com/sectool/6770.html</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、什么是Fiddler？&quot;&gt;&lt;a href=&quot;#一、什么是Fiddler？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Fiddler？&quot;&gt;&lt;/a&gt;一、什么是Fiddler？&lt;/h4&gt;&lt;p&gt;　 　1.Fiddler是位于客户端和服务器端的HTTP代理，也是目前最常用的http抓包工具之一。它能够记录客户端和服务器之间的所有HTTP请求，可以针对特定的HTTP请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。既然是代理，也就是说：客户端的所有请求都要先经过Fiddler，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过Fiddler然后发送到客户端，基于这个原因，Fiddler支持所有可以设置http代理为 127.0.0.1:8888 的浏览器和应用程序。&lt;br&gt;使用了Fiddler之后，web客户端和服务器的请求如下所示:&lt;/p&gt;
&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%291.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;　 　2.Fiddler 作为系统代理，当启用Fiddler时，IE的PROXY设定会变成 127.0.0.1:8888，因此如果你的浏览器在开启fiddler之后没有设置相应的代理，则fiddler是无法捕获到HTTP请求的。如下是启动Fiddler之后，IE浏览器的代理设置：&lt;br&gt;&lt;div align=center&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95%28Fiddler%292.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Http抓包与调试" scheme="http://harmansecurity.cn/tags/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    
      <category term="Fiddler" scheme="http://harmansecurity.cn/tags/Fiddler/"/>
    
      <category term="浏览器代理" scheme="http://harmansecurity.cn/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%A3%E7%90%86/"/>
    
      <category term="拦截请求或响应" scheme="http://harmansecurity.cn/tags/%E6%8B%A6%E6%88%AA%E8%AF%B7%E6%B1%82%E6%88%96%E5%93%8D%E5%BA%94/"/>
    
      <category term="抓包和重放" scheme="http://harmansecurity.cn/tags/%E6%8A%93%E5%8C%85%E5%92%8C%E9%87%8D%E6%94%BE/"/>
    
  </entry>
  
  <entry>
    <title>Http抓包与调试(Firefox插件)</title>
    <link href="http://harmansecurity.cn/2017/01/19/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95(Firefox%E6%8F%92%E4%BB%B6)/"/>
    <id>http://harmansecurity.cn/2017/01/19/Http抓包与调试(Firefox插件)/</id>
    <published>2017-01-19T08:22:55.000Z</published>
    <updated>2017-01-19T12:45:56.850Z</updated>
    
    <content type="html"><![CDATA[<p>　 　这边主要介绍火狐的几款插件工具分别是Firebug、TamperData、LiveHttpHeaders、Hackbar和ModifyHeaders，它们可以用来测试和发掘Web应用程序中的跨站漏洞。</p>
<hr>
<h4 id="1-Firebug-抓包与各种调试"><a href="#1-Firebug-抓包与各种调试" class="headerlink" title="1.Firebug(抓包与各种调试)"></a>1.Firebug(抓包与各种调试)</h4><p>　 　Firebug是Firefox浏览器的一个扩展插件，可以动态修改html代码、探索DOM结构、监视网络请求和响应、调试和监测任何页面的CSS、HTML和JavaScript等等。</p>
<h5 id="1-安装城成功后按F12启动Firebug"><a href="#1-安装城成功后按F12启动Firebug" class="headerlink" title="1)安装城成功后按F12启动Firebug"></a>1)安装城成功后按F12启动Firebug</h5><p>　 　打开Firebug后，看到六个标签按钮分别是（控制台、HTML查看器、CSS查看器、脚本调试器、DOM查看器、网络状况监视器）。</p>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%951.png" alt=""></p>
<h5 id="2-控制台"><a href="#2-控制台" class="headerlink" title="2)控制台"></a>2)控制台</h5><p>　 　控制台能够显示当前页面中的JavaScript错误以及警告，并提示出错的文件和行号，使用控制台可以测试一段代码或者函数的执行时间。启用控制台，在窗口的底部能看到命令行输入，以“&gt;”开头，在这里输入JavaScript代码后按Enter键即可执行。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%952.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%953.png" alt=""><br><a id="more"></a></p>
<h5 id="3-动态修改HTML元素"><a href="#3-动态修改HTML元素" class="headerlink" title="3)动态修改HTML元素"></a>3)动态修改HTML元素</h5><p>　 　Frebug可以显示脚本输出的最终源代码，而html查看器只能显示页面本身的源代码。单击查看页面元素按钮，当光标停留在某个元素上时，浏览器会高亮显示对应元素，可以对页面文本节点进行修改，其修改结果马上回反映到浏览器窗口。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%954.png" alt=""></p>
<h5 id="4-查看网络状况"><a href="#4-查看网络状况" class="headerlink" title="4)查看网络状况"></a>4)查看网络状况</h5><p>　 　将Frebug的当前标签切换到“网络”，该标签用来监控网络流量。如果通过XMLHttpRequest对象向服务器端发出一个请求，Firebug会记录该请求的GET或者POST内容，以及回应的头信息和内容。Firebug也能将页面中的CSS、JavaScript以及网页中引用的图片载入所消耗的时间以矩状图显示出来，通过右键就可以复制文件地址、HTTP请求头的信息和响应头信息等等。以登录麦子学院网站为例，惊奇的发现它的账号和密码都是明文传输。:)<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%955.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%956.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%957.png" alt=""></p>
<h5 id="5-DOM查看器"><a href="#5-DOM查看器" class="headerlink" title="5)DOM查看器"></a>5)DOM查看器</h5><p>　 　DOM包含了大量的对象以及函数，事件，通过使用Firebug可以检查当前打开程序的各个部分。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%958.png" alt=""></p>
<hr>
<h4 id="2-Tamper-Data-拦截修改"><a href="#2-Tamper-Data-拦截修改" class="headerlink" title="2.Tamper Data(拦截修改)"></a>2.Tamper Data(拦截修改)</h4><p>　 　当测试Web应用程序的安全性的时候，经常会需要对HTTP流量进行分析和动态的修改，这时就需要用到这款工具。安装成功后，在Firefox的工具栏打开，随后在浏览网页的时候发出的每一个Http请求及其对应的响应都会被Tamper Data记录下来。</p>
<h5 id="1-Tamper-Data界面主要是由三部分组成"><a href="#1-Tamper-Data界面主要是由三部分组成" class="headerlink" title="1)Tamper Data界面主要是由三部分组成"></a>1)Tamper Data界面主要是由三部分组成</h5><ul>
<li>第一部分：（上方）HTTP请求概要信息</li>
<li>第二部分：（左下方）显示出对应的HTTP请求的头部信息</li>
<li>第三部分：（右下方）显示出对应的HTTP响应</li>
</ul>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%959.png" alt=""></p>
<h5 id="2-查看细节、源码信息以及网页打开时间"><a href="#2-查看细节、源码信息以及网页打开时间" class="headerlink" title="2)查看细节、源码信息以及网页打开时间"></a>2)查看细节、源码信息以及网页打开时间</h5><p>　 　在主窗口的第一部分单击鼠标右键，此时可以查看细节、源代码信息，单击【GraphAll】按钮，会以图形的方式直观地显示每个页面元素及其打开它们所花的时间。</p>
<h5 id="3-Http请求截取"><a href="#3-Http请求截取" class="headerlink" title="3)Http请求截取"></a>3)Http请求截取</h5><p>　 　在Tamper Data中选择StartTamper菜单项，便开启了对HTTP请求的截取，此时浏览器发出的每一个请求，TamperData都会截取。在开启该功能后单击网页上的任意超链接，便可以看到浏览器弹出一个对话框，然后单击【Tamper】按钮，会弹出一个“TamperPopup”窗口，这个窗口显示了HTTP请求的各种头信息，可以在此随意修改或者添加其他合法的HTTP请求头部字段或POST参数。</p>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9510.png" alt=""></p>
<hr>
<h4 id="3-Live-HTTP-Headers-重放功能"><a href="#3-Live-HTTP-Headers-重放功能" class="headerlink" title="3.Live HTTP Headers(重放功能)"></a>3.Live HTTP Headers(重放功能)</h4><p>　 　Live HTTP Headers是一款用来分析HTTP流量的Firefox扩展插件，直接在火狐浏览器里面搜索即可安装。</p>
<ul>
<li>窗口底部有一个“capture”复选框，选中后可以使LIVE HTTP Headers 停止向下滚动，以便对已经产生的通信流量进行分析<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9511.png" alt=""></li>
<li>在主窗口选择其中一段请求，然后单击窗口底部的“Replay”按钮会弹出窗口，可对请求进行各种修改，修改后再次单击“replay”可重放请求。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9512.png" alt=""></li>
</ul>
<hr>
<h4 id="4-Hackbar-编码解码-POST提交"><a href="#4-Hackbar-编码解码-POST提交" class="headerlink" title="4.Hackbar(编码解码/POST提交)"></a>4.Hackbar(编码解码/POST提交)</h4><p>　 　HackBar是firefox浏览器上的一个插件,安装方法跟之前的几个插件一样。HackBar其实是一个小工具包，包含一些黑客常用的工具。比如SQL injection,XSS,加密等!功能很多可以下载下来去尝试一下。</p>
<ul>
<li>load url是将地址栏中的网络复制到hackbar中</li>
<li>在sql注入中有一个联合查询，比如字段数是11要是手工的话我们打出union select 1,2,3,4,5,6,7,8,9,10,11这样感觉有点麻烦。通过hackbar的sql选项里面的unionselectstatement在其中输入字段数，hackbar会自动的帮助我们输入那一大串文字。</li>
<li>我们可以对url进行各种编码操作，我们可以在endoding选项下进行url、16进制、base64进行编码解码，可以在xss选项下进行html实体编码，在sql选项下进行空格编码。</li>
<li>在encryption选项中我们可以进行md5,sha1，sha256，rot13加密，单击里面的选项，在弹出的对话框中输入要加密的数据。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9513.png" alt=""></li>
</ul>
<hr>
<h4 id="5-Modify-Headers-修改头部"><a href="#5-Modify-Headers-修改头部" class="headerlink" title="5.Modify Headers(修改头部)"></a>5.Modify Headers(修改头部)</h4><p>　 　这个插件的主要作用是对Firefox的HTTP request headers进行添加、修改和过滤等操作。当我们访问网站的时候，某些网站服务器会对访问网站的浏览器Header信息进行判断，然后决定用什么方式把网站内容呈现给浏览器。服务器也会根据浏览器的header中包含的其他信息（譬如浏览器所在的IP地址）判断是否要讲某一特定的信息呈现给浏览器。</p>
<ul>
<li>选择Add，右边的HeaderName,HeaderValue和DescriptiveComment等字段都会变得可编辑。由于我们要模拟不同地域的IP对网站进行访问(伪造IP地址)，所以HeaderName字段中，我们填入<code>X-Forwarded-For</code>。Header value中，填入你要模拟的地域IP地址，然后在Descriptive comment中填上备注就好。</li>
<li>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。修改User-Agent来模拟用iPhone访问网站。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9514.png" alt=""></li>
<li>伪造IP地址和修改了User Agent，看一下访问百度的请求头信息发生了什么变化。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9515.png" alt=""></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　这边主要介绍火狐的几款插件工具分别是Firebug、TamperData、LiveHttpHeaders、Hackbar和ModifyHeaders，它们可以用来测试和发掘Web应用程序中的跨站漏洞。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-Firebug-抓包与各种调试&quot;&gt;&lt;a href=&quot;#1-Firebug-抓包与各种调试&quot; class=&quot;headerlink&quot; title=&quot;1.Firebug(抓包与各种调试)&quot;&gt;&lt;/a&gt;1.Firebug(抓包与各种调试)&lt;/h4&gt;&lt;p&gt;　 　Firebug是Firefox浏览器的一个扩展插件，可以动态修改html代码、探索DOM结构、监视网络请求和响应、调试和监测任何页面的CSS、HTML和JavaScript等等。&lt;/p&gt;
&lt;h5 id=&quot;1-安装城成功后按F12启动Firebug&quot;&gt;&lt;a href=&quot;#1-安装城成功后按F12启动Firebug&quot; class=&quot;headerlink&quot; title=&quot;1)安装城成功后按F12启动Firebug&quot;&gt;&lt;/a&gt;1)安装城成功后按F12启动Firebug&lt;/h5&gt;&lt;p&gt;　 　打开Firebug后，看到六个标签按钮分别是（控制台、HTML查看器、CSS查看器、脚本调试器、DOM查看器、网络状况监视器）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%951.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-控制台&quot;&gt;&lt;a href=&quot;#2-控制台&quot; class=&quot;headerlink&quot; title=&quot;2)控制台&quot;&gt;&lt;/a&gt;2)控制台&lt;/h5&gt;&lt;p&gt;　 　控制台能够显示当前页面中的JavaScript错误以及警告，并提示出错的文件和行号，使用控制台可以测试一段代码或者函数的执行时间。启用控制台，在窗口的底部能看到命令行输入，以“&amp;gt;”开头，在这里输入JavaScript代码后按Enter键即可执行。&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%952.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%953.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Http抓包与调试" scheme="http://harmansecurity.cn/tags/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    
      <category term="Firebug" scheme="http://harmansecurity.cn/tags/Firebug/"/>
    
      <category term="Tamper Data" scheme="http://harmansecurity.cn/tags/Tamper-Data/"/>
    
      <category term="LiveHttpHeaders" scheme="http://harmansecurity.cn/tags/LiveHttpHeaders/"/>
    
      <category term="Hackbar" scheme="http://harmansecurity.cn/tags/Hackbar/"/>
    
      <category term="Modify Headers" scheme="http://harmansecurity.cn/tags/Modify-Headers/"/>
    
  </entry>
  
  <entry>
    <title>PBC库的常用函数解释</title>
    <link href="http://harmansecurity.cn/2017/01/18/PBC%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E8%A7%A3%E9%87%8A/"/>
    <id>http://harmansecurity.cn/2017/01/18/PBC库的常用函数解释/</id>
    <published>2017-01-18T10:59:57.000Z</published>
    <updated>2017-01-18T11:01:33.657Z</updated>
    
    <content type="html"><![CDATA[<p>　 　PBC库使用G1、G2和GT分别表示双线性映射:<code>e:G1xG2-&gt;GT</code>中的G1、G2和GT，他们的阶都为r。Zr表示模r的整数环。配对运算输入两个元素，一个元素来自群G1，另一个元素来自群G2，输出结果是GT中的一个元素。G1和G2也可以是同一个群，即是一个对称配对，这种情况下它们的元素可以相互混淆使用。</p>
<hr>
<h4 id="1-配对的初始化方式"><a href="#1-配对的初始化方式" class="headerlink" title="1.配对的初始化方式"></a>1.配对的初始化方式</h4><h5 id="1-以标准的方式初始化配对"><a href="#1-以标准的方式初始化配对" class="headerlink" title="1) 以标准的方式初始化配对"></a>1) 以标准的方式初始化配对</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pairing_t</span> pairing;<span class="comment">//声明一个配对类型的变量pairing</span></div><div class="line">pairing_init_inp_str(pairing,<span class="built_in">stdin</span>);<span class="comment">//参数stdin表示配对的输入参数方式为标准输入</span></div></pre></td></tr></table></figure>
<h5 id="2-指定类型的方式初始化配对"><a href="#2-指定类型的方式初始化配对" class="headerlink" title="2) 指定类型的方式初始化配对"></a>2) 指定类型的方式初始化配对</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型A的配对</span></div><div class="line">d_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型D的配对</span></div><div class="line">f_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型F的配对</span></div><div class="line">pairing_clear(pairing);<span class="comment">//调用该函数释放pairing占用的资源</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="2-元素的初始化"><a href="#2-元素的初始化" class="headerlink" title="2.元素的初始化"></a>2.元素的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init</span><span class="params">(<span class="keyword">element_t</span> e,field_ptr f)</span></span>;<span class="comment">//将元素变量e初始化为代数结构f中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_G1</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群G1中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_G2</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群G2中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_GT</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群GT中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_Zr</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群Zr中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_same_as</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">element_t</span> e2)</span></span>;<span class="comment">//将元素变量e初始化为元素变量e2所在的代数结构中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_clear</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//清楚元素变量e并释放其所占用的资源</span></div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h4 id="3-运算函数"><a href="#3-运算函数" class="headerlink" title="3.运算函数"></a>3.运算函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_add</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a+b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_sub</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a-b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=axb</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul_si</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">int</span> z)</span></span>;<span class="comment">//输入a和z，输出n=axz,z是一个长整型数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul_zn</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> z)</span></span>;<span class="comment">//输入a和z，输出n=axz,z是整数环中的一个元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_div</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a/b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_double</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a+a</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_halve</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a/2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_square</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a^2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_neg</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=-a</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_invert</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出a的逆元n</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow_mpz</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a,<span class="keyword">mpz_t</span> n)</span></span>;<span class="comment">//输入a和n，输出x=a^n</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow_zn</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> n)</span></span>;<span class="comment">//输入a和n，输出x=a^n，n是整数环中的元素</span></div><div class="line"><span class="comment">//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow2_mpz</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a1,<span class="keyword">mpz_t</span> n1,<span class="keyword">element_t</span> a2,<span class="keyword">mpz_t</span> n2)</span></span>;</div><div class="line"><span class="comment">//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2,n1,n2是整数环中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow2_zn</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a1,<span class="keyword">element_t</span> n1,<span class="keyword">element_t</span> a2,<span class="keyword">element_t</span> n2)</span></span>;</div></pre></td></tr></table></figure>
<hr>
<h4 id="4-其它函数"><a href="#4-其它函数" class="headerlink" title="4.其它函数"></a>4.其它函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_length_in_bytes</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//获得元素变量e的字节数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_random</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//函数从这个代数结构中均匀随机选择一个元素并赋值给e</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_cmp</span><span class="params">(<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//若变量a和b相等，则函数返回0否则返回1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_to_mpz</span><span class="params">(<span class="keyword">mpz_t</span> z,<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//将元素e转换为一个GMP整数并存储在mpz_t类型的变量z中</span></div><div class="line"><span class="comment">//PBC库中没有提供计算Hash值的函数，这里只是以获得的Hash值作为输入，从中截取一部分表示域中的某个元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_from_hash</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">void</span> * data,<span class="keyword">int</span> len)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * format,...)</span></span>;<span class="comment">//格式化打印元素值</span></div></pre></td></tr></table></figure>
<hr>
<p><em>以上列举了PBC库中的一些常用函数及其代表的意思，如有特殊需求可查阅PBC官方文档。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　PBC库使用G1、G2和GT分别表示双线性映射:&lt;code&gt;e:G1xG2-&amp;gt;GT&lt;/code&gt;中的G1、G2和GT，他们的阶都为r。Zr表示模r的整数环。配对运算输入两个元素，一个元素来自群G1，另一个元素来自群G2，输出结果是GT中的一个元素。G1和G2也可以是同一个群，即是一个对称配对，这种情况下它们的元素可以相互混淆使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-配对的初始化方式&quot;&gt;&lt;a href=&quot;#1-配对的初始化方式&quot; class=&quot;headerlink&quot; title=&quot;1.配对的初始化方式&quot;&gt;&lt;/a&gt;1.配对的初始化方式&lt;/h4&gt;&lt;h5 id=&quot;1-以标准的方式初始化配对&quot;&gt;&lt;a href=&quot;#1-以标准的方式初始化配对&quot; class=&quot;headerlink&quot; title=&quot;1) 以标准的方式初始化配对&quot;&gt;&lt;/a&gt;1) 以标准的方式初始化配对&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing;&lt;span class=&quot;comment&quot;&gt;//声明一个配对类型的变量pairing&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pairing_init_inp_str(pairing,&lt;span class=&quot;built_in&quot;&gt;stdin&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//参数stdin表示配对的输入参数方式为标准输入&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2-指定类型的方式初始化配对&quot;&gt;&lt;a href=&quot;#2-指定类型的方式初始化配对&quot; class=&quot;headerlink&quot; title=&quot;2) 指定类型的方式初始化配对&quot;&gt;&lt;/a&gt;2) 指定类型的方式初始化配对&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;a_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型A的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型D的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型F的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pairing_clear(pairing);&lt;span class=&quot;comment&quot;&gt;//调用该函数释放pairing占用的资源&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;2-元素的初始化&quot;&gt;&lt;a href=&quot;#2-元素的初始化&quot; class=&quot;headerlink&quot; title=&quot;2.元素的初始化&quot;&gt;&lt;/a&gt;2.元素的初始化&lt;/h4&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,field_ptr f)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为代数结构f中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_G1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群G1中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_G2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群G2中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_GT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群GT中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_Zr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群Zr中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_same_as&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e2)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为元素变量e2所在的代数结构中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//清楚元素变量e并释放其所占用的资源&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="PBC" scheme="http://harmansecurity.cn/tags/PBC/"/>
    
      <category term="密码学" scheme="http://harmansecurity.cn/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="双线性配对" scheme="http://harmansecurity.cn/tags/%E5%8F%8C%E7%BA%BF%E6%80%A7%E9%85%8D%E5%AF%B9/"/>
    
  </entry>
  
  <entry>
    <title>VC6.0插件安装</title>
    <link href="http://harmansecurity.cn/2017/01/17/VC6.0%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://harmansecurity.cn/2017/01/17/VC6.0插件安装/</id>
    <published>2017-01-17T06:49:04.000Z</published>
    <updated>2017-01-17T15:33:44.823Z</updated>
    
    <content type="html"><![CDATA[<p>　 　因为PBC源码库的一些函数不是很全，导致用VS写了几个程序只好放弃，而支持VC6.0的PBC库比较全，绕了一圈所以只好转战VC++6.0。VC++6.0是一款很老的工具，不是很人性化，对于我这个深度完美主义者肯定是不能接受的，想方设法使它更适合开发，所以安装了一些插件，使开发效率更高。</p>
<p>我主要安装的插件是:<br>1.Visual studio Boosteer;(源码窗口管理)</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1pJAZApP</code>.</li>
<li>功能:方便查看源码，一页里面可以打开多个C文件。</li>
</ul>
<p>2.Visual assist Options;(强烈推荐)</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1dDh7Mtb</code>.</li>
<li>功能:自动识别各种关键字，系统函数，成员变量，自动给出输入提示，自动更正大小写错误，自动标示错误等等。</li>
</ul>
<p>3.为了解决VC++6.0不能添加和打开文件的功能安装了FileTool。</p>
<ul>
<li>下载地址:<code>http://download.csdn.net/detail/ttfy1234/9696351</code>.</li>
<li>功能:VC6.0在添加和打开文件时经常会崩掉，这个插件就是为了解决这个问题。  </li>
</ul>
<p>4.VC6LineNumberAddin;</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1dD8CfGd</code></li>
<li>功能:VC6.0不自带行号，不方便阅读查找，这个是行号插件。</li>
</ul>
<a id="more"></a>
<p>5.Comment Wizard;</p>
<ul>
<li>下载地址:<code>http://www.cppblog.com/fwxjj/</code>.</li>
<li>功能:Visual C++插件，提供了VC源代码注解标准化与自动化功能。在它的帮助下，您可快速创建标头文件信息注解，文件中模块注解， C++处理方式，以及Ｃ语言功能与历史校正功能注解等等。</li>
</ul>
<p>6.WndTabs+3.20 实现窗口tab效果。</p>
<ul>
<li>下载地址:<code>http://www.wndtabs.com/</code>.</li>
<li>功能:WndTabs主要是在编辑窗口中显示了所有已经打开的文件，在VC中能够更方便的操作这些文件，比如修改文件属性，copy文件路径、文件名等,与第一个VS Booster的功能相近。</li>
</ul>
<p>参考的资料:</p>
<ul>
<li><code>http://blog.csdn.net/cooljun618/article/details/6866798</code></li>
<li><code>http://bbs.csdn.net/topics/390776572</code></li>
</ul>
<p>　 　一个人性化的环境搭好了,下面就是导入项目，官网给的支持VC的PBC源码直接打开有点问题，这边我直接把调通好的源码放在GitHub上面，有需要的人可以去下载，地址是:<code>https://github.com/harmansecurity/PBC-0.4.7-vc6.0</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　因为PBC源码库的一些函数不是很全，导致用VS写了几个程序只好放弃，而支持VC6.0的PBC库比较全，绕了一圈所以只好转战VC++6.0。VC++6.0是一款很老的工具，不是很人性化，对于我这个深度完美主义者肯定是不能接受的，想方设法使它更适合开发，所以安装了一些插件，使开发效率更高。&lt;/p&gt;
&lt;p&gt;我主要安装的插件是:&lt;br&gt;1.Visual studio Boosteer;(源码窗口管理)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1pJAZApP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:方便查看源码，一页里面可以打开多个C文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Visual assist Options;(强烈推荐)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1dDh7Mtb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:自动识别各种关键字，系统函数，成员变量，自动给出输入提示，自动更正大小写错误，自动标示错误等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.为了解决VC++6.0不能添加和打开文件的功能安装了FileTool。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://download.csdn.net/detail/ttfy1234/9696351&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:VC6.0在添加和打开文件时经常会崩掉，这个插件就是为了解决这个问题。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.VC6LineNumberAddin;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1dD8CfGd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能:VC6.0不自带行号，不方便阅读查找，这个是行号插件。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="PBC" scheme="http://harmansecurity.cn/tags/PBC/"/>
    
      <category term="密码学" scheme="http://harmansecurity.cn/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="VC6.0" scheme="http://harmansecurity.cn/tags/VC6-0/"/>
    
  </entry>
  
  <entry>
    <title>这半年为什么止步不前？</title>
    <link href="http://harmansecurity.cn/2017/01/15/2016%E6%80%BB%E7%BB%93/"/>
    <id>http://harmansecurity.cn/2017/01/15/2016总结/</id>
    <published>2017-01-15T14:42:06.000Z</published>
    <updated>2017-01-16T14:49:55.381Z</updated>
    
    <content type="html"><![CDATA[<!--<img src="/diaryImages/diary-1.jpg" width = "700" height = "400"/>-->
<p><img src="http://ojto7c1rw.bkt.clouddn.com/diary-1.jpg" alt=""><br>　　时间过得很快，读研已半年，这半年来我一直都没好好想过这个问题，这半年我到底做了什么？我试着给自己答案——积累、沉淀，但是却有种莫名的心虚。</p>
<p>　　回顾2016年下半年的历程。七月份，在中科院信工所的物联网安全研发中心实习。去之前，本以为是朝九晚五的上班场景，心里还是忐忑的，结果与我想的截然相反，这里都是研究生，学习氛围很浓厚。那段日子应该就是我研究生阶段的预备期，或许是因为仰慕那些学姐学长基础扎实，编码能力强，为了缩短差距，我坚持每天早晨八点打卡，每晚坚持跑步回去到宿舍已基本十二点，从未给过自己一天的休息时间。当时我的任务是“如何检测内存异常访问”，因为项目的需求，需要了解Linux内核，期间泛读了《Python核心编程》、《鸟哥的Linux私房菜》、《Linux内核完全注释》(强烈推荐)，这三本书可以当做字典来用，没有必要全部读完。也重温了《计算机操作系统》、《计算机组成原理》、《深入理解计算机系统》。在这次实习中，最大的感受就是理论知识的缺乏，大学里面的基础课程在日后还是有很大作用的，于是决定利用接下来的三年时间多积累沉淀，多看些书。<br><a id="more"></a><br>　　入学的那段时间还是比较空闲的，我的计划是先看两本自己研究领域的书籍，虽然导师这边是偏理论，但其实自己对应用还是很热衷的，所以决定再看两本WEB安全的入门书籍。所看的密码学书：《图解密码技术》、《深入浅出密码学》、《基于配对的密码学》；WEB安全相关的书：《WEB安全前端黑客技术解密》、《XSS跨站脚本》(未读完)、《SQL注入攻击与防御》(未读)，此外对余弦发布的技能表做了相应的对照学习。</p>
<p>　　写到这里，也差不多能知道问题出在哪了：在理论上没有多大的进展，仍处于连门都没入的阶段，程序写的不多，没有学习太多的新技术，这就是莫名心虚的原因。最初的想法是先偏理论，不管是否选择继续走学术这条路都要发论文，研一暑假再决定最终是否工作。可能是心急了，要是很多东西一下子就能见成果，那就没多大意义了。或许临近期末的原因，躁动不安，扰乱了情绪，胡思乱想。  —2016.1.5 by LiangHui</p>
<hr>
<p>　　最近也在思考，当初为什么会有读博的想法？“因为之前做的一些东西，只知道如何去实现而不知道机制和原理，想在博士期间好好深入研究。”通过这半年的了解,很多其实并不是当初所想的那样，博士是在一个很小的方向上进行研究并能作出自己的突破。如果读现在的方向的博士达不到当初想要的效果，所以必须明确到底想要什么！接下来的一年将会把重心放在web安全技术上，利用空余的时间多读点书，多去实践。早做决定，早做打算。 —2016.1.15</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;img src=&quot;/diaryImages/diary-1.jpg&quot; width = &quot;700&quot; height = &quot;400&quot;/&gt;--&gt;
&lt;p&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/diary-1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;　　时间过得很快，读研已半年，这半年来我一直都没好好想过这个问题，这半年我到底做了什么？我试着给自己答案——积累、沉淀，但是却有种莫名的心虚。&lt;/p&gt;
&lt;p&gt;　　回顾2016年下半年的历程。七月份，在中科院信工所的物联网安全研发中心实习。去之前，本以为是朝九晚五的上班场景，心里还是忐忑的，结果与我想的截然相反，这里都是研究生，学习氛围很浓厚。那段日子应该就是我研究生阶段的预备期，或许是因为仰慕那些学姐学长基础扎实，编码能力强，为了缩短差距，我坚持每天早晨八点打卡，每晚坚持跑步回去到宿舍已基本十二点，从未给过自己一天的休息时间。当时我的任务是“如何检测内存异常访问”，因为项目的需求，需要了解Linux内核，期间泛读了《Python核心编程》、《鸟哥的Linux私房菜》、《Linux内核完全注释》(强烈推荐)，这三本书可以当做字典来用，没有必要全部读完。也重温了《计算机操作系统》、《计算机组成原理》、《深入理解计算机系统》。在这次实习中，最大的感受就是理论知识的缺乏，大学里面的基础课程在日后还是有很大作用的，于是决定利用接下来的三年时间多积累沉淀，多看些书。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://harmansecurity.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="http://harmansecurity.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
