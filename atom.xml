<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>骑士安全</title>
  <subtitle>Standing on the shoulders of giants.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://harmansecurity.cn/"/>
  <updated>2017-01-19T12:36:20.214Z</updated>
  <id>http://harmansecurity.cn/</id>
  
  <author>
    <name>如梦星影坠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Http抓包与调试</title>
    <link href="http://harmansecurity.cn/2017/01/19/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>http://harmansecurity.cn/2017/01/19/Http抓包与调试/</id>
    <published>2017-01-19T08:22:55.000Z</published>
    <updated>2017-01-19T12:36:20.214Z</updated>
    
    <content type="html"><![CDATA[<p>　 　这边主要介绍火狐的几款插件工具分别是Firebug、TamperData、LiveHttpHeaders、Hackbar和ModifyHeaders，它们可以用来测试和发掘Web应用程序中的跨站漏洞。</p>
<hr>
<h4 id="1-Firebug-抓包与各种调试"><a href="#1-Firebug-抓包与各种调试" class="headerlink" title="1.Firebug(抓包与各种调试)"></a>1.Firebug(抓包与各种调试)</h4><p>　 　Firebug是Firefox浏览器的一个扩展插件，可以动态修改html代码、探索DOM结构、监视网络请求和响应、调试和监测任何页面的CSS、HTML和JavaScript等等。</p>
<h5 id="1-安装城成功后按F12启动Firebug"><a href="#1-安装城成功后按F12启动Firebug" class="headerlink" title="1)安装城成功后按F12启动Firebug"></a>1)安装城成功后按F12启动Firebug</h5><p>　 　打开Firebug后，看到六个标签按钮分别是（控制台、HTML查看器、CSS查看器、脚本调试器、DOM查看器、网络状况监视器）。</p>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%951.png" alt=""></p>
<h5 id="2-控制台"><a href="#2-控制台" class="headerlink" title="2)控制台"></a>2)控制台</h5><p>　 　控制台能够显示当前页面中的JavaScript错误以及警告，并提示出错的文件和行号，使用控制台可以测试一段代码或者函数的执行时间。启用控制台，在窗口的底部能看到命令行输入，以“&gt;”开头，在这里输入JavaScript代码后按Enter键即可执行。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%952.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%953.png" alt=""><br><a id="more"></a></p>
<h5 id="3-动态修改HTML元素"><a href="#3-动态修改HTML元素" class="headerlink" title="3)动态修改HTML元素"></a>3)动态修改HTML元素</h5><p>　 　Frebug可以显示脚本输出的最终源代码，而html查看器只能显示页面本身的源代码。单击查看页面元素按钮，当光标停留在某个元素上时，浏览器会高亮显示对应元素，可以对页面文本节点进行修改，其修改结果马上回反映到浏览器窗口。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%954.png" alt=""></p>
<h5 id="4-查看网络状况"><a href="#4-查看网络状况" class="headerlink" title="4)查看网络状况"></a>4)查看网络状况</h5><p>　 　将Frebug的当前标签切换到“网络”，该标签用来监控网络流量。如果通过XMLHttpRequest对象向服务器端发出一个请求，Firebug会记录该请求的GET或者POST内容，以及回应的头信息和内容。Firebug也能将页面中的CSS、JavaScript以及网页中引用的图片载入所消耗的时间以矩状图显示出来，通过右键就可以复制文件地址、HTTP请求头的信息和响应头信息等等。以登录麦子学院网站为例，惊奇的发现它的账号和密码都是明文传输。:)<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%955.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%956.png" alt=""><br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%957.png" alt=""></p>
<h5 id="5-DOM查看器"><a href="#5-DOM查看器" class="headerlink" title="5)DOM查看器"></a>5)DOM查看器</h5><p>　 　DOM包含了大量的对象以及函数，事件，通过使用Firebug可以检查当前打开程序的各个部分。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%958.png" alt=""></p>
<hr>
<h4 id="2-Tamper-Data-拦截修改"><a href="#2-Tamper-Data-拦截修改" class="headerlink" title="2.Tamper Data(拦截修改)"></a>2.Tamper Data(拦截修改)</h4><p>　 　当测试Web应用程序的安全性的时候，经常会需要对HTTP流量进行分析和动态的修改，这时就需要用到这款工具。安装成功后，在Firefox的工具栏打开，随后在浏览网页的时候发出的每一个Http请求及其对应的响应都会被Tamper Data记录下来。</p>
<h5 id="1-Tamper-Data界面主要是由三部分组成"><a href="#1-Tamper-Data界面主要是由三部分组成" class="headerlink" title="1)Tamper Data界面主要是由三部分组成"></a>1)Tamper Data界面主要是由三部分组成</h5><ul>
<li>第一部分：（上方）HTTP请求概要信息</li>
<li>第二部分：（左下方）显示出对应的HTTP请求的头部信息</li>
<li>第三部分：（右下方）显示出对应的HTTP响应</li>
</ul>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%959.png" alt=""></p>
<h5 id="2-查看细节、源码信息以及网页打开时间"><a href="#2-查看细节、源码信息以及网页打开时间" class="headerlink" title="2)查看细节、源码信息以及网页打开时间"></a>2)查看细节、源码信息以及网页打开时间</h5><p>　 　在主窗口的第一部分单击鼠标右键，此时可以查看细节、源代码信息，单击【GraphAll】按钮，会以图形的方式直观地显示每个页面元素及其打开它们所花的时间。</p>
<h5 id="3-Http请求截取"><a href="#3-Http请求截取" class="headerlink" title="3)Http请求截取"></a>3)Http请求截取</h5><p>　 　在Tamper Data中选择StartTamper菜单项，便开启了对HTTP请求的截取，此时浏览器发出的每一个请求，TamperData都会截取。在开启该功能后单击网页上的任意超链接，便可以看到浏览器弹出一个对话框，然后单击【Tamper】按钮，会弹出一个“TamperPopup”窗口，这个窗口显示了HTTP请求的各种头信息，可以在此随意修改或者添加其他合法的HTTP请求头部字段或POST参数。</p>
<p><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9510.png" alt=""></p>
<hr>
<h4 id="3-Live-HTTP-Headers-重放功能"><a href="#3-Live-HTTP-Headers-重放功能" class="headerlink" title="3.Live HTTP Headers(重放功能)"></a>3.Live HTTP Headers(重放功能)</h4><p>　 　Live HTTP Headers是一款用来分析HTTP流量的Firefox扩展插件，直接在火狐浏览器里面搜索即可安装。</p>
<ul>
<li>窗口底部有一个“capture”复选框，选中后可以使LIVE HTTP Headers 停止向下滚动，以便对已经产生的通信流量进行分析<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9511.png" alt=""></li>
<li>在主窗口选择其中一段请求，然后单击窗口底部的“Replay”按钮会弹出窗口，可对请求进行各种修改，修改后再次单击“replay”可重放请求。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9512.png" alt=""></li>
</ul>
<hr>
<h4 id="4-Hackbar-编码解码-POST提交"><a href="#4-Hackbar-编码解码-POST提交" class="headerlink" title="4.Hackbar(编码解码/POST提交)"></a>4.Hackbar(编码解码/POST提交)</h4><p>　 　HackBar是firefox浏览器上的一个插件,安装方法跟之前的几个插件一样。HackBar其实是一个小工具包，包含一些黑客常用的工具。比如SQL injection,XSS,加密等!功能很多可以下载下来去尝试一下。</p>
<ul>
<li>load url是将地址栏中的网络复制到hackbar中</li>
<li>在sql注入中有一个联合查询，比如字段数是11要是手工的话我们打出union select 1,2,3,4,5,6,7,8,9,10,11这样感觉有点麻烦。通过hackbar的sql选项里面的unionselectstatement在其中输入字段数，hackbar会自动的帮助我们输入那一大串文字。</li>
<li>我们可以对url进行各种编码操作，我们可以在endoding选项下进行url、16进制、base64进行编码解码，可以在xss选项下进行html实体编码，在sql选项下进行空格编码。</li>
<li>在encryption选项中我们可以进行md5,sha1，sha256，rot13加密，单击里面的选项，在弹出的对话框中输入要加密的数据。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9513.png" alt=""></li>
</ul>
<hr>
<h4 id="5-Modify-Headers-修改头部"><a href="#5-Modify-Headers-修改头部" class="headerlink" title="5.Modify Headers(修改头部)"></a>5.Modify Headers(修改头部)</h4><p>　 　这个插件的主要作用是对Firefox的HTTP request headers进行添加、修改和过滤等操作。当我们访问网站的时候，某些网站服务器会对访问网站的浏览器Header信息进行判断，然后决定用什么方式把网站内容呈现给浏览器。服务器也会根据浏览器的header中包含的其他信息（譬如浏览器所在的IP地址）判断是否要讲某一特定的信息呈现给浏览器。</p>
<ul>
<li>选择Add，右边的HeaderName,HeaderValue和DescriptiveComment等字段都会变得可编辑。由于我们要模拟不同地域的IP对网站进行访问(伪造IP地址)，所以HeaderName字段中，我们填入<code>X-Forwarded-For</code>。Header value中，填入你要模拟的地域IP地址，然后在Descriptive comment中填上备注就好。</li>
<li>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。修改User-Agent来模拟用iPhone访问网站。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9514.png" alt=""></li>
<li>伪造IP地址和修改了User Agent，看一下访问百度的请求头信息发生了什么变化。<br><img src="http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%9515.png" alt=""></li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　这边主要介绍火狐的几款插件工具分别是Firebug、TamperData、LiveHttpHeaders、Hackbar和ModifyHeaders，它们可以用来测试和发掘Web应用程序中的跨站漏洞。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-Firebug-抓包与各种调试&quot;&gt;&lt;a href=&quot;#1-Firebug-抓包与各种调试&quot; class=&quot;headerlink&quot; title=&quot;1.Firebug(抓包与各种调试)&quot;&gt;&lt;/a&gt;1.Firebug(抓包与各种调试)&lt;/h4&gt;&lt;p&gt;　 　Firebug是Firefox浏览器的一个扩展插件，可以动态修改html代码、探索DOM结构、监视网络请求和响应、调试和监测任何页面的CSS、HTML和JavaScript等等。&lt;/p&gt;
&lt;h5 id=&quot;1-安装城成功后按F12启动Firebug&quot;&gt;&lt;a href=&quot;#1-安装城成功后按F12启动Firebug&quot; class=&quot;headerlink&quot; title=&quot;1)安装城成功后按F12启动Firebug&quot;&gt;&lt;/a&gt;1)安装城成功后按F12启动Firebug&lt;/h5&gt;&lt;p&gt;　 　打开Firebug后，看到六个标签按钮分别是（控制台、HTML查看器、CSS查看器、脚本调试器、DOM查看器、网络状况监视器）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%951.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;2-控制台&quot;&gt;&lt;a href=&quot;#2-控制台&quot; class=&quot;headerlink&quot; title=&quot;2)控制台&quot;&gt;&lt;/a&gt;2)控制台&lt;/h5&gt;&lt;p&gt;　 　控制台能够显示当前页面中的JavaScript错误以及警告，并提示出错的文件和行号，使用控制台可以测试一段代码或者函数的执行时间。启用控制台，在窗口的底部能看到命令行输入，以“&amp;gt;”开头，在这里输入JavaScript代码后按Enter键即可执行。&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%952.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%953.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Http抓包与调试" scheme="http://harmansecurity.cn/tags/Http%E6%8A%93%E5%8C%85%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    
      <category term="Firebug" scheme="http://harmansecurity.cn/tags/Firebug/"/>
    
      <category term="Tamper Data" scheme="http://harmansecurity.cn/tags/Tamper-Data/"/>
    
      <category term="LiveHttpHeaders" scheme="http://harmansecurity.cn/tags/LiveHttpHeaders/"/>
    
      <category term="Hackbar" scheme="http://harmansecurity.cn/tags/Hackbar/"/>
    
      <category term="Modify Headers" scheme="http://harmansecurity.cn/tags/Modify-Headers/"/>
    
  </entry>
  
  <entry>
    <title>PBC库的常用函数解释</title>
    <link href="http://harmansecurity.cn/2017/01/18/PBC%E5%BA%93%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E8%A7%A3%E9%87%8A/"/>
    <id>http://harmansecurity.cn/2017/01/18/PBC库的常用函数解释/</id>
    <published>2017-01-18T10:59:57.000Z</published>
    <updated>2017-01-18T11:01:33.657Z</updated>
    
    <content type="html"><![CDATA[<p>　 　PBC库使用G1、G2和GT分别表示双线性映射:<code>e:G1xG2-&gt;GT</code>中的G1、G2和GT，他们的阶都为r。Zr表示模r的整数环。配对运算输入两个元素，一个元素来自群G1，另一个元素来自群G2，输出结果是GT中的一个元素。G1和G2也可以是同一个群，即是一个对称配对，这种情况下它们的元素可以相互混淆使用。</p>
<hr>
<h4 id="1-配对的初始化方式"><a href="#1-配对的初始化方式" class="headerlink" title="1.配对的初始化方式"></a>1.配对的初始化方式</h4><h5 id="1-以标准的方式初始化配对"><a href="#1-以标准的方式初始化配对" class="headerlink" title="1) 以标准的方式初始化配对"></a>1) 以标准的方式初始化配对</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pairing_t</span> pairing;<span class="comment">//声明一个配对类型的变量pairing</span></div><div class="line">pairing_init_inp_str(pairing,<span class="built_in">stdin</span>);<span class="comment">//参数stdin表示配对的输入参数方式为标准输入</span></div></pre></td></tr></table></figure>
<h5 id="2-指定类型的方式初始化配对"><a href="#2-指定类型的方式初始化配对" class="headerlink" title="2) 指定类型的方式初始化配对"></a>2) 指定类型的方式初始化配对</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型A的配对</span></div><div class="line">d_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型D的配对</span></div><div class="line">f_param_input(pairing);<span class="comment">//将配对变量pairing初始化为类型F的配对</span></div><div class="line">pairing_clear(pairing);<span class="comment">//调用该函数释放pairing占用的资源</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="2-元素的初始化"><a href="#2-元素的初始化" class="headerlink" title="2.元素的初始化"></a>2.元素的初始化</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init</span><span class="params">(<span class="keyword">element_t</span> e,field_ptr f)</span></span>;<span class="comment">//将元素变量e初始化为代数结构f中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_G1</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群G1中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_G2</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群G2中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_GT</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群GT中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_Zr</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">pairing_t</span> pairing)</span></span>;<span class="comment">//将元素变量e初始化为群Zr中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_init_same_as</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">element_t</span> e2)</span></span>;<span class="comment">//将元素变量e初始化为元素变量e2所在的代数结构中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_clear</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//清楚元素变量e并释放其所占用的资源</span></div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h4 id="3-运算函数"><a href="#3-运算函数" class="headerlink" title="3.运算函数"></a>3.运算函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_add</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a+b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_sub</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a-b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=axb</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul_si</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">int</span> z)</span></span>;<span class="comment">//输入a和z，输出n=axz,z是一个长整型数据</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_mul_zn</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> z)</span></span>;<span class="comment">//输入a和z，输出n=axz,z是整数环中的一个元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_div</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//输入a和b，输出n=a/b</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_double</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a+a</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_halve</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a/2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_square</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=a^2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_neg</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出n=-a</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_invert</span><span class="params">(<span class="keyword">element_t</span> n,<span class="keyword">element_t</span> a)</span></span>;<span class="comment">//输入a，输出a的逆元n</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow_mpz</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a,<span class="keyword">mpz_t</span> n)</span></span>;<span class="comment">//输入a和n，输出x=a^n</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow_zn</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> n)</span></span>;<span class="comment">//输入a和n，输出x=a^n，n是整数环中的元素</span></div><div class="line"><span class="comment">//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow2_mpz</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a1,<span class="keyword">mpz_t</span> n1,<span class="keyword">element_t</span> a2,<span class="keyword">mpz_t</span> n2)</span></span>;</div><div class="line"><span class="comment">//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2,n1,n2是整数环中的元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_pow2_zn</span><span class="params">(<span class="keyword">element_t</span> x,<span class="keyword">element_t</span> a1,<span class="keyword">element_t</span> n1,<span class="keyword">element_t</span> a2,<span class="keyword">element_t</span> n2)</span></span>;</div></pre></td></tr></table></figure>
<hr>
<h4 id="4-其它函数"><a href="#4-其它函数" class="headerlink" title="4.其它函数"></a>4.其它函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_length_in_bytes</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//获得元素变量e的字节数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_random</span><span class="params">(<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//函数从这个代数结构中均匀随机选择一个元素并赋值给e</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_cmp</span><span class="params">(<span class="keyword">element_t</span> a,<span class="keyword">element_t</span> b)</span></span>;<span class="comment">//若变量a和b相等，则函数返回0否则返回1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_to_mpz</span><span class="params">(<span class="keyword">mpz_t</span> z,<span class="keyword">element_t</span> e)</span></span>;<span class="comment">//将元素e转换为一个GMP整数并存储在mpz_t类型的变量z中</span></div><div class="line"><span class="comment">//PBC库中没有提供计算Hash值的函数，这里只是以获得的Hash值作为输入，从中截取一部分表示域中的某个元素</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">element_from_hash</span><span class="params">(<span class="keyword">element_t</span> e,<span class="keyword">void</span> * data,<span class="keyword">int</span> len)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">element_printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * format,...)</span></span>;<span class="comment">//格式化打印元素值</span></div></pre></td></tr></table></figure>
<hr>
<p><em>以上列举了PBC库中的一些常用函数及其代表的意思，如有特殊需求可查阅PBC官方文档。</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　PBC库使用G1、G2和GT分别表示双线性映射:&lt;code&gt;e:G1xG2-&amp;gt;GT&lt;/code&gt;中的G1、G2和GT，他们的阶都为r。Zr表示模r的整数环。配对运算输入两个元素，一个元素来自群G1，另一个元素来自群G2，输出结果是GT中的一个元素。G1和G2也可以是同一个群，即是一个对称配对，这种情况下它们的元素可以相互混淆使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;1-配对的初始化方式&quot;&gt;&lt;a href=&quot;#1-配对的初始化方式&quot; class=&quot;headerlink&quot; title=&quot;1.配对的初始化方式&quot;&gt;&lt;/a&gt;1.配对的初始化方式&lt;/h4&gt;&lt;h5 id=&quot;1-以标准的方式初始化配对&quot;&gt;&lt;a href=&quot;#1-以标准的方式初始化配对&quot; class=&quot;headerlink&quot; title=&quot;1) 以标准的方式初始化配对&quot;&gt;&lt;/a&gt;1) 以标准的方式初始化配对&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing;&lt;span class=&quot;comment&quot;&gt;//声明一个配对类型的变量pairing&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pairing_init_inp_str(pairing,&lt;span class=&quot;built_in&quot;&gt;stdin&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//参数stdin表示配对的输入参数方式为标准输入&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2-指定类型的方式初始化配对&quot;&gt;&lt;a href=&quot;#2-指定类型的方式初始化配对&quot; class=&quot;headerlink&quot; title=&quot;2) 指定类型的方式初始化配对&quot;&gt;&lt;/a&gt;2) 指定类型的方式初始化配对&lt;/h5&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;a_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型A的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型D的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;f_param_input(pairing);&lt;span class=&quot;comment&quot;&gt;//将配对变量pairing初始化为类型F的配对&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pairing_clear(pairing);&lt;span class=&quot;comment&quot;&gt;//调用该函数释放pairing占用的资源&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h4 id=&quot;2-元素的初始化&quot;&gt;&lt;a href=&quot;#2-元素的初始化&quot; class=&quot;headerlink&quot; title=&quot;2.元素的初始化&quot;&gt;&lt;/a&gt;2.元素的初始化&lt;/h4&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,field_ptr f)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为代数结构f中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_G1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群G1中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_G2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群G2中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_GT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群GT中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_Zr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;pairing_t&lt;/span&gt; pairing)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为群Zr中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_init_same_as&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e,&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e2)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//将元素变量e初始化为元素变量e2所在的代数结构中的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;element_clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;element_t&lt;/span&gt; e)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//清楚元素变量e并释放其所占用的资源&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="PBC" scheme="http://harmansecurity.cn/tags/PBC/"/>
    
      <category term="密码学" scheme="http://harmansecurity.cn/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="双线性配对" scheme="http://harmansecurity.cn/tags/%E5%8F%8C%E7%BA%BF%E6%80%A7%E9%85%8D%E5%AF%B9/"/>
    
  </entry>
  
  <entry>
    <title>VC6.0插件安装</title>
    <link href="http://harmansecurity.cn/2017/01/17/VC6.0%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://harmansecurity.cn/2017/01/17/VC6.0插件安装/</id>
    <published>2017-01-17T06:49:04.000Z</published>
    <updated>2017-01-17T15:33:44.823Z</updated>
    
    <content type="html"><![CDATA[<p>　 　因为PBC源码库的一些函数不是很全，导致用VS写了几个程序只好放弃，而支持VC6.0的PBC库比较全，绕了一圈所以只好转战VC++6.0。VC++6.0是一款很老的工具，不是很人性化，对于我这个深度完美主义者肯定是不能接受的，想方设法使它更适合开发，所以安装了一些插件，使开发效率更高。</p>
<p>我主要安装的插件是:<br>1.Visual studio Boosteer;(源码窗口管理)</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1pJAZApP</code>.</li>
<li>功能:方便查看源码，一页里面可以打开多个C文件。</li>
</ul>
<p>2.Visual assist Options;(强烈推荐)</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1dDh7Mtb</code>.</li>
<li>功能:自动识别各种关键字，系统函数，成员变量，自动给出输入提示，自动更正大小写错误，自动标示错误等等。</li>
</ul>
<p>3.为了解决VC++6.0不能添加和打开文件的功能安装了FileTool。</p>
<ul>
<li>下载地址:<code>http://download.csdn.net/detail/ttfy1234/9696351</code>.</li>
<li>功能:VC6.0在添加和打开文件时经常会崩掉，这个插件就是为了解决这个问题。  </li>
</ul>
<p>4.VC6LineNumberAddin;</p>
<ul>
<li>下载地址:<code>http://pan.baidu.com/s/1dD8CfGd</code></li>
<li>功能:VC6.0不自带行号，不方便阅读查找，这个是行号插件。</li>
</ul>
<a id="more"></a>
<p>5.Comment Wizard;</p>
<ul>
<li>下载地址:<code>http://www.cppblog.com/fwxjj/</code>.</li>
<li>功能:Visual C++插件，提供了VC源代码注解标准化与自动化功能。在它的帮助下，您可快速创建标头文件信息注解，文件中模块注解， C++处理方式，以及Ｃ语言功能与历史校正功能注解等等。</li>
</ul>
<p>6.WndTabs+3.20 实现窗口tab效果。</p>
<ul>
<li>下载地址:<code>http://www.wndtabs.com/</code>.</li>
<li>功能:WndTabs主要是在编辑窗口中显示了所有已经打开的文件，在VC中能够更方便的操作这些文件，比如修改文件属性，copy文件路径、文件名等,与第一个VS Booster的功能相近。</li>
</ul>
<p>参考的资料:</p>
<ul>
<li><code>http://blog.csdn.net/cooljun618/article/details/6866798</code></li>
<li><code>http://bbs.csdn.net/topics/390776572</code></li>
</ul>
<p>　 　一个人性化的环境搭好了,下面就是导入项目，官网给的支持VC的PBC源码直接打开有点问题，这边我直接把调通好的源码放在GitHub上面，有需要的人可以去下载，地址是:<code>https://github.com/harmansecurity/PBC-0.4.7-vc6.0</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　 　因为PBC源码库的一些函数不是很全，导致用VS写了几个程序只好放弃，而支持VC6.0的PBC库比较全，绕了一圈所以只好转战VC++6.0。VC++6.0是一款很老的工具，不是很人性化，对于我这个深度完美主义者肯定是不能接受的，想方设法使它更适合开发，所以安装了一些插件，使开发效率更高。&lt;/p&gt;
&lt;p&gt;我主要安装的插件是:&lt;br&gt;1.Visual studio Boosteer;(源码窗口管理)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1pJAZApP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:方便查看源码，一页里面可以打开多个C文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.Visual assist Options;(强烈推荐)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1dDh7Mtb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:自动识别各种关键字，系统函数，成员变量，自动给出输入提示，自动更正大小写错误，自动标示错误等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.为了解决VC++6.0不能添加和打开文件的功能安装了FileTool。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://download.csdn.net/detail/ttfy1234/9696351&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;功能:VC6.0在添加和打开文件时经常会崩掉，这个插件就是为了解决这个问题。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.VC6LineNumberAddin;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址:&lt;code&gt;http://pan.baidu.com/s/1dD8CfGd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;功能:VC6.0不自带行号，不方便阅读查找，这个是行号插件。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="PBC" scheme="http://harmansecurity.cn/tags/PBC/"/>
    
      <category term="密码学" scheme="http://harmansecurity.cn/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
      <category term="VC6.0" scheme="http://harmansecurity.cn/tags/VC6-0/"/>
    
  </entry>
  
  <entry>
    <title>这半年为什么止步不前？</title>
    <link href="http://harmansecurity.cn/2017/01/15/2016%E6%80%BB%E7%BB%93/"/>
    <id>http://harmansecurity.cn/2017/01/15/2016总结/</id>
    <published>2017-01-15T14:42:06.000Z</published>
    <updated>2017-01-16T14:49:55.381Z</updated>
    
    <content type="html"><![CDATA[<!--<img src="/diaryImages/diary-1.jpg" width = "700" height = "400"/>-->
<p><img src="http://ojto7c1rw.bkt.clouddn.com/diary-1.jpg" alt=""><br>　　时间过得很快，读研已半年，这半年来我一直都没好好想过这个问题，这半年我到底做了什么？我试着给自己答案——积累、沉淀，但是却有种莫名的心虚。</p>
<p>　　回顾2016年下半年的历程。七月份，在中科院信工所的物联网安全研发中心实习。去之前，本以为是朝九晚五的上班场景，心里还是忐忑的，结果与我想的截然相反，这里都是研究生，学习氛围很浓厚。那段日子应该就是我研究生阶段的预备期，或许是因为仰慕那些学姐学长基础扎实，编码能力强，为了缩短差距，我坚持每天早晨八点打卡，每晚坚持跑步回去到宿舍已基本十二点，从未给过自己一天的休息时间。当时我的任务是“如何检测内存异常访问”，因为项目的需求，需要了解Linux内核，期间泛读了《Python核心编程》、《鸟哥的Linux私房菜》、《Linux内核完全注释》(强烈推荐)，这三本书可以当做字典来用，没有必要全部读完。也重温了《计算机操作系统》、《计算机组成原理》、《深入理解计算机系统》。在这次实习中，最大的感受就是理论知识的缺乏，大学里面的基础课程在日后还是有很大作用的，于是决定利用接下来的三年时间多积累沉淀，多看些书。<br><a id="more"></a><br>　　入学的那段时间还是比较空闲的，我的计划是先看两本自己研究领域的书籍，虽然导师这边是偏理论，但其实自己对应用还是很热衷的，所以决定再看两本WEB安全的入门书籍。所看的密码学书：《图解密码技术》、《深入浅出密码学》、《基于配对的密码学》；WEB安全相关的书：《WEB安全前端黑客技术解密》、《XSS跨站脚本》(未读完)、《SQL注入攻击与防御》(未读)，此外对余弦发布的技能表做了相应的对照学习。</p>
<p>　　写到这里，也差不多能知道问题出在哪了：在理论上没有多大的进展，仍处于连门都没入的阶段，程序写的不多，没有学习太多的新技术，这就是莫名心虚的原因。最初的想法是先偏理论，不管是否选择继续走学术这条路都要发论文，研一暑假再决定最终是否工作。可能是心急了，要是很多东西一下子就能见成果，那就没多大意义了。或许临近期末的原因，躁动不安，扰乱了情绪，胡思乱想。  —2016.1.5 by LiangHui</p>
<hr>
<p>　　最近也在思考，当初为什么会有读博的想法？“因为之前做的一些东西，只知道如何去实现而不知道机制和原理，想在博士期间好好深入研究。”通过这半年的了解,很多其实并不是当初所想的那样，博士是在一个很小的方向上进行研究并能作出自己的突破。如果读现在的方向的博士达不到当初想要的效果，所以必须明确到底想要什么！接下来的一年将会把重心放在web安全技术上，利用空余的时间多读点书，多去实践。早做决定，早做打算。 —2016.1.15</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--&lt;img src=&quot;/diaryImages/diary-1.jpg&quot; width = &quot;700&quot; height = &quot;400&quot;/&gt;--&gt;
&lt;p&gt;&lt;img src=&quot;http://ojto7c1rw.bkt.clouddn.com/diary-1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;　　时间过得很快，读研已半年，这半年来我一直都没好好想过这个问题，这半年我到底做了什么？我试着给自己答案——积累、沉淀，但是却有种莫名的心虚。&lt;/p&gt;
&lt;p&gt;　　回顾2016年下半年的历程。七月份，在中科院信工所的物联网安全研发中心实习。去之前，本以为是朝九晚五的上班场景，心里还是忐忑的，结果与我想的截然相反，这里都是研究生，学习氛围很浓厚。那段日子应该就是我研究生阶段的预备期，或许是因为仰慕那些学姐学长基础扎实，编码能力强，为了缩短差距，我坚持每天早晨八点打卡，每晚坚持跑步回去到宿舍已基本十二点，从未给过自己一天的休息时间。当时我的任务是“如何检测内存异常访问”，因为项目的需求，需要了解Linux内核，期间泛读了《Python核心编程》、《鸟哥的Linux私房菜》、《Linux内核完全注释》(强烈推荐)，这三本书可以当做字典来用，没有必要全部读完。也重温了《计算机操作系统》、《计算机组成原理》、《深入理解计算机系统》。在这次实习中，最大的感受就是理论知识的缺乏，大学里面的基础课程在日后还是有很大作用的，于是决定利用接下来的三年时间多积累沉淀，多看些书。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://harmansecurity.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="http://harmansecurity.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
