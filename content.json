[{"title":"Http抓包与调试(Fiddler)","date":"2017-02-09T13:19:07.000Z","path":"2017/02/09/Http抓包与调试(Fiddler)/","text":"一、什么是Fiddler？ 1.Fiddler是位于客户端和服务器端的HTTP代理，也是目前最常用的http抓包工具之一。它能够记录客户端和服务器之间的所有HTTP请求，可以针对特定的HTTP请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。既然是代理，也就是说：客户端的所有请求都要先经过Fiddler，然后转发到相应的服务器，反之，服务器端的所有响应，也都会先经过Fiddler然后发送到客户端，基于这个原因，Fiddler支持所有可以设置http代理为 127.0.0.1:8888 的浏览器和应用程序。使用了Fiddler之后，web客户端和服务器的请求如下所示: 2.Fiddler 作为系统代理，当启用Fiddler时，IE的PROXY设定会变成 127.0.0.1:8888，因此如果你的浏览器在开启fiddler之后没有设置相应的代理，则fiddler是无法捕获到HTTP请求的。如下是启动Fiddler之后，IE浏览器的代理设置： 3.以Firefox为例，默认情况下，firefox是没有启用代理的（如果你安装了proxy等代理工具或插件，是另外一种情况），在firefox中配置http代理的步骤如下：工具-&gt;选项-&gt;高级-&gt;网络-&gt;设置。并配置相应的代理如下就可以使用Fiddler抓取Firefox的HTTP请求了。 二、Fiddler使用界面简介Fiddler主界面的布局如下： ###### 主界面中主要包括四个常用的块： Fiddler的菜单栏，上图绿色部分。包括捕获http请求，停止捕获请求，保存http请求，载入本地session、设置捕获规则等功能。 Fiddler的工具栏,上图红色部分。Replay：回放按钮; X：清空监控面板； Go：调试Debug；``Stream：模式切换；（流模式与缓冲模式） Decode：解压请求； Keep session：保持会话； Any Process：过滤请求；（如只查看Chrome的请求） Find：查找； Save：保存会话； 保存截图； 计时器； Browser：快速启动浏览器； TextWizard：编码/解码；（非常常用） Tearoff：分离面板； MSDN Search：MSDN搜索； web Session面板，上图黄色区域，主要是Fiddler抓取到的每条http请求（每一条称为一个session）,主要包含了请求的url，协议，状态码，body等信息，详细的字段含义如下图所示： 详情和数据统计面板。针对每条http请求的具体统计（例如发送/接受字节数，发送/接收时间，还有粗略统计世界各地访问该服务器所花费的时间）和数据包分析。如inspector面板下，提供headers、textview、hexview,Raw等多种方式查看单条http请求的请求报文的信息：而composer面板下，则可以模拟向相应的服务器发送数据的过程（这就是灌水机器人的基本原理,也可以是部分http flood的一种方式）。也可以粘贴一次请求的raw http headers,达到模拟请求的目的： 三、Fiddler内置命令 为了更加方便的管理所有的session, Fiddler提供了一系列内置的函数用于筛选和操作这些session.输入命令的位置在websession管理面板的下方（通过快捷键alt+q可以focus到命令行）.Fiddler内置的命令有如下几种： 1. select命令。选择所有相应类型（指content-type）为指定类型的HTTP请求，如选择图片，使用命令select image.而select css则可以选择所有相应类型为css的请求，select html则选择所有响应为HTML的请求（怎么样，是不是跟SQL语句很像？）。如图是执行select image之后的结果： ###### 2. allbut命令。allbut命令用于选择所有响应类型不是给定类型的HTTP请求。如allbut image用于选择所有相应类型不是图片的session(HTTP请求)，该命令还有一个别名keeponly.需要注意的是，keeponly和allbut命令是将不是该类型的session删除，留下的都是该类型的响应。因此，如果你执行allbut xxxx（不存在的类型），实际上类似与执行cls命令（删除所有的session, ctrl+x快捷键也是这个作用）###### 3. ?text命令选择所有 URL 匹配问号后的字符的全部 session###### 4. &gt;size 和","tags":[{"name":"Http抓包与调试","slug":"Http抓包与调试","permalink":"http://harmansecurity.cn/tags/Http抓包与调试/"},{"name":"Fiddler","slug":"Fiddler","permalink":"http://harmansecurity.cn/tags/Fiddler/"},{"name":"浏览器代理","slug":"浏览器代理","permalink":"http://harmansecurity.cn/tags/浏览器代理/"},{"name":"拦截请求或响应","slug":"拦截请求或响应","permalink":"http://harmansecurity.cn/tags/拦截请求或响应/"},{"name":"抓包和重放","slug":"抓包和重放","permalink":"http://harmansecurity.cn/tags/抓包和重放/"}]},{"title":"Http抓包与调试(Firefox插件)","date":"2017-01-19T08:22:55.000Z","path":"2017/01/19/Http抓包与调试(Firefox插件)/","text":"这边主要介绍火狐的几款插件工具分别是Firebug、TamperData、LiveHttpHeaders、Hackbar和ModifyHeaders，它们可以用来测试和发掘Web应用程序中的跨站漏洞。 1.Firebug(抓包与各种调试) Firebug是Firefox浏览器的一个扩展插件，可以动态修改html代码、探索DOM结构、监视网络请求和响应、调试和监测任何页面的CSS、HTML和JavaScript等等。 1)安装城成功后按F12启动Firebug 打开Firebug后，看到六个标签按钮分别是（控制台、HTML查看器、CSS查看器、脚本调试器、DOM查看器、网络状况监视器）。 2)控制台 控制台能够显示当前页面中的JavaScript错误以及警告，并提示出错的文件和行号，使用控制台可以测试一段代码或者函数的执行时间。启用控制台，在窗口的底部能看到命令行输入，以“&gt;”开头，在这里输入JavaScript代码后按Enter键即可执行。 3)动态修改HTML元素 Frebug可以显示脚本输出的最终源代码，而html查看器只能显示页面本身的源代码。单击查看页面元素按钮，当光标停留在某个元素上时，浏览器会高亮显示对应元素，可以对页面文本节点进行修改，其修改结果马上回反映到浏览器窗口。 4)查看网络状况 将Frebug的当前标签切换到“网络”，该标签用来监控网络流量。如果通过XMLHttpRequest对象向服务器端发出一个请求，Firebug会记录该请求的GET或者POST内容，以及回应的头信息和内容。Firebug也能将页面中的CSS、JavaScript以及网页中引用的图片载入所消耗的时间以矩状图显示出来，通过右键就可以复制文件地址、HTTP请求头的信息和响应头信息等等。以登录麦子学院网站为例，惊奇的发现它的账号和密码都是明文传输。:) 5)DOM查看器 DOM包含了大量的对象以及函数，事件，通过使用Firebug可以检查当前打开程序的各个部分。 2.Tamper Data(拦截修改) 当测试Web应用程序的安全性的时候，经常会需要对HTTP流量进行分析和动态的修改，这时就需要用到这款工具。安装成功后，在Firefox的工具栏打开，随后在浏览网页的时候发出的每一个Http请求及其对应的响应都会被Tamper Data记录下来。 1)Tamper Data界面主要是由三部分组成 第一部分：（上方）HTTP请求概要信息 第二部分：（左下方）显示出对应的HTTP请求的头部信息 第三部分：（右下方）显示出对应的HTTP响应 2)查看细节、源码信息以及网页打开时间 在主窗口的第一部分单击鼠标右键，此时可以查看细节、源代码信息，单击【GraphAll】按钮，会以图形的方式直观地显示每个页面元素及其打开它们所花的时间。 3)Http请求截取 在Tamper Data中选择StartTamper菜单项，便开启了对HTTP请求的截取，此时浏览器发出的每一个请求，TamperData都会截取。在开启该功能后单击网页上的任意超链接，便可以看到浏览器弹出一个对话框，然后单击【Tamper】按钮，会弹出一个“TamperPopup”窗口，这个窗口显示了HTTP请求的各种头信息，可以在此随意修改或者添加其他合法的HTTP请求头部字段或POST参数。 3.Live HTTP Headers(重放功能) Live HTTP Headers是一款用来分析HTTP流量的Firefox扩展插件，直接在火狐浏览器里面搜索即可安装。 窗口底部有一个“capture”复选框，选中后可以使LIVE HTTP Headers 停止向下滚动，以便对已经产生的通信流量进行分析 在主窗口选择其中一段请求，然后单击窗口底部的“Replay”按钮会弹出窗口，可对请求进行各种修改，修改后再次单击“replay”可重放请求。 4.Hackbar(编码解码/POST提交) HackBar是firefox浏览器上的一个插件,安装方法跟之前的几个插件一样。HackBar其实是一个小工具包，包含一些黑客常用的工具。比如SQL injection,XSS,加密等!功能很多可以下载下来去尝试一下。 load url是将地址栏中的网络复制到hackbar中 在sql注入中有一个联合查询，比如字段数是11要是手工的话我们打出union select 1,2,3,4,5,6,7,8,9,10,11这样感觉有点麻烦。通过hackbar的sql选项里面的unionselectstatement在其中输入字段数，hackbar会自动的帮助我们输入那一大串文字。 我们可以对url进行各种编码操作，我们可以在endoding选项下进行url、16进制、base64进行编码解码，可以在xss选项下进行html实体编码，在sql选项下进行空格编码。 在encryption选项中我们可以进行md5,sha1，sha256，rot13加密，单击里面的选项，在弹出的对话框中输入要加密的数据。 5.Modify Headers(修改头部) 这个插件的主要作用是对Firefox的HTTP request headers进行添加、修改和过滤等操作。当我们访问网站的时候，某些网站服务器会对访问网站的浏览器Header信息进行判断，然后决定用什么方式把网站内容呈现给浏览器。服务器也会根据浏览器的header中包含的其他信息（譬如浏览器所在的IP地址）判断是否要讲某一特定的信息呈现给浏览器。 选择Add，右边的HeaderName,HeaderValue和DescriptiveComment等字段都会变得可编辑。由于我们要模拟不同地域的IP对网站进行访问(伪造IP地址)，所以HeaderName字段中，我们填入X-Forwarded-For。Header value中，填入你要模拟的地域IP地址，然后在Descriptive comment中填上备注就好。 User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。修改User-Agent来模拟用iPhone访问网站。 伪造IP地址和修改了User Agent，看一下访问百度的请求头信息发生了什么变化。","tags":[{"name":"Http抓包与调试","slug":"Http抓包与调试","permalink":"http://harmansecurity.cn/tags/Http抓包与调试/"},{"name":"Firebug","slug":"Firebug","permalink":"http://harmansecurity.cn/tags/Firebug/"},{"name":"Tamper Data","slug":"Tamper-Data","permalink":"http://harmansecurity.cn/tags/Tamper-Data/"},{"name":"LiveHttpHeaders","slug":"LiveHttpHeaders","permalink":"http://harmansecurity.cn/tags/LiveHttpHeaders/"},{"name":"Hackbar","slug":"Hackbar","permalink":"http://harmansecurity.cn/tags/Hackbar/"},{"name":"Modify Headers","slug":"Modify-Headers","permalink":"http://harmansecurity.cn/tags/Modify-Headers/"}]},{"title":"PBC库的常用函数解释","date":"2017-01-18T10:59:57.000Z","path":"2017/01/18/PBC库的常用函数解释/","text":"PBC库使用G1、G2和GT分别表示双线性映射:e:G1xG2-&gt;GT中的G1、G2和GT，他们的阶都为r。Zr表示模r的整数环。配对运算输入两个元素，一个元素来自群G1，另一个元素来自群G2，输出结果是GT中的一个元素。G1和G2也可以是同一个群，即是一个对称配对，这种情况下它们的元素可以相互混淆使用。 1.配对的初始化方式1) 以标准的方式初始化配对12pairing_t pairing;//声明一个配对类型的变量pairingpairing_init_inp_str(pairing,stdin);//参数stdin表示配对的输入参数方式为标准输入 2) 指定类型的方式初始化配对1234a_param_input(pairing);//将配对变量pairing初始化为类型A的配对d_param_input(pairing);//将配对变量pairing初始化为类型D的配对f_param_input(pairing);//将配对变量pairing初始化为类型F的配对pairing_clear(pairing);//调用该函数释放pairing占用的资源 2.元素的初始化1234567void element_init(element_t e,field_ptr f);//将元素变量e初始化为代数结构f中的元素void element_init_G1(element_t e,pairing_t pairing);//将元素变量e初始化为群G1中的元素void element_init_G2(element_t e,pairing_t pairing);//将元素变量e初始化为群G2中的元素void element_init_GT(element_t e,pairing_t pairing);//将元素变量e初始化为群GT中的元素void element_init_Zr(element_t e,pairing_t pairing);//将元素变量e初始化为群Zr中的元素void element_init_same_as(element_t e,element_t e2);//将元素变量e初始化为元素变量e2所在的代数结构中的元素void element_clear(element_t e);//清楚元素变量e并释放其所占用的资源 3.运算函数1234567891011121314151617void element_add(element_t n,element_t a,element_t b);//输入a和b，输出n=a+bvoid element_sub(element_t n,element_t a,element_t b);//输入a和b，输出n=a-bvoid element_mul(element_t n,element_t a,element_t b);//输入a和b，输出n=axbvoid element_mul_si(element_t n,element_t a,signed long int z);//输入a和z，输出n=axz,z是一个长整型数据void element_mul_zn(element_t n,element_t a,element_t z);//输入a和z，输出n=axz,z是整数环中的一个元素void element_div(element_t n,element_t a,element_t b);//输入a和b，输出n=a/bvoid element_double(element_t n,element_t a);//输入a，输出n=a+avoid element_halve(element_t n,element_t a);//输入a，输出n=a/2void element_square(element_t n,element_t a);//输入a，输出n=a^2void element_neg(element_t n,element_t a);//输入a，输出n=-avoid element_invert(element_t n,element_t a);//输入a，输出a的逆元nvoid element_pow_mpz(element_t x,element_t a,mpz_t n);//输入a和n，输出x=a^nvoid element_pow_zn(element_t x,element_t a,element_t n);//输入a和n，输出x=a^n，n是整数环中的元素//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2void element_pow2_mpz(element_t x,element_t a1,mpz_t n1,element_t a2,mpz_t n2);//输入a1,a2和n1,n2，输出x=a1^n1xa2^n2,n1,n2是整数环中的元素void element_pow2_zn(element_t x,element_t a1,element_t n1,element_t a2,element_t n2); 4.其它函数1234567int element_length_in_bytes(element_t e);//获得元素变量e的字节数void element_random(element_t e);//函数从这个代数结构中均匀随机选择一个元素并赋值给eint element_cmp(element_t a,element_t b);//若变量a和b相等，则函数返回0否则返回1void element_to_mpz(mpz_t z,element_t e);//将元素e转换为一个GMP整数并存储在mpz_t类型的变量z中//PBC库中没有提供计算Hash值的函数，这里只是以获得的Hash值作为输入，从中截取一部分表示域中的某个元素void element_from_hash(element_t e,void * data,int len);int element_printf(const char * format,...);//格式化打印元素值 以上列举了PBC库中的一些常用函数及其代表的意思，如有特殊需求可查阅PBC官方文档。","tags":[{"name":"PBC","slug":"PBC","permalink":"http://harmansecurity.cn/tags/PBC/"},{"name":"密码学","slug":"密码学","permalink":"http://harmansecurity.cn/tags/密码学/"},{"name":"双线性配对","slug":"双线性配对","permalink":"http://harmansecurity.cn/tags/双线性配对/"}]},{"title":"VC6.0插件安装","date":"2017-01-17T06:49:04.000Z","path":"2017/01/17/VC6.0插件安装/","text":"因为PBC源码库的一些函数不是很全，导致用VS写了几个程序只好放弃，而支持VC6.0的PBC库比较全，绕了一圈所以只好转战VC++6.0。VC++6.0是一款很老的工具，不是很人性化，对于我这个深度完美主义者肯定是不能接受的，想方设法使它更适合开发，所以安装了一些插件，使开发效率更高。 我主要安装的插件是:1.Visual studio Boosteer;(源码窗口管理) 下载地址:http://pan.baidu.com/s/1pJAZApP. 功能:方便查看源码，一页里面可以打开多个C文件。 2.Visual assist Options;(强烈推荐) 下载地址:http://pan.baidu.com/s/1dDh7Mtb. 功能:自动识别各种关键字，系统函数，成员变量，自动给出输入提示，自动更正大小写错误，自动标示错误等等。 3.为了解决VC++6.0不能添加和打开文件的功能安装了FileTool。 下载地址:http://download.csdn.net/detail/ttfy1234/9696351. 功能:VC6.0在添加和打开文件时经常会崩掉，这个插件就是为了解决这个问题。 4.VC6LineNumberAddin; 下载地址:http://pan.baidu.com/s/1dD8CfGd 功能:VC6.0不自带行号，不方便阅读查找，这个是行号插件。 5.Comment Wizard; 下载地址:http://www.cppblog.com/fwxjj/. 功能:Visual C++插件，提供了VC源代码注解标准化与自动化功能。在它的帮助下，您可快速创建标头文件信息注解，文件中模块注解， C++处理方式，以及Ｃ语言功能与历史校正功能注解等等。 6.WndTabs+3.20 实现窗口tab效果。 下载地址:http://www.wndtabs.com/. 功能:WndTabs主要是在编辑窗口中显示了所有已经打开的文件，在VC中能够更方便的操作这些文件，比如修改文件属性，copy文件路径、文件名等,与第一个VS Booster的功能相近。 参考的资料: http://blog.csdn.net/cooljun618/article/details/6866798 http://bbs.csdn.net/topics/390776572 一个人性化的环境搭好了,下面就是导入项目，官网给的支持VC的PBC源码直接打开有点问题，这边我直接把调通好的源码放在GitHub上面，有需要的人可以去下载，地址是:https://github.com/harmansecurity/PBC-0.4.7-vc6.0.","tags":[{"name":"PBC","slug":"PBC","permalink":"http://harmansecurity.cn/tags/PBC/"},{"name":"密码学","slug":"密码学","permalink":"http://harmansecurity.cn/tags/密码学/"},{"name":"VC6.0","slug":"VC6-0","permalink":"http://harmansecurity.cn/tags/VC6-0/"}]},{"title":"这半年为什么止步不前？","date":"2017-01-15T14:42:06.000Z","path":"2017/01/15/2016总结/","text":"时间过得很快，读研已半年，这半年来我一直都没好好想过这个问题，这半年我到底做了什么？我试着给自己答案——积累、沉淀，但是却有种莫名的心虚。 回顾2016年下半年的历程。七月份，在中科院信工所的物联网安全研发中心实习。去之前，本以为是朝九晚五的上班场景，心里还是忐忑的，结果与我想的截然相反，这里都是研究生，学习氛围很浓厚。那段日子应该就是我研究生阶段的预备期，或许是因为仰慕那些学姐学长基础扎实，编码能力强，为了缩短差距，我坚持每天早晨八点打卡，每晚坚持跑步回去到宿舍已基本十二点，从未给过自己一天的休息时间。当时我的任务是“如何检测内存异常访问”，因为项目的需求，需要了解Linux内核，期间泛读了《Python核心编程》、《鸟哥的Linux私房菜》、《Linux内核完全注释》(强烈推荐)，这三本书可以当做字典来用，没有必要全部读完。也重温了《计算机操作系统》、《计算机组成原理》、《深入理解计算机系统》。在这次实习中，最大的感受就是理论知识的缺乏，大学里面的基础课程在日后还是有很大作用的，于是决定利用接下来的三年时间多积累沉淀，多看些书。 入学的那段时间还是比较空闲的，我的计划是先看两本自己研究领域的书籍，虽然导师这边是偏理论，但其实自己对应用还是很热衷的，所以决定再看两本WEB安全的入门书籍。所看的密码学书：《图解密码技术》、《深入浅出密码学》、《基于配对的密码学》；WEB安全相关的书：《WEB安全前端黑客技术解密》、《XSS跨站脚本》(未读完)、《SQL注入攻击与防御》(未读)，此外对余弦发布的技能表做了相应的对照学习。 写到这里，也差不多能知道问题出在哪了：在理论上没有多大的进展，仍处于连门都没入的阶段，程序写的不多，没有学习太多的新技术，这就是莫名心虚的原因。最初的想法是先偏理论，不管是否选择继续走学术这条路都要发论文，研一暑假再决定最终是否工作。可能是心急了，要是很多东西一下子就能见成果，那就没多大意义了。或许临近期末的原因，躁动不安，扰乱了情绪，胡思乱想。 —2016.1.5 by LiangHui 最近也在思考，当初为什么会有读博的想法？“因为之前做的一些东西，只知道如何去实现而不知道机制和原理，想在博士期间好好深入研究。”通过这半年的了解,很多其实并不是当初所想的那样，博士是在一个很小的方向上进行研究并能作出自己的突破。如果读现在的方向的博士达不到当初想要的效果，所以必须明确到底想要什么！接下来的一年将会把重心放在web安全技术上，利用空余的时间多读点书，多去实践。早做决定，早做打算。 —2016.1.15","tags":[{"name":"总结","slug":"总结","permalink":"http://harmansecurity.cn/tags/总结/"}]}]